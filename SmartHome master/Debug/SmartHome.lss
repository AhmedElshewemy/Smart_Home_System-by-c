
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00003926  000039ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800194  00800194  00003aee  2**0
                  ALLOC
  3 .stab         00003978  00000000  00000000  00003af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001252  00000000  00000000  00007468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000086ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000881a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000089a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000baef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ca74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ceb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 02 1a 	call	0x3404	; 0x3404 <main>
      8a:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_VidInit>:
#include "ADC.h"




void ADC_VidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADPS0);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_U16GetDigitalValue>:

u16 ADC_U16GetDigitalValue(u8 Copy_U8ChannelNumber){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <ADC_U16GetDigitalValue+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U16_value;
	ADMUX &=0b11100000;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 7e       	andi	r24, 0xE0	; 224
     d36:	8c 93       	st	X, r24
	ADMUX |=Copy_U8ChannelNumber ;
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	90 81       	ld	r25, Z
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	8c 93       	st	X, r24

	while((GET_BIT(ADCSRA , ADIF))==0);
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 95       	swap	r24
     d5e:	8f 70       	andi	r24, 0x0F	; 15
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a9 f3       	breq	.-22     	; 0xd56 <ADC_U16GetDigitalValue+0x3a>

	SET_BIT(ADCSRA , ADIF);
     d6c:	a6 e2       	ldi	r26, 0x26	; 38
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e6 e2       	ldi	r30, 0x26	; 38
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 61       	ori	r24, 0x10	; 16
     d78:	8c 93       	st	X, r24

	Local_U16_value=ADC;
     d7a:	e4 e2       	ldi	r30, 0x24	; 36
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01

	return Local_U16_value;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02

}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <DIO_VidSetPinDirection>:
#include "DIO.h"

/*Function for the direction*/
void DIO_VidSetPinDirection(u8 Copy_U8Port, u8 Copy_U8pin, u8 Copy_U8Direction)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	29 97       	sbiw	r28, 0x09	; 9
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
     dae:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8Direction)
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	39 87       	std	Y+9, r19	; 0x09
     db8:	28 87       	std	Y+8, r18	; 0x08
     dba:	88 85       	ldd	r24, Y+8	; 0x08
     dbc:	99 85       	ldd	r25, Y+9	; 0x09
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <DIO_VidSetPinDirection+0x3a>
     dc2:	28 85       	ldd	r18, Y+8	; 0x08
     dc4:	39 85       	ldd	r19, Y+9	; 0x09
     dc6:	21 30       	cpi	r18, 0x01	; 1
     dc8:	31 05       	cpc	r19, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <DIO_VidSetPinDirection+0x38>
     dcc:	75 c0       	rjmp	.+234    	; 0xeb8 <DIO_VidSetPinDirection+0x122>
     dce:	e2 c0       	rjmp	.+452    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	{
	       case DIO_INPUT:
	    	   switch (Copy_U8Port)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	3f 83       	std	Y+7, r19	; 0x07
     dd8:	2e 83       	std	Y+6, r18	; 0x06
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	9f 81       	ldd	r25, Y+7	; 0x07
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	91 05       	cpc	r25, r1
     de2:	59 f1       	breq	.+86     	; 0xe3a <DIO_VidSetPinDirection+0xa4>
     de4:	2e 81       	ldd	r18, Y+6	; 0x06
     de6:	3f 81       	ldd	r19, Y+7	; 0x07
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	2c f4       	brge	.+10     	; 0xdf8 <DIO_VidSetPinDirection+0x62>
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	69 f0       	breq	.+26     	; 0xe10 <DIO_VidSetPinDirection+0x7a>
     df6:	ce c0       	rjmp	.+412    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
     df8:	2e 81       	ldd	r18, Y+6	; 0x06
     dfa:	3f 81       	ldd	r19, Y+7	; 0x07
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	89 f1       	breq	.+98     	; 0xe64 <DIO_VidSetPinDirection+0xce>
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	91 05       	cpc	r25, r1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <DIO_VidSetPinDirection+0x78>
     e0c:	40 c0       	rjmp	.+128    	; 0xe8e <DIO_VidSetPinDirection+0xf8>
     e0e:	c2 c0       	rjmp	.+388    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	   {
	    	        case DIO_PORTA :
	    	        	CLR_BIT(DDRA, Copy_U8pin);
     e10:	aa e3       	ldi	r26, 0x3A	; 58
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ea e3       	ldi	r30, 0x3A	; 58
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_VidSetPinDirection+0x98>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_VidSetPinDirection+0x94>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	ad c0       	rjmp	.+346    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTB:
	    	        	CLR_BIT(DDRB, Copy_U8pin);
     e3a:	a7 e3       	ldi	r26, 0x37	; 55
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_VidSetPinDirection+0xc2>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_VidSetPinDirection+0xbe>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	98 c0       	rjmp	.+304    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTC:
	    	        	CLR_BIT(DDRC, Copy_U8pin);
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_VidSetPinDirection+0xec>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_VidSetPinDirection+0xe8>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	83 c0       	rjmp	.+262    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTD:
	    	        	CLR_BIT(DDRD, Copy_U8pin);
     e8e:	a1 e3       	ldi	r26, 0x31	; 49
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e1 e3       	ldi	r30, 0x31	; 49
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinDirection+0x116>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinDirection+0x112>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	6e c0       	rjmp	.+220    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	        	break;


	    	   }break;
	       case DIO_OUTPUT:
	    	   switch (Copy_U8Port)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3d 83       	std	Y+5, r19	; 0x05
     ec0:	2c 83       	std	Y+4, r18	; 0x04
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	49 f1       	breq	.+82     	; 0xf1e <DIO_VidSetPinDirection+0x188>
     ecc:	2c 81       	ldd	r18, Y+4	; 0x04
     ece:	3d 81       	ldd	r19, Y+5	; 0x05
     ed0:	22 30       	cpi	r18, 0x02	; 2
     ed2:	31 05       	cpc	r19, r1
     ed4:	2c f4       	brge	.+10     	; 0xee0 <DIO_VidSetPinDirection+0x14a>
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	61 f0       	breq	.+24     	; 0xef6 <DIO_VidSetPinDirection+0x160>
     ede:	5a c0       	rjmp	.+180    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
     ee0:	2c 81       	ldd	r18, Y+4	; 0x04
     ee2:	3d 81       	ldd	r19, Y+5	; 0x05
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	71 f1       	breq	.+92     	; 0xf46 <DIO_VidSetPinDirection+0x1b0>
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	e9 f1       	breq	.+122    	; 0xf6e <DIO_VidSetPinDirection+0x1d8>
     ef4:	4f c0       	rjmp	.+158    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	  	  {
	    	  	    case DIO_PORTA :
	    	            SET_BIT(DDRA, Copy_U8pin);
     ef6:	aa e3       	ldi	r26, 0x3A	; 58
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ea e3       	ldi	r30, 0x3A	; 58
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_VidSetPinDirection+0x17e>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_VidSetPinDirection+0x17a>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	3b c0       	rjmp	.+118    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
 	    	            break;

	    	  	    case DIO_PORTB:
	    	  	    	SET_BIT(DDRB, Copy_U8pin);
     f1e:	a7 e3       	ldi	r26, 0x37	; 55
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e3       	ldi	r30, 0x37	; 55
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_VidSetPinDirection+0x1a6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_VidSetPinDirection+0x1a2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	27 c0       	rjmp	.+78     	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	  	    	break;

	    	  	   case DIO_PORTC:
	    	  	    	 SET_BIT(DDRC, Copy_U8pin);
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_VidSetPinDirection+0x1ce>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_VidSetPinDirection+0x1ca>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	  	    	 break;

	    	  	    case DIO_PORTD:
	    	  	    	 SET_BIT(DDRD, Copy_U8pin);
     f6e:	a1 e3       	ldi	r26, 0x31	; 49
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e1 e3       	ldi	r30, 0x31	; 49
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_VidSetPinDirection+0x1f6>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_VidSetPinDirection+0x1f2>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
	    	  	  }break;


	}

}
     f94:	29 96       	adiw	r28, 0x09	; 9
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <DIO_VidSetPinValue>:



/*Function for the  value*/
void DIO_VidSetPinValue(u8 Copy_U8Port, u8 Copy_U8pin, u8 Copy_U8Value)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	29 97       	sbiw	r28, 0x09	; 9
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	6a 83       	std	Y+2, r22	; 0x02
     fbe:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8Value)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	39 87       	std	Y+9, r19	; 0x09
     fc8:	28 87       	std	Y+8, r18	; 0x08
     fca:	88 85       	ldd	r24, Y+8	; 0x08
     fcc:	99 85       	ldd	r25, Y+9	; 0x09
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <DIO_VidSetPinValue+0x3a>
     fd2:	28 85       	ldd	r18, Y+8	; 0x08
     fd4:	39 85       	ldd	r19, Y+9	; 0x09
     fd6:	21 30       	cpi	r18, 0x01	; 1
     fd8:	31 05       	cpc	r19, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <DIO_VidSetPinValue+0x38>
     fdc:	75 c0       	rjmp	.+234    	; 0x10c8 <DIO_VidSetPinValue+0x122>
     fde:	e2 c0       	rjmp	.+452    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		{
		       case DIO_LOW:
		    	   switch (Copy_U8Port)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3f 83       	std	Y+7, r19	; 0x07
     fe8:	2e 83       	std	Y+6, r18	; 0x06
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	59 f1       	breq	.+86     	; 0x104a <DIO_VidSetPinValue+0xa4>
     ff4:	2e 81       	ldd	r18, Y+6	; 0x06
     ff6:	3f 81       	ldd	r19, Y+7	; 0x07
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	2c f4       	brge	.+10     	; 0x1008 <DIO_VidSetPinValue+0x62>
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	9f 81       	ldd	r25, Y+7	; 0x07
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f0       	breq	.+26     	; 0x1020 <DIO_VidSetPinValue+0x7a>
    1006:	ce c0       	rjmp	.+412    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
    1008:	2e 81       	ldd	r18, Y+6	; 0x06
    100a:	3f 81       	ldd	r19, Y+7	; 0x07
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	89 f1       	breq	.+98     	; 0x1074 <DIO_VidSetPinValue+0xce>
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	9f 81       	ldd	r25, Y+7	; 0x07
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <DIO_VidSetPinValue+0x78>
    101c:	40 c0       	rjmp	.+128    	; 0x109e <DIO_VidSetPinValue+0xf8>
    101e:	c2 c0       	rjmp	.+388    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	   {
		    	        case DIO_PORTA :
		    	        	CLR_BIT(PORTA, Copy_U8pin);
    1020:	ab e3       	ldi	r26, 0x3B	; 59
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	eb e3       	ldi	r30, 0x3B	; 59
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_VidSetPinValue+0x98>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_VidSetPinValue+0x94>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	ad c0       	rjmp	.+346    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTB:
		    	        	CLR_BIT(PORTB, Copy_U8pin);
    104a:	a8 e3       	ldi	r26, 0x38	; 56
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e3       	ldi	r30, 0x38	; 56
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_VidSetPinValue+0xc2>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_VidSetPinValue+0xbe>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	98 c0       	rjmp	.+304    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTC:
		    	        	CLR_BIT(PORTC, Copy_U8pin);
    1074:	a5 e3       	ldi	r26, 0x35	; 53
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e3       	ldi	r30, 0x35	; 53
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_VidSetPinValue+0xec>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_VidSetPinValue+0xe8>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	83 c0       	rjmp	.+262    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTD:
		    	        	CLR_BIT(PORTD, Copy_U8pin);
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_VidSetPinValue+0x116>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_VidSetPinValue+0x112>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	6e c0       	rjmp	.+220    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	        	break;


		    	   } break;
		       case DIO_HIGH:
		    	   switch (Copy_U8Port)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	49 f1       	breq	.+82     	; 0x112e <DIO_VidSetPinValue+0x188>
    10dc:	2c 81       	ldd	r18, Y+4	; 0x04
    10de:	3d 81       	ldd	r19, Y+5	; 0x05
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <DIO_VidSetPinValue+0x14a>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	61 f0       	breq	.+24     	; 0x1106 <DIO_VidSetPinValue+0x160>
    10ee:	5a c0       	rjmp	.+180    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	71 f1       	breq	.+92     	; 0x1156 <DIO_VidSetPinValue+0x1b0>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	91 05       	cpc	r25, r1
    1102:	e9 f1       	breq	.+122    	; 0x117e <DIO_VidSetPinValue+0x1d8>
    1104:	4f c0       	rjmp	.+158    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	  	  {
		    	  	    case DIO_PORTA :
		    	            SET_BIT(PORTA, Copy_U8pin);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_VidSetPinValue+0x17e>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_VidSetPinValue+0x17a>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	3b c0       	rjmp	.+118    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	 	    	            break;

		    	  	    case DIO_PORTB:
		    	  	    	SET_BIT(PORTB, Copy_U8pin);
    112e:	a8 e3       	ldi	r26, 0x38	; 56
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e8 e3       	ldi	r30, 0x38	; 56
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_VidSetPinValue+0x1a6>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_VidSetPinValue+0x1a2>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	27 c0       	rjmp	.+78     	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	  	    	break;

		    	  	   case DIO_PORTC:
		    	  	    	 SET_BIT(PORTC, Copy_U8pin);
    1156:	a5 e3       	ldi	r26, 0x35	; 53
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_VidSetPinValue+0x1ce>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_VidSetPinValue+0x1ca>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	  	    	 break;

		    	  	    case DIO_PORTD:
		    	  	    	 SET_BIT(PORTD, Copy_U8pin);
    117e:	a2 e3       	ldi	r26, 0x32	; 50
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_VidSetPinValue+0x1f6>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_VidSetPinValue+0x1f2>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24

		    	  	  }break;


		}
}
    11a4:	29 96       	adiw	r28, 0x09	; 9
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <DIO_VidPortDirection>:
/*Function to set port Direction*/
void DIO_VidPortDirection (u8 Copy_U8Port , u8  Copy_U8Direction)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <DIO_VidPortDirection+0x6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <DIO_VidPortDirection+0x8>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	6a 83       	std	Y+2, r22	; 0x02

     switch (Copy_U8Port)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3c 83       	std	Y+4, r19	; 0x04
    11ce:	2b 83       	std	Y+3, r18	; 0x03
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	d1 f0       	breq	.+52     	; 0x120e <DIO_VidPortDirection+0x58>
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	3c 81       	ldd	r19, Y+4	; 0x04
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_VidPortDirection+0x38>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <DIO_VidPortDirection+0x4e>
    11ec:	1e c0       	rjmp	.+60     	; 0x122a <DIO_VidPortDirection+0x74>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	81 f0       	breq	.+32     	; 0x1218 <DIO_VidPortDirection+0x62>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	81 f0       	breq	.+32     	; 0x1222 <DIO_VidPortDirection+0x6c>
    1202:	13 c0       	rjmp	.+38     	; 0x122a <DIO_VidPortDirection+0x74>
		   {
		      case DIO_PORTA :
		        	DDRA = Copy_U8Direction;
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
    120c:	0e c0       	rjmp	.+28     	; 0x122a <DIO_VidPortDirection+0x74>
		           	break;

	   	      case DIO_PORTB:
		    	  DDRB = Copy_U8Direction;
    120e:	e7 e3       	ldi	r30, 0x37	; 55
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	80 83       	st	Z, r24
    1216:	09 c0       	rjmp	.+18     	; 0x122a <DIO_VidPortDirection+0x74>
		    	  break;

		      case DIO_PORTC:
		    	   DDRC = Copy_U8Direction;
    1218:	e4 e3       	ldi	r30, 0x34	; 52
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	04 c0       	rjmp	.+8      	; 0x122a <DIO_VidPortDirection+0x74>
		    	    break;

		      case DIO_PORTD:
		    	   DDRD = Copy_U8Direction;
    1222:	e1 e3       	ldi	r30, 0x31	; 49
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
		    	    break;


		    	   }
		}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_VidPortValue>:


/*Function to set port value*/
void DIO_VidPortValue (u8 Copy_U8Port , u8  Copy_U8Value)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_VidPortValue+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_VidPortValue+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8Port)
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3c 83       	std	Y+4, r19	; 0x04
    1250:	2b 83       	std	Y+3, r18	; 0x03
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	d1 f0       	breq	.+52     	; 0x1290 <DIO_VidPortValue+0x58>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	2c f4       	brge	.+10     	; 0x1270 <DIO_VidPortValue+0x38>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	61 f0       	breq	.+24     	; 0x1286 <DIO_VidPortValue+0x4e>
    126e:	1e c0       	rjmp	.+60     	; 0x12ac <DIO_VidPortValue+0x74>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	81 f0       	breq	.+32     	; 0x129a <DIO_VidPortValue+0x62>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	81 f0       	breq	.+32     	; 0x12a4 <DIO_VidPortValue+0x6c>
    1284:	13 c0       	rjmp	.+38     	; 0x12ac <DIO_VidPortValue+0x74>
	{
	          case DIO_PORTA :
			    	PORTA = Copy_U8Value;
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <DIO_VidPortValue+0x74>
		 	        break;

		      case DIO_PORTB:
			    	PORTB = Copy_U8Value;
    1290:	e8 e3       	ldi	r30, 0x38	; 56
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <DIO_VidPortValue+0x74>
			    	 break;

			  case DIO_PORTC:
			       PORTC = Copy_U8Value;
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <DIO_VidPortValue+0x74>
			    	  break;

			  case DIO_PORTD:
			    	PORTD = Copy_U8Value;
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	80 83       	st	Z, r24
			    	   break;

	}

}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_VidTogglePinValue>:

/*Function to set port Direction*/
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8  Copy_U8Pin)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_VidTogglePinValue+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DIO_VidTogglePinValue+0x8>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8Port)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3c 83       	std	Y+4, r19	; 0x04
    12d2:	2b 83       	std	Y+3, r18	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	49 f1       	breq	.+82     	; 0x1330 <DIO_VidTogglePinValue+0x76>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <DIO_VidTogglePinValue+0x38>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	61 f0       	breq	.+24     	; 0x1308 <DIO_VidTogglePinValue+0x4e>
    12f0:	5a c0       	rjmp	.+180    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	71 f1       	breq	.+92     	; 0x1358 <DIO_VidTogglePinValue+0x9e>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	e9 f1       	breq	.+122    	; 0x1380 <DIO_VidTogglePinValue+0xc6>
    1306:	4f c0       	rjmp	.+158    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
	{
               	 case DIO_PORTA :
               		TOGGLE_BIT(PORTA,Copy_U8Pin);
    1308:	ab e3       	ldi	r26, 0x3B	; 59
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_VidTogglePinValue+0x6c>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_VidTogglePinValue+0x68>
    132a:	84 27       	eor	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	3b c0       	rjmp	.+118    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
					break;

			      case DIO_PORTB:
			    	  TOGGLE_BIT(PORTB,Copy_U8Pin);
    1330:	a8 e3       	ldi	r26, 0x38	; 56
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 e3       	ldi	r30, 0x38	; 56
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_VidTogglePinValue+0x94>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_VidTogglePinValue+0x90>
    1352:	84 27       	eor	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	27 c0       	rjmp	.+78     	; 0x13a6 <DIO_VidTogglePinValue+0xec>
				    	 break;

				  case DIO_PORTC:
					  TOGGLE_BIT(PORTC,Copy_U8Pin);
    1358:	a5 e3       	ldi	r26, 0x35	; 53
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e5 e3       	ldi	r30, 0x35	; 53
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_VidTogglePinValue+0xbc>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_VidTogglePinValue+0xb8>
    137a:	84 27       	eor	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <DIO_VidTogglePinValue+0xec>
				    	  break;

				  case DIO_PORTD:
					  TOGGLE_BIT(PORTD,Copy_U8Pin);
    1380:	a2 e3       	ldi	r26, 0x32	; 50
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e2 e3       	ldi	r30, 0x32	; 50
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_VidTogglePinValue+0xe4>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_VidTogglePinValue+0xe0>
    13a2:	84 27       	eor	r24, r20
    13a4:	8c 93       	st	X, r24
				    	   break;
	}

}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <DIO_U8GetPinValue>:

/*function to get state of input value*/
u8 DIO_U8GetPinValue(u8 Copy_U8Port,u8  Copy_U8Pin)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_U8GetPinValue+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DIO_U8GetPinValue+0x8>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 read;
	switch (Copy_U8Port)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	4c 81       	ldd	r20, Y+4	; 0x04
    13d2:	5d 81       	ldd	r21, Y+5	; 0x05
    13d4:	41 30       	cpi	r20, 0x01	; 1
    13d6:	51 05       	cpc	r21, r1
    13d8:	41 f1       	breq	.+80     	; 0x142a <DIO_U8GetPinValue+0x76>
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	91 05       	cpc	r25, r1
    13e2:	34 f4       	brge	.+12     	; 0x13f0 <DIO_U8GetPinValue+0x3c>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	21 15       	cp	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	61 f0       	breq	.+24     	; 0x1406 <DIO_U8GetPinValue+0x52>
    13ee:	52 c0       	rjmp	.+164    	; 0x1494 <DIO_U8GetPinValue+0xe0>
    13f0:	4c 81       	ldd	r20, Y+4	; 0x04
    13f2:	5d 81       	ldd	r21, Y+5	; 0x05
    13f4:	42 30       	cpi	r20, 0x02	; 2
    13f6:	51 05       	cpc	r21, r1
    13f8:	51 f1       	breq	.+84     	; 0x144e <DIO_U8GetPinValue+0x9a>
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	91 05       	cpc	r25, r1
    1402:	b9 f1       	breq	.+110    	; 0x1472 <DIO_U8GetPinValue+0xbe>
    1404:	47 c0       	rjmp	.+142    	; 0x1494 <DIO_U8GetPinValue+0xe0>
		{
	               	 case DIO_PINA :
	               		read= GET_BIT(PINA,Copy_U8Pin);
    1406:	e9 e3       	ldi	r30, 0x39	; 57
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_U8GetPinValue+0x6a>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_U8GetPinValue+0x66>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	35 c0       	rjmp	.+106    	; 0x1494 <DIO_U8GetPinValue+0xe0>
						break;

				      case DIO_PINB:
				    	  read= GET_BIT(PINB,Copy_U8Pin);
    142a:	e6 e3       	ldi	r30, 0x36	; 54
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_U8GetPinValue+0x8e>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_U8GetPinValue+0x8a>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	23 c0       	rjmp	.+70     	; 0x1494 <DIO_U8GetPinValue+0xe0>
					    	 break;

					  case DIO_PINC:
						  read=GET_BIT(PINC,Copy_U8Pin);
    144e:	e3 e3       	ldi	r30, 0x33	; 51
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_U8GetPinValue+0xb2>
    1462:	55 95       	asr	r21
    1464:	47 95       	ror	r20
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_U8GetPinValue+0xae>
    146a:	ca 01       	movw	r24, r20
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <DIO_U8GetPinValue+0xe0>
					    	  break;

					  case DIO_PIND:
						  read= GET_BIT(PIND,Copy_U8Pin);
    1472:	e0 e3       	ldi	r30, 0x30	; 48
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_U8GetPinValue+0xd6>
    1486:	55 95       	asr	r21
    1488:	47 95       	ror	r20
    148a:	8a 95       	dec	r24
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_U8GetPinValue+0xd2>
    148e:	ca 01       	movw	r24, r20
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
					    	   break;
		}
	return read;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <EEROM>:
#include "EEROM.h"



void EEROM(void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	c4 54       	subi	r28, 0x44	; 68
    14b0:	d0 40       	sbci	r29, 0x00	; 0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
	u16 ValidPassword=0;
    14bc:	fe 01       	movw	r30, r28
    14be:	ff 96       	adiw	r30, 0x3f	; 63
    14c0:	11 82       	std	Z+1, r1	; 0x01
    14c2:	10 82       	st	Z, r1
	u8 pass[4];
	if ( (EEPROM_Read_Byte(0X100)!=0x01) ){
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <EEPROM_Read_Byte>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <EEROM+0x2c>
    14d0:	2c c2       	rjmp	.+1112   	; 0x192a <EEROM+0x484>
		LCD_VidSetClEAR();
    14d2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
		LCD_VidSendString("Login for");
    14d6:	80 e6       	ldi	r24, 0x60	; 96
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
		LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidGoToLocation>
		LCD_VidSendString("first time");
    14e6:	8a e6       	ldi	r24, 0x6A	; 106
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	aa ef       	ldi	r26, 0xFA	; 250
    14f4:	b3 e4       	ldi	r27, 0x43	; 67
    14f6:	8d ab       	std	Y+53, r24	; 0x35
    14f8:	9e ab       	std	Y+54, r25	; 0x36
    14fa:	af ab       	std	Y+55, r26	; 0x37
    14fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1500:	7e a9       	ldd	r23, Y+54	; 0x36
    1502:	8f a9       	ldd	r24, Y+55	; 0x37
    1504:	98 ad       	ldd	r25, Y+56	; 0x38
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	4a ef       	ldi	r20, 0xFA	; 250
    150c:	54 e4       	ldi	r21, 0x44	; 68
    150e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	89 ab       	std	Y+49, r24	; 0x31
    1518:	9a ab       	std	Y+50, r25	; 0x32
    151a:	ab ab       	std	Y+51, r26	; 0x33
    151c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    151e:	69 a9       	ldd	r22, Y+49	; 0x31
    1520:	7a a9       	ldd	r23, Y+50	; 0x32
    1522:	8b a9       	ldd	r24, Y+51	; 0x33
    1524:	9c a9       	ldd	r25, Y+52	; 0x34
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e8       	ldi	r20, 0x80	; 128
    152c:	5f e3       	ldi	r21, 0x3F	; 63
    152e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1532:	88 23       	and	r24, r24
    1534:	2c f4       	brge	.+10     	; 0x1540 <EEROM+0x9a>
		__ticks = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	98 ab       	std	Y+48, r25	; 0x30
    153c:	8f a7       	std	Y+47, r24	; 0x2f
    153e:	3f c0       	rjmp	.+126    	; 0x15be <EEROM+0x118>
	else if (__tmp > 65535)
    1540:	69 a9       	ldd	r22, Y+49	; 0x31
    1542:	7a a9       	ldd	r23, Y+50	; 0x32
    1544:	8b a9       	ldd	r24, Y+51	; 0x33
    1546:	9c a9       	ldd	r25, Y+52	; 0x34
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	4f e7       	ldi	r20, 0x7F	; 127
    154e:	57 e4       	ldi	r21, 0x47	; 71
    1550:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1554:	18 16       	cp	r1, r24
    1556:	4c f5       	brge	.+82     	; 0x15aa <EEROM+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1558:	6d a9       	ldd	r22, Y+53	; 0x35
    155a:	7e a9       	ldd	r23, Y+54	; 0x36
    155c:	8f a9       	ldd	r24, Y+55	; 0x37
    155e:	98 ad       	ldd	r25, Y+56	; 0x38
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e2       	ldi	r20, 0x20	; 32
    1566:	51 e4       	ldi	r21, 0x41	; 65
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	98 ab       	std	Y+48, r25	; 0x30
    157e:	8f a7       	std	Y+47, r24	; 0x2f
    1580:	0f c0       	rjmp	.+30     	; 0x15a0 <EEROM+0xfa>
    1582:	88 ec       	ldi	r24, 0xC8	; 200
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9e a7       	std	Y+46, r25	; 0x2e
    1588:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    158a:	8d a5       	ldd	r24, Y+45	; 0x2d
    158c:	9e a5       	ldd	r25, Y+46	; 0x2e
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <EEROM+0xe8>
    1592:	9e a7       	std	Y+46, r25	; 0x2e
    1594:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1596:	8f a5       	ldd	r24, Y+47	; 0x2f
    1598:	98 a9       	ldd	r25, Y+48	; 0x30
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	98 ab       	std	Y+48, r25	; 0x30
    159e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a2:	98 a9       	ldd	r25, Y+48	; 0x30
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	69 f7       	brne	.-38     	; 0x1582 <EEROM+0xdc>
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <EEROM+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15aa:	69 a9       	ldd	r22, Y+49	; 0x31
    15ac:	7a a9       	ldd	r23, Y+50	; 0x32
    15ae:	8b a9       	ldd	r24, Y+51	; 0x33
    15b0:	9c a9       	ldd	r25, Y+52	; 0x34
    15b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	98 ab       	std	Y+48, r25	; 0x30
    15bc:	8f a7       	std	Y+47, r24	; 0x2f
    15be:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c0:	98 a9       	ldd	r25, Y+48	; 0x30
    15c2:	9c a7       	std	Y+44, r25	; 0x2c
    15c4:	8b a7       	std	Y+43, r24	; 0x2b
    15c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <EEROM+0x124>
    15ce:	9c a7       	std	Y+44, r25	; 0x2c
    15d0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);

		LCD_VidSetClEAR();
    15d2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
		LCD_VidSendString("Set Password");
    15d6:	85 e7       	ldi	r24, 0x75	; 117
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
		LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidGoToLocation>
		LCD_VidSendString(":");
    15e6:	82 e8       	ldi	r24, 0x82	; 130
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>


		u8	key;
			for(int i =0 ;i<4;i++)
    15ee:	1d ae       	std	Y+61, r1	; 0x3d
    15f0:	1c ae       	std	Y+60, r1	; 0x3c
    15f2:	a5 c0       	rjmp	.+330    	; 0x173e <EEROM+0x298>
			{
				key = KPD_u8GetPressedKey();
    15f4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <KPD_u8GetPressedKey>
    15f8:	8e af       	std	Y+62, r24	; 0x3e
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a0 e2       	ldi	r26, 0x20	; 32
    1600:	b1 e4       	ldi	r27, 0x41	; 65
    1602:	8f a3       	std	Y+39, r24	; 0x27
    1604:	98 a7       	std	Y+40, r25	; 0x28
    1606:	a9 a7       	std	Y+41, r26	; 0x29
    1608:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160a:	6f a1       	ldd	r22, Y+39	; 0x27
    160c:	78 a5       	ldd	r23, Y+40	; 0x28
    160e:	89 a5       	ldd	r24, Y+41	; 0x29
    1610:	9a a5       	ldd	r25, Y+42	; 0x2a
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	4a ef       	ldi	r20, 0xFA	; 250
    1618:	54 e4       	ldi	r21, 0x44	; 68
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	8b a3       	std	Y+35, r24	; 0x23
    1624:	9c a3       	std	Y+36, r25	; 0x24
    1626:	ad a3       	std	Y+37, r26	; 0x25
    1628:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    162a:	6b a1       	ldd	r22, Y+35	; 0x23
    162c:	7c a1       	ldd	r23, Y+36	; 0x24
    162e:	8d a1       	ldd	r24, Y+37	; 0x25
    1630:	9e a1       	ldd	r25, Y+38	; 0x26
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e8       	ldi	r20, 0x80	; 128
    1638:	5f e3       	ldi	r21, 0x3F	; 63
    163a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    163e:	88 23       	and	r24, r24
    1640:	2c f4       	brge	.+10     	; 0x164c <EEROM+0x1a6>
		__ticks = 1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	9a a3       	std	Y+34, r25	; 0x22
    1648:	89 a3       	std	Y+33, r24	; 0x21
    164a:	3f c0       	rjmp	.+126    	; 0x16ca <EEROM+0x224>
	else if (__tmp > 65535)
    164c:	6b a1       	ldd	r22, Y+35	; 0x23
    164e:	7c a1       	ldd	r23, Y+36	; 0x24
    1650:	8d a1       	ldd	r24, Y+37	; 0x25
    1652:	9e a1       	ldd	r25, Y+38	; 0x26
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	57 e4       	ldi	r21, 0x47	; 71
    165c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1660:	18 16       	cp	r1, r24
    1662:	4c f5       	brge	.+82     	; 0x16b6 <EEROM+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1664:	6f a1       	ldd	r22, Y+39	; 0x27
    1666:	78 a5       	ldd	r23, Y+40	; 0x28
    1668:	89 a5       	ldd	r24, Y+41	; 0x29
    166a:	9a a5       	ldd	r25, Y+42	; 0x2a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e2       	ldi	r20, 0x20	; 32
    1672:	51 e4       	ldi	r21, 0x41	; 65
    1674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9a a3       	std	Y+34, r25	; 0x22
    168a:	89 a3       	std	Y+33, r24	; 0x21
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <EEROM+0x206>
    168e:	88 ec       	ldi	r24, 0xC8	; 200
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	98 a3       	std	Y+32, r25	; 0x20
    1694:	8f 8f       	std	Y+31, r24	; 0x1f
    1696:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1698:	98 a1       	ldd	r25, Y+32	; 0x20
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <EEROM+0x1f4>
    169e:	98 a3       	std	Y+32, r25	; 0x20
    16a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a2:	89 a1       	ldd	r24, Y+33	; 0x21
    16a4:	9a a1       	ldd	r25, Y+34	; 0x22
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	9a a3       	std	Y+34, r25	; 0x22
    16aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ac:	89 a1       	ldd	r24, Y+33	; 0x21
    16ae:	9a a1       	ldd	r25, Y+34	; 0x22
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	69 f7       	brne	.-38     	; 0x168e <EEROM+0x1e8>
    16b4:	14 c0       	rjmp	.+40     	; 0x16de <EEROM+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b6:	6b a1       	ldd	r22, Y+35	; 0x23
    16b8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ba:	8d a1       	ldd	r24, Y+37	; 0x25
    16bc:	9e a1       	ldd	r25, Y+38	; 0x26
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9a a3       	std	Y+34, r25	; 0x22
    16c8:	89 a3       	std	Y+33, r24	; 0x21
    16ca:	89 a1       	ldd	r24, Y+33	; 0x21
    16cc:	9a a1       	ldd	r25, Y+34	; 0x22
    16ce:	9e 8f       	std	Y+30, r25	; 0x1e
    16d0:	8d 8f       	std	Y+29, r24	; 0x1d
    16d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <EEROM+0x230>
    16da:	9e 8f       	std	Y+30, r25	; 0x1e
    16dc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);

						LCD_vidSendChar(key);
    16de:	8e ad       	ldd	r24, Y+62	; 0x3e
    16e0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidSendChar>
						key = getnum(key);
    16e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    16e6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <getnum>
    16ea:	8e af       	std	Y+62, r24	; 0x3e
						EEPROM_Write_Byte(0X102+i,key);
    16ec:	8c ad       	ldd	r24, Y+60	; 0x3c
    16ee:	9d ad       	ldd	r25, Y+61	; 0x3d
    16f0:	8e 5f       	subi	r24, 0xFE	; 254
    16f2:	9e 4f       	sbci	r25, 0xFE	; 254
    16f4:	6e ad       	ldd	r22, Y+62	; 0x3e
    16f6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <EEPROM_Write_Byte>
						//pass[i]=key;
						ValidPassword=ValidPassword*10+key;
    16fa:	fe 01       	movw	r30, r28
    16fc:	ff 96       	adiw	r30, 0x3f	; 63
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	9c 01       	movw	r18, r24
    1704:	22 0f       	add	r18, r18
    1706:	33 1f       	adc	r19, r19
    1708:	c9 01       	movw	r24, r18
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	28 0f       	add	r18, r24
    1714:	39 1f       	adc	r19, r25
    1716:	8e ad       	ldd	r24, Y+62	; 0x3e
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	82 0f       	add	r24, r18
    171e:	93 1f       	adc	r25, r19
    1720:	fe 01       	movw	r30, r28
    1722:	ff 96       	adiw	r30, 0x3f	; 63
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
						 SetPassword(ValidPassword);
    1728:	fe 01       	movw	r30, r28
    172a:	ff 96       	adiw	r30, 0x3f	; 63
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	0e 94 f5 14 	call	0x29ea	; 0x29ea <SetPassword>
		LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
		LCD_VidSendString(":");


		u8	key;
			for(int i =0 ;i<4;i++)
    1734:	8c ad       	ldd	r24, Y+60	; 0x3c
    1736:	9d ad       	ldd	r25, Y+61	; 0x3d
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	9d af       	std	Y+61, r25	; 0x3d
    173c:	8c af       	std	Y+60, r24	; 0x3c
    173e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1740:	9d ad       	ldd	r25, Y+61	; 0x3d
    1742:	84 30       	cpi	r24, 0x04	; 4
    1744:	91 05       	cpc	r25, r1
    1746:	0c f4       	brge	.+2      	; 0x174a <EEROM+0x2a4>
    1748:	55 cf       	rjmp	.-342    	; 0x15f4 <EEROM+0x14e>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a8 e4       	ldi	r26, 0x48	; 72
    1750:	b2 e4       	ldi	r27, 0x42	; 66
    1752:	89 8f       	std	Y+25, r24	; 0x19
    1754:	9a 8f       	std	Y+26, r25	; 0x1a
    1756:	ab 8f       	std	Y+27, r26	; 0x1b
    1758:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175a:	69 8d       	ldd	r22, Y+25	; 0x19
    175c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	4a ef       	ldi	r20, 0xFA	; 250
    1768:	54 e4       	ldi	r21, 0x44	; 68
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8d 8b       	std	Y+21, r24	; 0x15
    1774:	9e 8b       	std	Y+22, r25	; 0x16
    1776:	af 8b       	std	Y+23, r26	; 0x17
    1778:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    177a:	6d 89       	ldd	r22, Y+21	; 0x15
    177c:	7e 89       	ldd	r23, Y+22	; 0x16
    177e:	8f 89       	ldd	r24, Y+23	; 0x17
    1780:	98 8d       	ldd	r25, Y+24	; 0x18
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    178e:	88 23       	and	r24, r24
    1790:	2c f4       	brge	.+10     	; 0x179c <EEROM+0x2f6>
		__ticks = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	8b 8b       	std	Y+19, r24	; 0x13
    179a:	3f c0       	rjmp	.+126    	; 0x181a <EEROM+0x374>
	else if (__tmp > 65535)
    179c:	6d 89       	ldd	r22, Y+21	; 0x15
    179e:	7e 89       	ldd	r23, Y+22	; 0x16
    17a0:	8f 89       	ldd	r24, Y+23	; 0x17
    17a2:	98 8d       	ldd	r25, Y+24	; 0x18
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	3f ef       	ldi	r19, 0xFF	; 255
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	57 e4       	ldi	r21, 0x47	; 71
    17ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	4c f5       	brge	.+82     	; 0x1806 <EEROM+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	69 8d       	ldd	r22, Y+25	; 0x19
    17b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e2       	ldi	r20, 0x20	; 32
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9c 8b       	std	Y+20, r25	; 0x14
    17da:	8b 8b       	std	Y+19, r24	; 0x13
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <EEROM+0x356>
    17de:	88 ec       	ldi	r24, 0xC8	; 200
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9a 8b       	std	Y+18, r25	; 0x12
    17e4:	89 8b       	std	Y+17, r24	; 0x11
    17e6:	89 89       	ldd	r24, Y+17	; 0x11
    17e8:	9a 89       	ldd	r25, Y+18	; 0x12
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <EEROM+0x344>
    17ee:	9a 8b       	std	Y+18, r25	; 0x12
    17f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	8b 89       	ldd	r24, Y+19	; 0x13
    17f4:	9c 89       	ldd	r25, Y+20	; 0x14
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9c 8b       	std	Y+20, r25	; 0x14
    17fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fc:	8b 89       	ldd	r24, Y+19	; 0x13
    17fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	69 f7       	brne	.-38     	; 0x17de <EEROM+0x338>
    1804:	14 c0       	rjmp	.+40     	; 0x182e <EEROM+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	6d 89       	ldd	r22, Y+21	; 0x15
    1808:	7e 89       	ldd	r23, Y+22	; 0x16
    180a:	8f 89       	ldd	r24, Y+23	; 0x17
    180c:	98 8d       	ldd	r25, Y+24	; 0x18
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9c 8b       	std	Y+20, r25	; 0x14
    1818:	8b 8b       	std	Y+19, r24	; 0x13
    181a:	8b 89       	ldd	r24, Y+19	; 0x13
    181c:	9c 89       	ldd	r25, Y+20	; 0x14
    181e:	98 8b       	std	Y+16, r25	; 0x10
    1820:	8f 87       	std	Y+15, r24	; 0x0f
    1822:	8f 85       	ldd	r24, Y+15	; 0x0f
    1824:	98 89       	ldd	r25, Y+16	; 0x10
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <EEROM+0x380>
    182a:	98 8b       	std	Y+16, r25	; 0x10
    182c:	8f 87       	std	Y+15, r24	; 0x0f
				}
			_delay_ms(50);

			//EEPROM_vWriteBlockToAddress(0X102,pass,4);//save the entire password as a block to the EEPROM
			//EEPROM_vWriteByteToAddress(0X100,0x01);//write the status of pass as it is set
			EEPROM_Write_Byte(0X100,0x01);//write the status of pass as it is set
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <EEPROM_Write_Byte>

			LCD_VidSetClEAR();
    1838:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
			LCD_VidSendString("Pass Saved");
    183c:	84 e8       	ldi	r24, 0x84	; 132
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a6 e9       	ldi	r26, 0x96	; 150
    184a:	b3 e4       	ldi	r27, 0x43	; 67
    184c:	8b 87       	std	Y+11, r24	; 0x0b
    184e:	9c 87       	std	Y+12, r25	; 0x0c
    1850:	ad 87       	std	Y+13, r26	; 0x0d
    1852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6b 85       	ldd	r22, Y+11	; 0x0b
    1856:	7c 85       	ldd	r23, Y+12	; 0x0c
    1858:	8d 85       	ldd	r24, Y+13	; 0x0d
    185a:	9e 85       	ldd	r25, Y+14	; 0x0e
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8f 83       	std	Y+7, r24	; 0x07
    186e:	98 87       	std	Y+8, r25	; 0x08
    1870:	a9 87       	std	Y+9, r26	; 0x09
    1872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <EEROM+0x3f0>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <EEROM+0x46e>
	else if (__tmp > 65535)
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <EEROM+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9e 83       	std	Y+6, r25	; 0x06
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <EEROM+0x450>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9c 83       	std	Y+4, r25	; 0x04
    18de:	8b 83       	std	Y+3, r24	; 0x03
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <EEROM+0x43e>
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	9e 81       	ldd	r25, Y+6	; 0x06
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <EEROM+0x432>
    18fe:	47 c0       	rjmp	.+142    	; 0x198e <EEROM+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <EEROM+0x47a>
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	32 c0       	rjmp	.+100    	; 0x198e <EEROM+0x4e8>
			_delay_ms(300);
	}else{
	 //ValidPassword= EEPROM_vReadBlockFromAddress(0X102,4);//read the stored pass from the EEPROM
		u8 key=0;
    192a:	1b ae       	std	Y+59, r1	; 0x3b
		for(int i =0 ;i<4;i++)
    192c:	1a ae       	std	Y+58, r1	; 0x3a
    192e:	19 ae       	std	Y+57, r1	; 0x39
    1930:	23 c0       	rjmp	.+70     	; 0x1978 <EEROM+0x4d2>
					{
					key=EEPROM_Read_Byte(0X102+i);
    1932:	89 ad       	ldd	r24, Y+57	; 0x39
    1934:	9a ad       	ldd	r25, Y+58	; 0x3a
    1936:	8e 5f       	subi	r24, 0xFE	; 254
    1938:	9e 4f       	sbci	r25, 0xFE	; 254
    193a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <EEPROM_Read_Byte>
    193e:	8b af       	std	Y+59, r24	; 0x3b
					//pass[i]=key;
					ValidPassword=ValidPassword*10+key;
    1940:	fe 01       	movw	r30, r28
    1942:	ff 96       	adiw	r30, 0x3f	; 63
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	9c 01       	movw	r18, r24
    194a:	22 0f       	add	r18, r18
    194c:	33 1f       	adc	r19, r19
    194e:	c9 01       	movw	r24, r18
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	28 0f       	add	r18, r24
    195a:	39 1f       	adc	r19, r25
    195c:	8b ad       	ldd	r24, Y+59	; 0x3b
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	82 0f       	add	r24, r18
    1964:	93 1f       	adc	r25, r19
    1966:	fe 01       	movw	r30, r28
    1968:	ff 96       	adiw	r30, 0x3f	; 63
    196a:	91 83       	std	Z+1, r25	; 0x01
    196c:	80 83       	st	Z, r24
			LCD_VidSendString("Pass Saved");
			_delay_ms(300);
	}else{
	 //ValidPassword= EEPROM_vReadBlockFromAddress(0X102,4);//read the stored pass from the EEPROM
		u8 key=0;
		for(int i =0 ;i<4;i++)
    196e:	89 ad       	ldd	r24, Y+57	; 0x39
    1970:	9a ad       	ldd	r25, Y+58	; 0x3a
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	9a af       	std	Y+58, r25	; 0x3a
    1976:	89 af       	std	Y+57, r24	; 0x39
    1978:	89 ad       	ldd	r24, Y+57	; 0x39
    197a:	9a ad       	ldd	r25, Y+58	; 0x3a
    197c:	84 30       	cpi	r24, 0x04	; 4
    197e:	91 05       	cpc	r25, r1
    1980:	c4 f2       	brlt	.-80     	; 0x1932 <EEROM+0x48c>
					//pass[i]=key;
					ValidPassword=ValidPassword*10+key;

						}

		SetPassword(ValidPassword);
    1982:	fe 01       	movw	r30, r28
    1984:	ff 96       	adiw	r30, 0x3f	; 63
    1986:	80 81       	ld	r24, Z
    1988:	91 81       	ldd	r25, Z+1	; 0x01
    198a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <SetPassword>
	}
}
    198e:	cc 5b       	subi	r28, 0xBC	; 188
    1990:	df 4f       	sbci	r29, 0xFF	; 255
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <EEPROM_Read_Byte>:

///

u8 EEPROM_Read_Byte( u16 Address)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <EEPROM_Read_Byte+0x6>
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01

	while(EECR & (1<<EEWE));
    19b0:	ec e3       	ldi	r30, 0x3C	; 60
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	82 70       	andi	r24, 0x02	; 2
    19bc:	90 70       	andi	r25, 0x00	; 0
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	b9 f7       	brne	.-18     	; 0x19b0 <EEPROM_Read_Byte+0xe>


	EEAR = Address;
    19c2:	ee e3       	ldi	r30, 0x3E	; 62
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24

	EECR |= (1<<EERE);
    19ce:	ac e3       	ldi	r26, 0x3C	; 60
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ec e3       	ldi	r30, 0x3C	; 60
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	81 60       	ori	r24, 0x01	; 1
    19da:	8c 93       	st	X, r24


	return EEDR;
    19dc:	ed e3       	ldi	r30, 0x3D	; 61
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z

}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <EEPROM_Write_Byte>:

////


void EEPROM_Write_Byte( u16 Address, u8 Value)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <EEPROM_Write_Byte+0x6>
    19f2:	0f 92       	push	r0
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write process*/
	while ( EECR & (1<<EEWE));
    19fe:	ec e3       	ldi	r30, 0x3C	; 60
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	82 70       	andi	r24, 0x02	; 2
    1a0a:	90 70       	andi	r25, 0x00	; 0
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	b9 f7       	brne	.-18     	; 0x19fe <EEPROM_Write_Byte+0x12>
	/* Set up address register */
	EEAR = Address;
    1a10:	ee e3       	ldi	r30, 0x3E	; 62
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
	EECR |= (1<<EERE);
    1a1c:	ac e3       	ldi	r26, 0x3C	; 60
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	ec e3       	ldi	r30, 0x3C	; 60
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	81 60       	ori	r24, 0x01	; 1
    1a28:	8c 93       	st	X, r24
	/* Write logical one to EEMWE */
	if(EEDR!=Value){
    1a2a:	ed e3       	ldi	r30, 0x3D	; 61
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	90 81       	ld	r25, Z
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	98 17       	cp	r25, r24
    1a34:	79 f0       	breq	.+30     	; 0x1a54 <EEPROM_Write_Byte+0x68>
			EEDR = Value;
    1a36:	ed e3       	ldi	r30, 0x3D	; 61
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	80 83       	st	Z, r24
			EECR |= (1<<EEMWE);
    1a3e:	ac e3       	ldi	r26, 0x3C	; 60
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ec e3       	ldi	r30, 0x3C	; 60
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	84 60       	ori	r24, 0x04	; 4
    1a4a:	8c 93       	st	X, r24
			EECR=0x03;}			/* Start eeprom write by setting EEWE */
    1a4c:	ec e3       	ldi	r30, 0x3C	; 60
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	80 83       	st	Z, r24


}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <KPAD_VidInint>:
const u8 arr[KPAD_RowNum][KPAD_ColNum]= {{'1','2','3'},
			                             {'4','5','6'},
			                             {'7','8','9'},
								         {'*','0','#'}};
void KPAD_VidInint()
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
	DIO_VidPortDirection(KPAD_PORT, KPAD_ROWS_COL_PINS );
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	6f e0       	ldi	r22, 0x0F	; 15
    1a6c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_VidPortDirection>
	//DDRx = 0b11110000 , (most bits are columns) , (least bits are Rows)
	DIO_VidPortValue(KPAD_PORT,KPAD_ROWS_COL_INIT);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	6f ef       	ldi	r22, 0xFF	; 255
    1a74:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidPortValue>
	//port = 0b11111111, most bits (o/p high), least bits (pull up)
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	62 97       	sbiw	r28, 0x12	; 18
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61


	u8 Local_U8ColCounter ;
    u8 Local_U8RowCounter ;
	u8 Local_U8Pressed ;
	u8 Local_u8ReturnValue = 20 ;
    1a92:	84 e1       	ldi	r24, 0x14	; 20
    1a94:	8f 87       	std	Y+15, r24	; 0x0f
	while(1){
	for (Local_U8ColCounter =0 ; Local_U8ColCounter<KPAD_ColNum ; Local_U8ColCounter++)
    1a96:	1a 8a       	std	Y+18, r1	; 0x12
    1a98:	c1 c0       	rjmp	.+386    	; 0x1c1c <KPD_u8GetPressedKey+0x19e>
	{
		 DIO_VidSetPinValue(KPAD_PORT,Local_U8ColCounter, DIO_LOW);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	6a 89       	ldd	r22, Y+18	; 0x12
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

		    for(Local_U8RowCounter=0; Local_U8RowCounter < KPAD_RowNum; Local_U8RowCounter++ )
    1aa4:	19 8a       	std	Y+17, r1	; 0x11
    1aa6:	ae c0       	rjmp	.+348    	; 0x1c04 <KPD_u8GetPressedKey+0x186>
		    {//loop for rows
		    	Local_U8Pressed= DIO_U8GetPinValue(KPAD_PORT,Local_U8RowCounter+4);
    1aa8:	89 89       	ldd	r24, Y+17	; 0x11
    1aaa:	98 2f       	mov	r25, r24
    1aac:	9c 5f       	subi	r25, 0xFC	; 252
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	69 2f       	mov	r22, r25
    1ab2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_U8GetPinValue>
    1ab6:	88 8b       	std	Y+16, r24	; 0x10

		        /* CHECK IF SWITCH IS PRESSED */
		      if( Local_U8Pressed == DIO_LOW)
    1ab8:	88 89       	ldd	r24, Y+16	; 0x10
    1aba:	88 23       	and	r24, r24
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <KPD_u8GetPressedKey+0x42>
    1abe:	9f c0       	rjmp	.+318    	; 0x1bfe <KPD_u8GetPressedKey+0x180>
		      {
		    	  Local_u8ReturnValue = arr[Local_U8RowCounter][Local_U8ColCounter];
    1ac0:	89 89       	ldd	r24, Y+17	; 0x11
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac8:	48 2f       	mov	r20, r24
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	c9 01       	movw	r24, r18
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	82 0f       	add	r24, r18
    1ad4:	93 1f       	adc	r25, r19
    1ad6:	84 0f       	add	r24, r20
    1ad8:	95 1f       	adc	r25, r21
    1ada:	fc 01       	movw	r30, r24
    1adc:	e8 57       	subi	r30, 0x78	; 120
    1ade:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
    1ae4:	08 c0       	rjmp	.+16     	; 0x1af6 <KPD_u8GetPressedKey+0x78>
		          /* Polling ( wait till button is released ) */
		        while(Local_U8Pressed == DIO_LOW  )
		        {
			    	Local_U8Pressed= DIO_U8GetPinValue(KPAD_PORT,Local_U8RowCounter+4);
    1ae6:	89 89       	ldd	r24, Y+17	; 0x11
    1ae8:	98 2f       	mov	r25, r24
    1aea:	9c 5f       	subi	r25, 0xFC	; 252
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	69 2f       	mov	r22, r25
    1af0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_U8GetPinValue>
    1af4:	88 8b       	std	Y+16, r24	; 0x10
		        /* CHECK IF SWITCH IS PRESSED */
		      if( Local_U8Pressed == DIO_LOW)
		      {
		    	  Local_u8ReturnValue = arr[Local_U8RowCounter][Local_U8ColCounter];
		          /* Polling ( wait till button is released ) */
		        while(Local_U8Pressed == DIO_LOW  )
    1af6:	88 89       	ldd	r24, Y+16	; 0x10
    1af8:	88 23       	and	r24, r24
    1afa:	a9 f3       	breq	.-22     	; 0x1ae6 <KPD_u8GetPressedKey+0x68>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e2       	ldi	r26, 0x20	; 32
    1b02:	b1 e4       	ldi	r27, 0x41	; 65
    1b04:	8b 87       	std	Y+11, r24	; 0x0b
    1b06:	9c 87       	std	Y+12, r25	; 0x0c
    1b08:	ad 87       	std	Y+13, r26	; 0x0d
    1b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a ef       	ldi	r20, 0xFA	; 250
    1b1a:	54 e4       	ldi	r21, 0x44	; 68
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8f 83       	std	Y+7, r24	; 0x07
    1b26:	98 87       	std	Y+8, r25	; 0x08
    1b28:	a9 87       	std	Y+9, r26	; 0x09
    1b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2e:	78 85       	ldd	r23, Y+8	; 0x08
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <KPD_u8GetPressedKey+0xd0>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <KPD_u8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    1b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b50:	78 85       	ldd	r23, Y+8	; 0x08
    1b52:	89 85       	ldd	r24, Y+9	; 0x09
    1b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	4c f5       	brge	.+82     	; 0x1bb8 <KPD_u8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <KPD_u8GetPressedKey+0x130>
    1b90:	88 ec       	ldi	r24, 0xC8	; 200
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9c 83       	std	Y+4, r25	; 0x04
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <KPD_u8GetPressedKey+0x11e>
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <KPD_u8GetPressedKey+0x112>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <KPD_u8GetPressedKey+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bba:	78 85       	ldd	r23, Y+8	; 0x08
    1bbc:	89 85       	ldd	r24, Y+9	; 0x09
    1bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <KPD_u8GetPressedKey+0x15a>
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
		        {
			    	Local_U8Pressed= DIO_U8GetPinValue(KPAD_PORT,Local_U8RowCounter+4);
		        }
		        _delay_ms(10);
		        DIO_VidSetPinValue(KPAD_PORT, Local_U8ColCounter, DIO_HIGH);
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	6a 89       	ldd	r22, Y+18	; 0x12
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
		        return Local_u8ReturnValue;
    1bea:	8f 85       	ldd	r24, Y+15	; 0x0f
		      /* DEACTIVATE CURRENT COLUMN */
		    DIO_VidSetPinValue(KPAD_PORT, Local_U8ColCounter, DIO_HIGH);
		  }
	}

}
    1bec:	62 96       	adiw	r28, 0x12	; 18
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret
	while(1){
	for (Local_U8ColCounter =0 ; Local_U8ColCounter<KPAD_ColNum ; Local_U8ColCounter++)
	{
		 DIO_VidSetPinValue(KPAD_PORT,Local_U8ColCounter, DIO_LOW);

		    for(Local_U8RowCounter=0; Local_U8RowCounter < KPAD_RowNum; Local_U8RowCounter++ )
    1bfe:	89 89       	ldd	r24, Y+17	; 0x11
    1c00:	8f 5f       	subi	r24, 0xFF	; 255
    1c02:	89 8b       	std	Y+17, r24	; 0x11
    1c04:	89 89       	ldd	r24, Y+17	; 0x11
    1c06:	84 30       	cpi	r24, 0x04	; 4
    1c08:	08 f4       	brcc	.+2      	; 0x1c0c <KPD_u8GetPressedKey+0x18e>
    1c0a:	4e cf       	rjmp	.-356    	; 0x1aa8 <KPD_u8GetPressedKey+0x2a>
		        return Local_u8ReturnValue;

		      }
		    }
		      /* DEACTIVATE CURRENT COLUMN */
		    DIO_VidSetPinValue(KPAD_PORT, Local_U8ColCounter, DIO_HIGH);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	6a 89       	ldd	r22, Y+18	; 0x12
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	u8 Local_U8ColCounter ;
    u8 Local_U8RowCounter ;
	u8 Local_U8Pressed ;
	u8 Local_u8ReturnValue = 20 ;
	while(1){
	for (Local_U8ColCounter =0 ; Local_U8ColCounter<KPAD_ColNum ; Local_U8ColCounter++)
    1c16:	8a 89       	ldd	r24, Y+18	; 0x12
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	8a 8b       	std	Y+18, r24	; 0x12
    1c1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c1e:	83 30       	cpi	r24, 0x03	; 3
    1c20:	08 f4       	brcc	.+2      	; 0x1c24 <KPD_u8GetPressedKey+0x1a6>
    1c22:	3b cf       	rjmp	.-394    	; 0x1a9a <KPD_u8GetPressedKey+0x1c>
    1c24:	38 cf       	rjmp	.-400    	; 0x1a96 <KPD_u8GetPressedKey+0x18>

00001c26 <LCD_VidInit>:
#include "LCD.h"


void LCD_VidInit(void)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	e8 97       	sbiw	r28, 0x38	; 56
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
	//set the directions
	DIO_VidSetPinDirection(LCD_RS_PORT, LCD_RS_pin, DIO_OUTPUT );
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	41 e0       	ldi	r20, 0x01	; 1
    1c40:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RW_PORT,LCD_R_W_Pin,DIO_OUTPUT);
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_ENABLE_PORT, LCD_Enable_pin, DIO_OUTPUT);
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	62 e0       	ldi	r22, 0x02	; 2
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidPortDirection(LCD_DATA_COMMAND_PORT,DIO_PORT_Setting);
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	6f ef       	ldi	r22, 0xFF	; 255
    1c5c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_VidPortDirection>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	ac e0       	ldi	r26, 0x0C	; 12
    1c66:	b2 e4       	ldi	r27, 0x42	; 66
    1c68:	8d ab       	std	Y+53, r24	; 0x35
    1c6a:	9e ab       	std	Y+54, r25	; 0x36
    1c6c:	af ab       	std	Y+55, r26	; 0x37
    1c6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c70:	6d a9       	ldd	r22, Y+53	; 0x35
    1c72:	7e a9       	ldd	r23, Y+54	; 0x36
    1c74:	8f a9       	ldd	r24, Y+55	; 0x37
    1c76:	98 ad       	ldd	r25, Y+56	; 0x38
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	4a ef       	ldi	r20, 0xFA	; 250
    1c7e:	54 e4       	ldi	r21, 0x44	; 68
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	89 ab       	std	Y+49, r24	; 0x31
    1c8a:	9a ab       	std	Y+50, r25	; 0x32
    1c8c:	ab ab       	std	Y+51, r26	; 0x33
    1c8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c90:	69 a9       	ldd	r22, Y+49	; 0x31
    1c92:	7a a9       	ldd	r23, Y+50	; 0x32
    1c94:	8b a9       	ldd	r24, Y+51	; 0x33
    1c96:	9c a9       	ldd	r25, Y+52	; 0x34
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ca0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca4:	88 23       	and	r24, r24
    1ca6:	2c f4       	brge	.+10     	; 0x1cb2 <LCD_VidInit+0x8c>
		__ticks = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	98 ab       	std	Y+48, r25	; 0x30
    1cae:	8f a7       	std	Y+47, r24	; 0x2f
    1cb0:	3f c0       	rjmp	.+126    	; 0x1d30 <LCD_VidInit+0x10a>
	else if (__tmp > 65535)
    1cb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	3f ef       	ldi	r19, 0xFF	; 255
    1cbe:	4f e7       	ldi	r20, 0x7F	; 127
    1cc0:	57 e4       	ldi	r21, 0x47	; 71
    1cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc6:	18 16       	cp	r1, r24
    1cc8:	4c f5       	brge	.+82     	; 0x1d1c <LCD_VidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cca:	6d a9       	ldd	r22, Y+53	; 0x35
    1ccc:	7e a9       	ldd	r23, Y+54	; 0x36
    1cce:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd0:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e2       	ldi	r20, 0x20	; 32
    1cd8:	51 e4       	ldi	r21, 0x41	; 65
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	98 ab       	std	Y+48, r25	; 0x30
    1cf0:	8f a7       	std	Y+47, r24	; 0x2f
    1cf2:	0f c0       	rjmp	.+30     	; 0x1d12 <LCD_VidInit+0xec>
    1cf4:	88 ec       	ldi	r24, 0xC8	; 200
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9e a7       	std	Y+46, r25	; 0x2e
    1cfa:	8d a7       	std	Y+45, r24	; 0x2d
    1cfc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cfe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <LCD_VidInit+0xda>
    1d04:	9e a7       	std	Y+46, r25	; 0x2e
    1d06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	98 ab       	std	Y+48, r25	; 0x30
    1d10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d14:	98 a9       	ldd	r25, Y+48	; 0x30
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	69 f7       	brne	.-38     	; 0x1cf4 <LCD_VidInit+0xce>
    1d1a:	14 c0       	rjmp	.+40     	; 0x1d44 <LCD_VidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d20:	8b a9       	ldd	r24, Y+51	; 0x33
    1d22:	9c a9       	ldd	r25, Y+52	; 0x34
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	98 ab       	std	Y+48, r25	; 0x30
    1d2e:	8f a7       	std	Y+47, r24	; 0x2f
    1d30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d32:	98 a9       	ldd	r25, Y+48	; 0x30
    1d34:	9c a7       	std	Y+44, r25	; 0x2c
    1d36:	8b a7       	std	Y+43, r24	; 0x2b
    1d38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LCD_VidInit+0x116>
    1d40:	9c a7       	std	Y+44, r25	; 0x2c
    1d42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(35);
	// function set command
	LCD_VidSendCommand(FUNCTION_SET);
    1d44:	88 e3       	ldi	r24, 0x38	; 56
    1d46:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_VidSendCommand>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 e2       	ldi	r26, 0x20	; 32
    1d50:	b1 e4       	ldi	r27, 0x41	; 65
    1d52:	8f a3       	std	Y+39, r24	; 0x27
    1d54:	98 a7       	std	Y+40, r25	; 0x28
    1d56:	a9 a7       	std	Y+41, r26	; 0x29
    1d58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a ef       	ldi	r20, 0xFA	; 250
    1d68:	54 e4       	ldi	r21, 0x44	; 68
    1d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8b a3       	std	Y+35, r24	; 0x23
    1d74:	9c a3       	std	Y+36, r25	; 0x24
    1d76:	ad a3       	std	Y+37, r26	; 0x25
    1d78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d80:	9e a1       	ldd	r25, Y+38	; 0x26
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <LCD_VidInit+0x176>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9a a3       	std	Y+34, r25	; 0x22
    1d98:	89 a3       	std	Y+33, r24	; 0x21
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    1d9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1da0:	8d a1       	ldd	r24, Y+37	; 0x25
    1da2:	9e a1       	ldd	r25, Y+38	; 0x26
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	6f a1       	ldd	r22, Y+39	; 0x27
    1db6:	78 a5       	ldd	r23, Y+40	; 0x28
    1db8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9a a3       	std	Y+34, r25	; 0x22
    1dda:	89 a3       	std	Y+33, r24	; 0x21
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_VidInit+0x1d6>
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	98 a3       	std	Y+32, r25	; 0x20
    1de4:	8f 8f       	std	Y+31, r24	; 0x1f
    1de6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de8:	98 a1       	ldd	r25, Y+32	; 0x20
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_VidInit+0x1c4>
    1dee:	98 a3       	std	Y+32, r25	; 0x20
    1df0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	89 a1       	ldd	r24, Y+33	; 0x21
    1df4:	9a a1       	ldd	r25, Y+34	; 0x22
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9a a3       	std	Y+34, r25	; 0x22
    1dfa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <LCD_VidInit+0x1b8>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6b a1       	ldd	r22, Y+35	; 0x23
    1e08:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9a a3       	std	Y+34, r25	; 0x22
    1e18:	89 a3       	std	Y+33, r24	; 0x21
    1e1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e20:	8d 8f       	std	Y+29, r24	; 0x1d
    1e22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_VidInit+0x200>
    1e2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e2c:	8d 8f       	std	Y+29, r24	; 0x1d
	// 0b0011NF00 while N>>line number(1) , F>>font size(0)
	_delay_ms(10);
	LCD_VidSendCommand(0b00001100);
    1e2e:	8c e0       	ldi	r24, 0x0C	; 12
    1e30:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_VidSendCommand>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a0 e2       	ldi	r26, 0x20	; 32
    1e3a:	b1 e4       	ldi	r27, 0x41	; 65
    1e3c:	89 8f       	std	Y+25, r24	; 0x19
    1e3e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e40:	ab 8f       	std	Y+27, r26	; 0x1b
    1e42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e44:	69 8d       	ldd	r22, Y+25	; 0x19
    1e46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4a ef       	ldi	r20, 0xFA	; 250
    1e52:	54 e4       	ldi	r21, 0x44	; 68
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	8d 8b       	std	Y+21, r24	; 0x15
    1e5e:	9e 8b       	std	Y+22, r25	; 0x16
    1e60:	af 8b       	std	Y+23, r26	; 0x17
    1e62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e64:	6d 89       	ldd	r22, Y+21	; 0x15
    1e66:	7e 89       	ldd	r23, Y+22	; 0x16
    1e68:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <LCD_VidInit+0x260>
		__ticks = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9c 8b       	std	Y+20, r25	; 0x14
    1e82:	8b 8b       	std	Y+19, r24	; 0x13
    1e84:	3f c0       	rjmp	.+126    	; 0x1f04 <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    1e86:	6d 89       	ldd	r22, Y+21	; 0x15
    1e88:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	3f ef       	ldi	r19, 0xFF	; 255
    1e92:	4f e7       	ldi	r20, 0x7F	; 127
    1e94:	57 e4       	ldi	r21, 0x47	; 71
    1e96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	4c f5       	brge	.+82     	; 0x1ef0 <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9c 8b       	std	Y+20, r25	; 0x14
    1ec4:	8b 8b       	std	Y+19, r24	; 0x13
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <LCD_VidInit+0x2c0>
    1ec8:	88 ec       	ldi	r24, 0xC8	; 200
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9a 8b       	std	Y+18, r25	; 0x12
    1ece:	89 8b       	std	Y+17, r24	; 0x11
    1ed0:	89 89       	ldd	r24, Y+17	; 0x11
    1ed2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_VidInit+0x2ae>
    1ed8:	9a 8b       	std	Y+18, r25	; 0x12
    1eda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1edc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ede:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9c 8b       	std	Y+20, r25	; 0x14
    1ee4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	69 f7       	brne	.-38     	; 0x1ec8 <LCD_VidInit+0x2a2>
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9c 8b       	std	Y+20, r25	; 0x14
    1f02:	8b 8b       	std	Y+19, r24	; 0x13
    1f04:	8b 89       	ldd	r24, Y+19	; 0x13
    1f06:	9c 89       	ldd	r25, Y+20	; 0x14
    1f08:	98 8b       	std	Y+16, r25	; 0x10
    1f0a:	8f 87       	std	Y+15, r24	; 0x0f
    1f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f0e:	98 89       	ldd	r25, Y+16	; 0x10
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_VidInit+0x2ea>
    1f14:	98 8b       	std	Y+16, r25	; 0x10
    1f16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_VidSendCommand(0x01);
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_VidSendCommand>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e2       	ldi	r26, 0x20	; 32
    1f24:	b1 e4       	ldi	r27, 0x41	; 65
    1f26:	8b 87       	std	Y+11, r24	; 0x0b
    1f28:	9c 87       	std	Y+12, r25	; 0x0c
    1f2a:	ad 87       	std	Y+13, r26	; 0x0d
    1f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a ef       	ldi	r20, 0xFA	; 250
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8f 83       	std	Y+7, r24	; 0x07
    1f48:	98 87       	std	Y+8, r25	; 0x08
    1f4a:	a9 87       	std	Y+9, r26	; 0x09
    1f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <LCD_VidInit+0x34a>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	4c f5       	brge	.+82     	; 0x1fda <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <LCD_VidInit+0x3aa>
    1fb2:	88 ec       	ldi	r24, 0xC8	; 200
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <LCD_VidInit+0x398>
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <LCD_VidInit+0x38c>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	6f 81       	ldd	r22, Y+7	; 0x07
    1fdc:	78 85       	ldd	r23, Y+8	; 0x08
    1fde:	89 85       	ldd	r24, Y+9	; 0x09
    1fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_VidInit+0x3d4>
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_VidSendCommand(0b00000110);
    2002:	86 e0       	ldi	r24, 0x06	; 6
    2004:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_VidSendCommand>



}
    2008:	e8 96       	adiw	r28, 0x38	; 56
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <LCD_VidSendCommand>:

void LCD_VidSendCommand (u8 command)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	69 97       	sbiw	r28, 0x19	; 25
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(DIO_PORTA,LCD_RS_pin,DIO_LOW);
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_PORTA,LCD_R_W_Pin,DIO_LOW);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidPortValue(LCD_DATA_COMMAND_PORT,command );
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	69 8d       	ldd	r22, Y+25	; 0x19
    2048:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidPortValue>
	DIO_VidSetPinValue(DIO_PORTA,LCD_Enable_pin, DIO_HIGH);
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	62 e0       	ldi	r22, 0x02	; 2
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a0 e8       	ldi	r26, 0x80	; 128
    205c:	bf e3       	ldi	r27, 0x3F	; 63
    205e:	8d 8b       	std	Y+21, r24	; 0x15
    2060:	9e 8b       	std	Y+22, r25	; 0x16
    2062:	af 8b       	std	Y+23, r26	; 0x17
    2064:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2066:	6d 89       	ldd	r22, Y+21	; 0x15
    2068:	7e 89       	ldd	r23, Y+22	; 0x16
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	2b ea       	ldi	r18, 0xAB	; 171
    2070:	3a ea       	ldi	r19, 0xAA	; 170
    2072:	4a e2       	ldi	r20, 0x2A	; 42
    2074:	50 e4       	ldi	r21, 0x40	; 64
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	89 8b       	std	Y+17, r24	; 0x11
    2080:	9a 8b       	std	Y+18, r25	; 0x12
    2082:	ab 8b       	std	Y+19, r26	; 0x13
    2084:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2086:	69 89       	ldd	r22, Y+17	; 0x11
    2088:	7a 89       	ldd	r23, Y+18	; 0x12
    208a:	8b 89       	ldd	r24, Y+19	; 0x13
    208c:	9c 89       	ldd	r25, Y+20	; 0x14
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e8       	ldi	r20, 0x80	; 128
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209a:	88 23       	and	r24, r24
    209c:	1c f4       	brge	.+6      	; 0x20a4 <LCD_VidSendCommand+0x8a>
		__ticks = 1;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	88 8b       	std	Y+16, r24	; 0x10
    20a2:	91 c0       	rjmp	.+290    	; 0x21c6 <LCD_VidSendCommand+0x1ac>
	else if (__tmp > 255)
    20a4:	69 89       	ldd	r22, Y+17	; 0x11
    20a6:	7a 89       	ldd	r23, Y+18	; 0x12
    20a8:	8b 89       	ldd	r24, Y+19	; 0x13
    20aa:	9c 89       	ldd	r25, Y+20	; 0x14
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	53 e4       	ldi	r21, 0x43	; 67
    20b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	0c f0       	brlt	.+2      	; 0x20be <LCD_VidSendCommand+0xa4>
    20bc:	7b c0       	rjmp	.+246    	; 0x21b4 <LCD_VidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    20be:	6d 89       	ldd	r22, Y+21	; 0x15
    20c0:	7e 89       	ldd	r23, Y+22	; 0x16
    20c2:	8f 89       	ldd	r24, Y+23	; 0x17
    20c4:	98 8d       	ldd	r25, Y+24	; 0x18
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a e7       	ldi	r20, 0x7A	; 122
    20cc:	54 e4       	ldi	r21, 0x44	; 68
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	8c 87       	std	Y+12, r24	; 0x0c
    20d8:	9d 87       	std	Y+13, r25	; 0x0d
    20da:	ae 87       	std	Y+14, r26	; 0x0e
    20dc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20de:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	4a ef       	ldi	r20, 0xFA	; 250
    20ec:	54 e4       	ldi	r21, 0x44	; 68
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	88 87       	std	Y+8, r24	; 0x08
    20f8:	99 87       	std	Y+9, r25	; 0x09
    20fa:	aa 87       	std	Y+10, r26	; 0x0a
    20fc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20fe:	68 85       	ldd	r22, Y+8	; 0x08
    2100:	79 85       	ldd	r23, Y+9	; 0x09
    2102:	8a 85       	ldd	r24, Y+10	; 0x0a
    2104:	9b 85       	ldd	r25, Y+11	; 0x0b
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	2c f4       	brge	.+10     	; 0x2120 <LCD_VidSendCommand+0x106>
		__ticks = 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9f 83       	std	Y+7, r25	; 0x07
    211c:	8e 83       	std	Y+6, r24	; 0x06
    211e:	3f c0       	rjmp	.+126    	; 0x219e <LCD_VidSendCommand+0x184>
	else if (__tmp > 65535)
    2120:	68 85       	ldd	r22, Y+8	; 0x08
    2122:	79 85       	ldd	r23, Y+9	; 0x09
    2124:	8a 85       	ldd	r24, Y+10	; 0x0a
    2126:	9b 85       	ldd	r25, Y+11	; 0x0b
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	3f ef       	ldi	r19, 0xFF	; 255
    212c:	4f e7       	ldi	r20, 0x7F	; 127
    212e:	57 e4       	ldi	r21, 0x47	; 71
    2130:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2134:	18 16       	cp	r1, r24
    2136:	4c f5       	brge	.+82     	; 0x218a <LCD_VidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2138:	6c 85       	ldd	r22, Y+12	; 0x0c
    213a:	7d 85       	ldd	r23, Y+13	; 0x0d
    213c:	8e 85       	ldd	r24, Y+14	; 0x0e
    213e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e2       	ldi	r20, 0x20	; 32
    2146:	51 e4       	ldi	r21, 0x41	; 65
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9f 83       	std	Y+7, r25	; 0x07
    215e:	8e 83       	std	Y+6, r24	; 0x06
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <LCD_VidSendCommand+0x166>
    2162:	88 ec       	ldi	r24, 0xC8	; 200
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9d 83       	std	Y+5, r25	; 0x05
    2168:	8c 83       	std	Y+4, r24	; 0x04
    216a:	8c 81       	ldd	r24, Y+4	; 0x04
    216c:	9d 81       	ldd	r25, Y+5	; 0x05
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_VidSendCommand+0x154>
    2172:	9d 83       	std	Y+5, r25	; 0x05
    2174:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2176:	8e 81       	ldd	r24, Y+6	; 0x06
    2178:	9f 81       	ldd	r25, Y+7	; 0x07
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	9f 83       	std	Y+7, r25	; 0x07
    217e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2180:	8e 81       	ldd	r24, Y+6	; 0x06
    2182:	9f 81       	ldd	r25, Y+7	; 0x07
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	69 f7       	brne	.-38     	; 0x2162 <LCD_VidSendCommand+0x148>
    2188:	24 c0       	rjmp	.+72     	; 0x21d2 <LCD_VidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218a:	68 85       	ldd	r22, Y+8	; 0x08
    218c:	79 85       	ldd	r23, Y+9	; 0x09
    218e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2190:	9b 85       	ldd	r25, Y+11	; 0x0b
    2192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9f 83       	std	Y+7, r25	; 0x07
    219c:	8e 83       	std	Y+6, r24	; 0x06
    219e:	8e 81       	ldd	r24, Y+6	; 0x06
    21a0:	9f 81       	ldd	r25, Y+7	; 0x07
    21a2:	9b 83       	std	Y+3, r25	; 0x03
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <LCD_VidSendCommand+0x190>
    21ae:	9b 83       	std	Y+3, r25	; 0x03
    21b0:	8a 83       	std	Y+2, r24	; 0x02
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <LCD_VidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21b4:	69 89       	ldd	r22, Y+17	; 0x11
    21b6:	7a 89       	ldd	r23, Y+18	; 0x12
    21b8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ba:	9c 89       	ldd	r25, Y+20	; 0x14
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	88 8b       	std	Y+16, r24	; 0x10
    21c6:	88 89       	ldd	r24, Y+16	; 0x10
    21c8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	8a 95       	dec	r24
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_VidSendCommand+0x1b2>
    21d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(DIO_PORTA,LCD_Enable_pin, DIO_LOW);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	62 e0       	ldi	r22, 0x02	; 2
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

}
    21dc:	69 96       	adiw	r28, 0x19	; 25
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <LCD_vidSendChar>:


void LCD_vidSendChar(u8 Data)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	69 97       	sbiw	r28, 0x19	; 25
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_pin,DIO_HIGH);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_R_W_Pin,DIO_LOW);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	61 e0       	ldi	r22, 0x01	; 1
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidPortValue(LCD_DATA_COMMAND_PORT,Data );
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	69 8d       	ldd	r22, Y+25	; 0x19
    221c:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidPortValue>
	DIO_VidSetPinValue(LCD_ENABLE_PORT,LCD_Enable_pin, DIO_HIGH);
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	62 e0       	ldi	r22, 0x02	; 2
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e8       	ldi	r26, 0x80	; 128
    2230:	bf e3       	ldi	r27, 0x3F	; 63
    2232:	8d 8b       	std	Y+21, r24	; 0x15
    2234:	9e 8b       	std	Y+22, r25	; 0x16
    2236:	af 8b       	std	Y+23, r26	; 0x17
    2238:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    223a:	6d 89       	ldd	r22, Y+21	; 0x15
    223c:	7e 89       	ldd	r23, Y+22	; 0x16
    223e:	8f 89       	ldd	r24, Y+23	; 0x17
    2240:	98 8d       	ldd	r25, Y+24	; 0x18
    2242:	2b ea       	ldi	r18, 0xAB	; 171
    2244:	3a ea       	ldi	r19, 0xAA	; 170
    2246:	4a e2       	ldi	r20, 0x2A	; 42
    2248:	50 e4       	ldi	r21, 0x40	; 64
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	89 8b       	std	Y+17, r24	; 0x11
    2254:	9a 8b       	std	Y+18, r25	; 0x12
    2256:	ab 8b       	std	Y+19, r26	; 0x13
    2258:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    225a:	69 89       	ldd	r22, Y+17	; 0x11
    225c:	7a 89       	ldd	r23, Y+18	; 0x12
    225e:	8b 89       	ldd	r24, Y+19	; 0x13
    2260:	9c 89       	ldd	r25, Y+20	; 0x14
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	1c f4       	brge	.+6      	; 0x2278 <LCD_vidSendChar+0x8a>
		__ticks = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	88 8b       	std	Y+16, r24	; 0x10
    2276:	91 c0       	rjmp	.+290    	; 0x239a <LCD_vidSendChar+0x1ac>
	else if (__tmp > 255)
    2278:	69 89       	ldd	r22, Y+17	; 0x11
    227a:	7a 89       	ldd	r23, Y+18	; 0x12
    227c:	8b 89       	ldd	r24, Y+19	; 0x13
    227e:	9c 89       	ldd	r25, Y+20	; 0x14
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	53 e4       	ldi	r21, 0x43	; 67
    2288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	0c f0       	brlt	.+2      	; 0x2292 <LCD_vidSendChar+0xa4>
    2290:	7b c0       	rjmp	.+246    	; 0x2388 <LCD_vidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2292:	6d 89       	ldd	r22, Y+21	; 0x15
    2294:	7e 89       	ldd	r23, Y+22	; 0x16
    2296:	8f 89       	ldd	r24, Y+23	; 0x17
    2298:	98 8d       	ldd	r25, Y+24	; 0x18
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a e7       	ldi	r20, 0x7A	; 122
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8c 87       	std	Y+12, r24	; 0x0c
    22ac:	9d 87       	std	Y+13, r25	; 0x0d
    22ae:	ae 87       	std	Y+14, r26	; 0x0e
    22b0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    22b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a ef       	ldi	r20, 0xFA	; 250
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	88 87       	std	Y+8, r24	; 0x08
    22cc:	99 87       	std	Y+9, r25	; 0x09
    22ce:	aa 87       	std	Y+10, r26	; 0x0a
    22d0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22d2:	68 85       	ldd	r22, Y+8	; 0x08
    22d4:	79 85       	ldd	r23, Y+9	; 0x09
    22d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <LCD_vidSendChar+0x106>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9f 83       	std	Y+7, r25	; 0x07
    22f0:	8e 83       	std	Y+6, r24	; 0x06
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <LCD_vidSendChar+0x184>
	else if (__tmp > 65535)
    22f4:	68 85       	ldd	r22, Y+8	; 0x08
    22f6:	79 85       	ldd	r23, Y+9	; 0x09
    22f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <LCD_vidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	6c 85       	ldd	r22, Y+12	; 0x0c
    230e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2310:	8e 85       	ldd	r24, Y+14	; 0x0e
    2312:	9f 85       	ldd	r25, Y+15	; 0x0f
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9f 83       	std	Y+7, r25	; 0x07
    2332:	8e 83       	std	Y+6, r24	; 0x06
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <LCD_vidSendChar+0x166>
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9d 83       	std	Y+5, r25	; 0x05
    233c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	9d 81       	ldd	r25, Y+5	; 0x05
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_vidSendChar+0x154>
    2346:	9d 83       	std	Y+5, r25	; 0x05
    2348:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8e 81       	ldd	r24, Y+6	; 0x06
    234c:	9f 81       	ldd	r25, Y+7	; 0x07
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9f 83       	std	Y+7, r25	; 0x07
    2352:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8e 81       	ldd	r24, Y+6	; 0x06
    2356:	9f 81       	ldd	r25, Y+7	; 0x07
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <LCD_vidSendChar+0x148>
    235c:	24 c0       	rjmp	.+72     	; 0x23a6 <LCD_vidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	68 85       	ldd	r22, Y+8	; 0x08
    2360:	79 85       	ldd	r23, Y+9	; 0x09
    2362:	8a 85       	ldd	r24, Y+10	; 0x0a
    2364:	9b 85       	ldd	r25, Y+11	; 0x0b
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9f 83       	std	Y+7, r25	; 0x07
    2370:	8e 83       	std	Y+6, r24	; 0x06
    2372:	8e 81       	ldd	r24, Y+6	; 0x06
    2374:	9f 81       	ldd	r25, Y+7	; 0x07
    2376:	9b 83       	std	Y+3, r25	; 0x03
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <LCD_vidSendChar+0x190>
    2382:	9b 83       	std	Y+3, r25	; 0x03
    2384:	8a 83       	std	Y+2, r24	; 0x02
    2386:	0f c0       	rjmp	.+30     	; 0x23a6 <LCD_vidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2388:	69 89       	ldd	r22, Y+17	; 0x11
    238a:	7a 89       	ldd	r23, Y+18	; 0x12
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	88 8b       	std	Y+16, r24	; 0x10
    239a:	88 89       	ldd	r24, Y+16	; 0x10
    239c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	8a 95       	dec	r24
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_vidSendChar+0x1b2>
    23a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_ENABLE_PORT,LCD_Enable_pin, DIO_LOW);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	62 e0       	ldi	r22, 0x02	; 2
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

}
    23b0:	69 96       	adiw	r28, 0x19	; 25
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <LCD_VidGoToLocation>:

/*Go to location*/
void LCD_VidGoToLocation (u8 Copy_U8RowNumber, u8 Copy_U8ColoumNumber)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	62 97       	sbiw	r28, 0x12	; 18
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	8f 87       	std	Y+15, r24	; 0x0f
    23d8:	68 8b       	std	Y+16, r22	; 0x10
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e0       	ldi	r26, 0x00	; 0
    23e0:	b0 e4       	ldi	r27, 0x40	; 64
    23e2:	8b 87       	std	Y+11, r24	; 0x0b
    23e4:	9c 87       	std	Y+12, r25	; 0x0c
    23e6:	ad 87       	std	Y+13, r26	; 0x0d
    23e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4a ef       	ldi	r20, 0xFA	; 250
    23f8:	54 e4       	ldi	r21, 0x44	; 68
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	8f 83       	std	Y+7, r24	; 0x07
    2404:	98 87       	std	Y+8, r25	; 0x08
    2406:	a9 87       	std	Y+9, r26	; 0x09
    2408:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	2c f4       	brge	.+10     	; 0x242c <LCD_VidGoToLocation+0x6a>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9e 83       	std	Y+6, r25	; 0x06
    2428:	8d 83       	std	Y+5, r24	; 0x05
    242a:	3f c0       	rjmp	.+126    	; 0x24aa <LCD_VidGoToLocation+0xe8>
	else if (__tmp > 65535)
    242c:	6f 81       	ldd	r22, Y+7	; 0x07
    242e:	78 85       	ldd	r23, Y+8	; 0x08
    2430:	89 85       	ldd	r24, Y+9	; 0x09
    2432:	9a 85       	ldd	r25, Y+10	; 0x0a
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	4c f5       	brge	.+82     	; 0x2496 <LCD_VidGoToLocation+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	6b 85       	ldd	r22, Y+11	; 0x0b
    2446:	7c 85       	ldd	r23, Y+12	; 0x0c
    2448:	8d 85       	ldd	r24, Y+13	; 0x0d
    244a:	9e 85       	ldd	r25, Y+14	; 0x0e
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	0f c0       	rjmp	.+30     	; 0x248c <LCD_VidGoToLocation+0xca>
    246e:	88 ec       	ldi	r24, 0xC8	; 200
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9c 83       	std	Y+4, r25	; 0x04
    2474:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	9c 81       	ldd	r25, Y+4	; 0x04
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <LCD_VidGoToLocation+0xb8>
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	9e 81       	ldd	r25, Y+6	; 0x06
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	69 f7       	brne	.-38     	; 0x246e <LCD_VidGoToLocation+0xac>
    2494:	14 c0       	rjmp	.+40     	; 0x24be <LCD_VidGoToLocation+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	6f 81       	ldd	r22, Y+7	; 0x07
    2498:	78 85       	ldd	r23, Y+8	; 0x08
    249a:	89 85       	ldd	r24, Y+9	; 0x09
    249c:	9a 85       	ldd	r25, Y+10	; 0x0a
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	9e 81       	ldd	r25, Y+6	; 0x06
    24ae:	9a 83       	std	Y+2, r25	; 0x02
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_VidGoToLocation+0xf4>
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	  switch(Copy_U8RowNumber)
    24be:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	3a 8b       	std	Y+18, r19	; 0x12
    24c6:	29 8b       	std	Y+17, r18	; 0x11
    24c8:	89 89       	ldd	r24, Y+17	; 0x11
    24ca:	9a 89       	ldd	r25, Y+18	; 0x12
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	91 05       	cpc	r25, r1
    24d0:	31 f0       	breq	.+12     	; 0x24de <LCD_VidGoToLocation+0x11c>
    24d2:	29 89       	ldd	r18, Y+17	; 0x11
    24d4:	3a 89       	ldd	r19, Y+18	; 0x12
    24d6:	22 30       	cpi	r18, 0x02	; 2
    24d8:	31 05       	cpc	r19, r1
    24da:	31 f0       	breq	.+12     	; 0x24e8 <LCD_VidGoToLocation+0x126>
    24dc:	09 c0       	rjmp	.+18     	; 0x24f0 <LCD_VidGoToLocation+0x12e>
	    {

	        case LCD_RowOne: LCD_VidSendCommand(LCD_RowOneStart+ Copy_U8ColoumNumber);
    24de:	88 89       	ldd	r24, Y+16	; 0x10
    24e0:	80 58       	subi	r24, 0x80	; 128
    24e2:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_VidSendCommand>
    24e6:	04 c0       	rjmp	.+8      	; 0x24f0 <LCD_VidGoToLocation+0x12e>
	                         break;
	        case LCD_RowTwo: LCD_VidSendCommand(LCD_RowTwoStart + Copy_U8ColoumNumber);
    24e8:	88 89       	ldd	r24, Y+16	; 0x10
    24ea:	80 54       	subi	r24, 0x40	; 64
    24ec:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_VidSendCommand>
	                         break;
	    }
}
    24f0:	62 96       	adiw	r28, 0x12	; 18
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <LCD_VidSendString>:

/*Send String*/
void LCD_VidSendString(u8 * Copy_Pu8String)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <LCD_VidSendString+0x6>
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	0a c0       	rjmp	.+20     	; 0x2526 <LCD_VidSendString+0x24>

  while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
  {
    LCD_vidSendChar(*Copy_Pu8String);
    2512:	e9 81       	ldd	r30, Y+1	; 0x01
    2514:	fa 81       	ldd	r31, Y+2	; 0x02
    2516:	80 81       	ld	r24, Z
    2518:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidSendChar>
    Copy_Pu8String++;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01

/*Send String*/
void LCD_VidSendString(u8 * Copy_Pu8String)
{

  while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
    2526:	e9 81       	ldd	r30, Y+1	; 0x01
    2528:	fa 81       	ldd	r31, Y+2	; 0x02
    252a:	80 81       	ld	r24, Z
    252c:	88 23       	and	r24, r24
    252e:	89 f7       	brne	.-30     	; 0x2512 <LCD_VidSendString+0x10>
  {
    LCD_vidSendChar(*Copy_Pu8String);
    Copy_Pu8String++;

  }
}
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <LCD_VidSendNum>:

///

/*Send Number*/
void LCD_VidSendNum(u32 Copy_U32Number)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	a4 97       	sbiw	r28, 0x24	; 36
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	69 a3       	std	Y+33, r22	; 0x21
    2550:	7a a3       	std	Y+34, r23	; 0x22
    2552:	8b a3       	std	Y+35, r24	; 0x23
    2554:	9c a3       	std	Y+36, r25	; 0x24
  u8 nums[32];
  itoa(Copy_U32Number, nums , 10);  //convert integer data type to string data type ,10 (base-DEC)
    2556:	89 a1       	ldd	r24, Y+33	; 0x21
    2558:	9a a1       	ldd	r25, Y+34	; 0x22
    255a:	9e 01       	movw	r18, r28
    255c:	2f 5f       	subi	r18, 0xFF	; 255
    255e:	3f 4f       	sbci	r19, 0xFF	; 255
    2560:	b9 01       	movw	r22, r18
    2562:	4a e0       	ldi	r20, 0x0A	; 10
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	0e 94 4c 1c 	call	0x3898	; 0x3898 <itoa>
  LCD_VidSendString(nums);
    256a:	ce 01       	movw	r24, r28
    256c:	01 96       	adiw	r24, 0x01	; 1
    256e:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>

}
    2572:	a4 96       	adiw	r28, 0x24	; 36
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <LCD_VidSendNumber>:

void LCD_VidSendNumber( u32 Copy_U32Number )
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	2c 97       	sbiw	r28, 0x0c	; 12
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	69 87       	std	Y+9, r22	; 0x09
    259a:	7a 87       	std	Y+10, r23	; 0x0a
    259c:	8b 87       	std	Y+11, r24	; 0x0b
    259e:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32Counter=1 , Local_u32Digit=0;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a0 e0       	ldi	r26, 0x00	; 0
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	af 83       	std	Y+7, r26	; 0x07
    25ae:	b8 87       	std	Y+8, r27	; 0x08
    25b0:	19 82       	std	Y+1, r1	; 0x01
    25b2:	1a 82       	std	Y+2, r1	; 0x02
    25b4:	1b 82       	std	Y+3, r1	; 0x03
    25b6:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_U32Number == 0)
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    25be:	bc 85       	ldd	r27, Y+12	; 0x0c
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	a1 05       	cpc	r26, r1
    25c4:	b1 05       	cpc	r27, r1
    25c6:	b1 f4       	brne	.+44     	; 0x25f4 <LCD_VidSendNumber+0x70>
	{
		LCD_vidSendChar('0');
    25c8:	80 e3       	ldi	r24, 0x30	; 48
    25ca:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidSendChar>
    25ce:	7a c0       	rjmp	.+244    	; 0x26c4 <LCD_VidSendNumber+0x140>
	}
	else
	{
		while (Copy_U32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	af 81       	ldd	r26, Y+7	; 0x07
    25d6:	b8 85       	ldd	r27, Y+8	; 0x08
    25d8:	2a e0       	ldi	r18, 0x0A	; 10
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__mulsi3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	af 83       	std	Y+7, r26	; 0x07
    25f2:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_vidSendChar('0');
	}
	else
	{
		while (Copy_U32Number/Local_u32Counter != 0)
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    25fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    25fc:	2d 81       	ldd	r18, Y+5	; 0x05
    25fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2600:	4f 81       	ldd	r20, Y+7	; 0x07
    2602:	58 85       	ldd	r21, Y+8	; 0x08
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__udivmodsi4>
    260c:	da 01       	movw	r26, r20
    260e:	c9 01       	movw	r24, r18
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	a1 05       	cpc	r26, r1
    2614:	b1 05       	cpc	r27, r1
    2616:	e1 f6       	brne	.-72     	; 0x25d0 <LCD_VidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	af 81       	ldd	r26, Y+7	; 0x07
    261e:	b8 85       	ldd	r27, Y+8	; 0x08
    2620:	2a e0       	ldi	r18, 0x0A	; 10
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__udivmodsi4>
    2630:	da 01       	movw	r26, r20
    2632:	c9 01       	movw	r24, r18
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	af 83       	std	Y+7, r26	; 0x07
    263a:	b8 87       	std	Y+8, r27	; 0x08
    263c:	3a c0       	rjmp	.+116    	; 0x26b2 <LCD_VidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_U32Number/Local_u32Counter;
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	ab 85       	ldd	r26, Y+11	; 0x0b
    2644:	bc 85       	ldd	r27, Y+12	; 0x0c
    2646:	2d 81       	ldd	r18, Y+5	; 0x05
    2648:	3e 81       	ldd	r19, Y+6	; 0x06
    264a:	4f 81       	ldd	r20, Y+7	; 0x07
    264c:	58 85       	ldd	r21, Y+8	; 0x08
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__udivmodsi4>
    2656:	da 01       	movw	r26, r20
    2658:	c9 01       	movw	r24, r18
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	ab 83       	std	Y+3, r26	; 0x03
    2660:	bc 83       	std	Y+4, r27	; 0x04

			LCD_vidSendChar(Local_u32Digit + '0');
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	80 5d       	subi	r24, 0xD0	; 208
    2666:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidSendChar>

			Copy_U32Number = Copy_U32Number%Local_u32Counter;
    266a:	89 85       	ldd	r24, Y+9	; 0x09
    266c:	9a 85       	ldd	r25, Y+10	; 0x0a
    266e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2670:	bc 85       	ldd	r27, Y+12	; 0x0c
    2672:	2d 81       	ldd	r18, Y+5	; 0x05
    2674:	3e 81       	ldd	r19, Y+6	; 0x06
    2676:	4f 81       	ldd	r20, Y+7	; 0x07
    2678:	58 85       	ldd	r21, Y+8	; 0x08
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__udivmodsi4>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	89 87       	std	Y+9, r24	; 0x09
    2688:	9a 87       	std	Y+10, r25	; 0x0a
    268a:	ab 87       	std	Y+11, r26	; 0x0b
    268c:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	af 81       	ldd	r26, Y+7	; 0x07
    2694:	b8 85       	ldd	r27, Y+8	; 0x08
    2696:	2a e0       	ldi	r18, 0x0A	; 10
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__udivmodsi4>
    26a6:	da 01       	movw	r26, r20
    26a8:	c9 01       	movw	r24, r18
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	af 83       	std	Y+7, r26	; 0x07
    26b0:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	af 81       	ldd	r26, Y+7	; 0x07
    26b8:	b8 85       	ldd	r27, Y+8	; 0x08
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	a1 05       	cpc	r26, r1
    26be:	b1 05       	cpc	r27, r1
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <LCD_VidSendNumber+0x140>
    26c2:	bd cf       	rjmp	.-134    	; 0x263e <LCD_VidSendNumber+0xba>
			Copy_U32Number = Copy_U32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    26c4:	2c 96       	adiw	r28, 0x0c	; 12
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <LCD_VidSetClEAR>:



/*LCD clear*/
void LCD_VidSetClEAR()
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_CLEAR);
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_VidSendCommand>
	LCD_VidGoToLocation(LCD_RowOne,LCD_ColOne);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidGoToLocation>

}
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <Timer_VidTimer1Init>:
#include"Timers.h"

//servo motor

void Timer_VidTimer1Init(void){
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
	// select mode
	//fast PWM -->14
	CLR_BIT(TCCR1A,WGM10);
    26fa:	af e4       	ldi	r26, 0x4F	; 79
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	ef e4       	ldi	r30, 0x4F	; 79
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8e 7f       	andi	r24, 0xFE	; 254
    2706:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2708:	af e4       	ldi	r26, 0x4F	; 79
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ef e4       	ldi	r30, 0x4F	; 79
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	82 60       	ori	r24, 0x02	; 2
    2714:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    2716:	ae e4       	ldi	r26, 0x4E	; 78
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ee e4       	ldi	r30, 0x4E	; 78
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	88 60       	ori	r24, 0x08	; 8
    2722:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    2724:	ae e4       	ldi	r26, 0x4E	; 78
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ee e4       	ldi	r30, 0x4E	; 78
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	80 61       	ori	r24, 0x10	; 16
    2730:	8c 93       	st	X, r24
	//select OC1A PIN -->Fast PWM
	CLR_BIT(TCCR1A,COM1A0);
    2732:	af e4       	ldi	r26, 0x4F	; 79
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	ef e4       	ldi	r30, 0x4F	; 79
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	8f 7b       	andi	r24, 0xBF	; 191
    273e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    2740:	af e4       	ldi	r26, 0x4F	; 79
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	ef e4       	ldi	r30, 0x4F	; 79
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	80 68       	ori	r24, 0x80	; 128
    274c:	8c 93       	st	X, r24
	//setup value of ICR1

	ICR1=19999;
    274e:	e6 e4       	ldi	r30, 0x46	; 70
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	8f e1       	ldi	r24, 0x1F	; 31
    2754:	9e e4       	ldi	r25, 0x4E	; 78
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24

	//setup OCR1A--> for the angle of serve
	OCR1A=500;
    275a:	ea e4       	ldi	r30, 0x4A	; 74
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	84 ef       	ldi	r24, 0xF4	; 244
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	80 83       	st	Z, r24
	//presalar-->8
	CLR_BIT(TCCR1B,CS10);
    2766:	ae e4       	ldi	r26, 0x4E	; 78
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	ee e4       	ldi	r30, 0x4E	; 78
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	8e 7f       	andi	r24, 0xFE	; 254
    2772:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    2774:	ae e4       	ldi	r26, 0x4E	; 78
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	ee e4       	ldi	r30, 0x4E	; 78
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	82 60       	ori	r24, 0x02	; 2
    2780:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    2782:	ae e4       	ldi	r26, 0x4E	; 78
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	ee e4       	ldi	r30, 0x4E	; 78
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	8b 7f       	andi	r24, 0xFB	; 251
    278e:	8c 93       	st	X, r24
}
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <Timers_VidTimer0Init>:
////
void (*Timer0_PFun)(void);


void Timers_VidTimer0Init(void)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
	/*Select the MODE*/
	/*Normal Mode*/
	CLR_BIT( TCCR0 , WGM00 );
    279e:	a3 e5       	ldi	r26, 0x53	; 83
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e3 e5       	ldi	r30, 0x53	; 83
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	8f 7b       	andi	r24, 0xBF	; 191
    27aa:	8c 93       	st	X, r24
	CLR_BIT( TCCR0 , WGM01 );
    27ac:	a3 e5       	ldi	r26, 0x53	; 83
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e3 e5       	ldi	r30, 0x53	; 83
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	87 7f       	andi	r24, 0xF7	; 247
    27b8:	8c 93       	st	X, r24
//	CLR_BIT( TCCR0 , WGM00 );
//	SET_BIT( TCCR0 , WGM01 );

	/*Enable the Interrupt*/
	/*GIE*/
	SET_BIT( SREG , 7 );
    27ba:	af e5       	ldi	r26, 0x5F	; 95
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	ef e5       	ldi	r30, 0x5F	; 95
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	80 68       	ori	r24, 0x80	; 128
    27c6:	8c 93       	st	X, r24
	/*PIE -- > OVF */
	SET_BIT( TIMSK , TOIE0 );
    27c8:	a9 e5       	ldi	r26, 0x59	; 89
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e9 e5       	ldi	r30, 0x59	; 89
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	81 60       	ori	r24, 0x01	; 1
    27d4:	8c 93       	st	X, r24
	/*PIE -- > CTC */
//	SET_BIT( TIMSK , OCIE0 );

	/* setup the preload value*/
	TCNT0 = 113 ;
    27d6:	e2 e5       	ldi	r30, 0x52	; 82
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	81 e7       	ldi	r24, 0x71	; 113
    27dc:	80 83       	st	Z, r24
//	SET_BIT( TCCR0 , CS01 );
//	CLR_BIT( TCCR0 , CS02 );
	////
	/*Select Prescaler factor*/
		/*/8 */
		CLR_BIT( TCCR0 , CS00 );
    27de:	a3 e5       	ldi	r26, 0x53	; 83
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e3 e5       	ldi	r30, 0x53	; 83
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8e 7f       	andi	r24, 0xFE	; 254
    27ea:	8c 93       	st	X, r24
		SET_BIT( TCCR0 , CS01 );
    27ec:	a3 e5       	ldi	r26, 0x53	; 83
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e3 e5       	ldi	r30, 0x53	; 83
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	82 60       	ori	r24, 0x02	; 2
    27f8:	8c 93       	st	X, r24
		CLR_BIT( TCCR0 , CS02 );
    27fa:	a3 e5       	ldi	r26, 0x53	; 83
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e3 e5       	ldi	r30, 0x53	; 83
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	8b 7f       	andi	r24, 0xFB	; 251
    2806:	8c 93       	st	X, r24
}
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <Timers_VidTimer0SetCallBack>:

void Timers_VidTimer0SetCallBack( void (*Timer0_Ptr)(void) )
{
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	00 d0       	rcall	.+0      	; 0x2814 <Timers_VidTimer0SetCallBack+0x6>
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PFun = Timer0_Ptr ;
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	90 93 97 01 	sts	0x0197, r25
    2824:	80 93 96 01 	sts	0x0196, r24
}
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <__vector_11>:
//}



ISR(TIMER0_OVF_vect)
{
    2832:	1f 92       	push	r1
    2834:	0f 92       	push	r0
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	0f 92       	push	r0
    283a:	11 24       	eor	r1, r1
    283c:	2f 93       	push	r18
    283e:	3f 93       	push	r19
    2840:	4f 93       	push	r20
    2842:	5f 93       	push	r21
    2844:	6f 93       	push	r22
    2846:	7f 93       	push	r23
    2848:	8f 93       	push	r24
    284a:	9f 93       	push	r25
    284c:	af 93       	push	r26
    284e:	bf 93       	push	r27
    2850:	ef 93       	push	r30
    2852:	ff 93       	push	r31
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_U16CounterOVF = 0 ;
	Local_U16CounterOVF++ ;
    285c:	80 91 94 01 	lds	r24, 0x0194
    2860:	90 91 95 01 	lds	r25, 0x0195
    2864:	01 96       	adiw	r24, 0x01	; 1
    2866:	90 93 95 01 	sts	0x0195, r25
    286a:	80 93 94 01 	sts	0x0194, r24
	if( Local_U16CounterOVF == 3907 )
    286e:	80 91 94 01 	lds	r24, 0x0194
    2872:	90 91 95 01 	lds	r25, 0x0195
    2876:	2f e0       	ldi	r18, 0x0F	; 15
    2878:	83 34       	cpi	r24, 0x43	; 67
    287a:	92 07       	cpc	r25, r18
    287c:	69 f4       	brne	.+26     	; 0x2898 <__vector_11+0x66>
	{
		Local_U16CounterOVF = 0 ;
    287e:	10 92 95 01 	sts	0x0195, r1
    2882:	10 92 94 01 	sts	0x0194, r1
		TCNT0 = 192 ;
    2886:	e2 e5       	ldi	r30, 0x52	; 82
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 ec       	ldi	r24, 0xC0	; 192
    288c:	80 83       	st	Z, r24

		Timer0_PFun();
    288e:	e0 91 96 01 	lds	r30, 0x0196
    2892:	f0 91 97 01 	lds	r31, 0x0197
    2896:	09 95       	icall
	}

}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	ff 91       	pop	r31
    289e:	ef 91       	pop	r30
    28a0:	bf 91       	pop	r27
    28a2:	af 91       	pop	r26
    28a4:	9f 91       	pop	r25
    28a6:	8f 91       	pop	r24
    28a8:	7f 91       	pop	r23
    28aa:	6f 91       	pop	r22
    28ac:	5f 91       	pop	r21
    28ae:	4f 91       	pop	r20
    28b0:	3f 91       	pop	r19
    28b2:	2f 91       	pop	r18
    28b4:	0f 90       	pop	r0
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	0f 90       	pop	r0
    28ba:	1f 90       	pop	r1
    28bc:	18 95       	reti

000028be <USART>:
#include"USART.h"


void USART(void){
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN0 , DIO_INPUT );
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN1 , DIO_OUTPUT );
    28d0:	83 e0       	ldi	r24, 0x03	; 3
    28d2:	61 e0       	ldi	r22, 0x01	; 1
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>

		USART_VidInit();
    28da:	0e 94 72 14 	call	0x28e4	; 0x28e4 <USART_VidInit>

}
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <USART_VidInit>:
void USART_VidInit(void)
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <USART_VidInit+0x6>
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8UCSRCValue = 0b10000000 ;
    28f0:	80 e8       	ldi	r24, 0x80	; 128
    28f2:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U8BaudRateValue = 51 ;
    28f4:	83 e3       	ldi	r24, 0x33	; 51
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9a 83       	std	Y+2, r25	; 0x02
    28fa:	89 83       	std	Y+1, r24	; 0x01

	/* Setup Baud Rate To 9600 */
	UBRRL = (u8)Local_U8BaudRateValue ;
    28fc:	e9 e2       	ldi	r30, 0x29	; 41
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	80 83       	st	Z, r24
	UBRRH = (u8)(Local_U8BaudRateValue >> 8);
    2904:	e0 e4       	ldi	r30, 0x40	; 64
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	89 2f       	mov	r24, r25
    290e:	99 27       	eor	r25, r25
    2910:	80 83       	st	Z, r24

	/* Normal Speed */
	CLR_BIT( UCSRA , U2X );
    2912:	ab e2       	ldi	r26, 0x2B	; 43
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	eb e2       	ldi	r30, 0x2B	; 43
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	8d 7f       	andi	r24, 0xFD	; 253
    291e:	8c 93       	st	X, r24
	/* Disable MPM */
	CLR_BIT( UCSRA , MPCM );
    2920:	ab e2       	ldi	r26, 0x2B	; 43
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	eb e2       	ldi	r30, 0x2B	; 43
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	8e 7f       	andi	r24, 0xFE	; 254
    292c:	8c 93       	st	X, r24
	/* Rx , Tx Enable*/
	SET_BIT( UCSRB , RXEN );
    292e:	aa e2       	ldi	r26, 0x2A	; 42
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	ea e2       	ldi	r30, 0x2A	; 42
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	80 61       	ori	r24, 0x10	; 16
    293a:	8c 93       	st	X, r24
	SET_BIT( UCSRB , TXEN );
    293c:	aa e2       	ldi	r26, 0x2A	; 42
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	ea e2       	ldi	r30, 0x2A	; 42
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	88 60       	ori	r24, 0x08	; 8
    2948:	8c 93       	st	X, r24
	/* Select Char Size --> 8bits */
	CLR_BIT( UCSRB , UCSZ2 );
    294a:	aa e2       	ldi	r26, 0x2A	; 42
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	ea e2       	ldi	r30, 0x2A	; 42
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	8b 7f       	andi	r24, 0xFB	; 251
    2956:	8c 93       	st	X, r24
	SET_BIT( Local_U8UCSRCValue , UCSZ0 );
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	82 60       	ori	r24, 0x02	; 2
    295c:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT( Local_U8UCSRCValue , UCSZ1 );
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	84 60       	ori	r24, 0x04	; 4
    2962:	8b 83       	std	Y+3, r24	; 0x03
	/* Select Asynch Mode */
	CLR_BIT( Local_U8UCSRCValue , UMSEL );
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	8f 7b       	andi	r24, 0xBF	; 191
    2968:	8b 83       	std	Y+3, r24	; 0x03
	/* Parity --> Disabled */
	CLR_BIT( Local_U8UCSRCValue , UPM0 );
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	8f 7e       	andi	r24, 0xEF	; 239
    296e:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT( Local_U8UCSRCValue , UPM1 );
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	8f 7d       	andi	r24, 0xDF	; 223
    2974:	8b 83       	std	Y+3, r24	; 0x03
	/* Stop Bits --> 2 */
	SET_BIT( Local_U8UCSRCValue , USBS );
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	88 60       	ori	r24, 0x08	; 8
    297a:	8b 83       	std	Y+3, r24	; 0x03

	/* Update at the Reg*/
	UCSRC = Local_U8UCSRCValue ;
    297c:	e0 e4       	ldi	r30, 0x40	; 64
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	80 83       	st	Z, r24

}
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <USART_VidSendChar>:


void USART_VidSendChar( u8 Copy_U8Char )
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	0f 92       	push	r0
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	89 83       	std	Y+1, r24	; 0x01
	while( (GET_BIT( UCSRA ,  UDRE )) == 0 );
    299c:	eb e2       	ldi	r30, 0x2B	; 43
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	82 95       	swap	r24
    29a4:	86 95       	lsr	r24
    29a6:	87 70       	andi	r24, 0x07	; 7
    29a8:	88 2f       	mov	r24, r24
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	81 70       	andi	r24, 0x01	; 1
    29ae:	90 70       	andi	r25, 0x00	; 0
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	a1 f3       	breq	.-24     	; 0x299c <USART_VidSendChar+0xc>

	UDR = Copy_U8Char ;
    29b4:	ec e2       	ldi	r30, 0x2C	; 44
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	80 83       	st	Z, r24
}
    29bc:	0f 90       	pop	r0
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <USART_U8GetChar>:


u8 USART_U8GetChar( void )
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	0f 92       	push	r0
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Char ;
	while( (GET_BIT( UCSRA ,  RXC )) == 0 );
    29ce:	eb e2       	ldi	r30, 0x2B	; 43
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	88 23       	and	r24, r24
    29d6:	dc f7       	brge	.-10     	; 0x29ce <USART_U8GetChar+0xa>
	Local_U8Char = UDR ;
    29d8:	ec e2       	ldi	r30, 0x2C	; 44
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	89 83       	std	Y+1, r24	; 0x01
	return Local_U8Char ;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e2:	0f 90       	pop	r0
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <SetPassword>:
#include "login.h"

 u16 Password;
 void SetPassword(u16 ValidPassword){
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <SetPassword+0x6>
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
	 Password=ValidPassword;
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	90 93 99 01 	sts	0x0199, r25
    2a00:	80 93 98 01 	sts	0x0198, r24
	// Password=1111;

 }
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <RunBuzzer>:

 /////

 void RunBuzzer()
 {
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	6e 97       	sbiw	r28, 0x1e	; 30
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61

	 LCD_VidSetClEAR();
    2a22:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
	 LCD_VidSendString("wait..");
    2a26:	8f e8       	ldi	r24, 0x8F	; 143
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
 	for(int i=0;i<3;i++){
    2a2e:	1e 8e       	std	Y+30, r1	; 0x1e
    2a30:	1d 8e       	std	Y+29, r1	; 0x1d
    2a32:	f8 c0       	rjmp	.+496    	; 0x2c24 <RunBuzzer+0x216>
 	DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN7 , DIO_OUTPUT );
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	67 e0       	ldi	r22, 0x07	; 7
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
 	DIO_VidSetPinValue( DIO_PORTD , DIO_PIN7 , DIO_HIGH );
    2a3e:	83 e0       	ldi	r24, 0x03	; 3
    2a40:	67 e0       	ldi	r22, 0x07	; 7
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a8 ec       	ldi	r26, 0xC8	; 200
    2a4e:	b2 e4       	ldi	r27, 0x42	; 66
    2a50:	89 8f       	std	Y+25, r24	; 0x19
    2a52:	9a 8f       	std	Y+26, r25	; 0x1a
    2a54:	ab 8f       	std	Y+27, r26	; 0x1b
    2a56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a58:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	4a ef       	ldi	r20, 0xFA	; 250
    2a66:	54 e4       	ldi	r21, 0x44	; 68
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	8d 8b       	std	Y+21, r24	; 0x15
    2a72:	9e 8b       	std	Y+22, r25	; 0x16
    2a74:	af 8b       	std	Y+23, r26	; 0x17
    2a76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a78:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e8       	ldi	r20, 0x80	; 128
    2a86:	5f e3       	ldi	r21, 0x3F	; 63
    2a88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	2c f4       	brge	.+10     	; 0x2a9a <RunBuzzer+0x8c>
		__ticks = 1;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9c 8b       	std	Y+20, r25	; 0x14
    2a96:	8b 8b       	std	Y+19, r24	; 0x13
    2a98:	3f c0       	rjmp	.+126    	; 0x2b18 <RunBuzzer+0x10a>
	else if (__tmp > 65535)
    2a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	3f ef       	ldi	r19, 0xFF	; 255
    2aa6:	4f e7       	ldi	r20, 0x7F	; 127
    2aa8:	57 e4       	ldi	r21, 0x47	; 71
    2aaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aae:	18 16       	cp	r1, r24
    2ab0:	4c f5       	brge	.+82     	; 0x2b04 <RunBuzzer+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ab8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	51 e4       	ldi	r21, 0x41	; 65
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9c 8b       	std	Y+20, r25	; 0x14
    2ad8:	8b 8b       	std	Y+19, r24	; 0x13
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <RunBuzzer+0xec>
    2adc:	88 ec       	ldi	r24, 0xC8	; 200
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9a 8b       	std	Y+18, r25	; 0x12
    2ae2:	89 8b       	std	Y+17, r24	; 0x11
    2ae4:	89 89       	ldd	r24, Y+17	; 0x11
    2ae6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <RunBuzzer+0xda>
    2aec:	9a 8b       	std	Y+18, r25	; 0x12
    2aee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	8b 89       	ldd	r24, Y+19	; 0x13
    2af2:	9c 89       	ldd	r25, Y+20	; 0x14
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9c 8b       	std	Y+20, r25	; 0x14
    2af8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	8b 89       	ldd	r24, Y+19	; 0x13
    2afc:	9c 89       	ldd	r25, Y+20	; 0x14
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	69 f7       	brne	.-38     	; 0x2adc <RunBuzzer+0xce>
    2b02:	14 c0       	rjmp	.+40     	; 0x2b2c <RunBuzzer+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9c 8b       	std	Y+20, r25	; 0x14
    2b16:	8b 8b       	std	Y+19, r24	; 0x13
    2b18:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1c:	98 8b       	std	Y+16, r25	; 0x10
    2b1e:	8f 87       	std	Y+15, r24	; 0x0f
    2b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b22:	98 89       	ldd	r25, Y+16	; 0x10
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <RunBuzzer+0x116>
    2b28:	98 8b       	std	Y+16, r25	; 0x10
    2b2a:	8f 87       	std	Y+15, r24	; 0x0f

 		_delay_ms(100);

 		DIO_VidSetPinValue( DIO_PORTD , DIO_PIN7 , DIO_LOW );
    2b2c:	83 e0       	ldi	r24, 0x03	; 3
    2b2e:	67 e0       	ldi	r22, 0x07	; 7
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a0 e7       	ldi	r26, 0x70	; 112
    2b3c:	b2 e4       	ldi	r27, 0x42	; 66
    2b3e:	8b 87       	std	Y+11, r24	; 0x0b
    2b40:	9c 87       	std	Y+12, r25	; 0x0c
    2b42:	ad 87       	std	Y+13, r26	; 0x0d
    2b44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a ef       	ldi	r20, 0xFA	; 250
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	8f 83       	std	Y+7, r24	; 0x07
    2b60:	98 87       	std	Y+8, r25	; 0x08
    2b62:	a9 87       	std	Y+9, r26	; 0x09
    2b64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b66:	6f 81       	ldd	r22, Y+7	; 0x07
    2b68:	78 85       	ldd	r23, Y+8	; 0x08
    2b6a:	89 85       	ldd	r24, Y+9	; 0x09
    2b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <RunBuzzer+0x17a>
		__ticks = 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9e 83       	std	Y+6, r25	; 0x06
    2b84:	8d 83       	std	Y+5, r24	; 0x05
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <RunBuzzer+0x1f8>
	else if (__tmp > 65535)
    2b88:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8a:	78 85       	ldd	r23, Y+8	; 0x08
    2b8c:	89 85       	ldd	r24, Y+9	; 0x09
    2b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	4c f5       	brge	.+82     	; 0x2bf2 <RunBuzzer+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e2       	ldi	r20, 0x20	; 32
    2bae:	51 e4       	ldi	r21, 0x41	; 65
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <RunBuzzer+0x1da>
    2bca:	88 ec       	ldi	r24, 0xC8	; 200
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9c 83       	std	Y+4, r25	; 0x04
    2bd0:	8b 83       	std	Y+3, r24	; 0x03
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <RunBuzzer+0x1c8>
    2bda:	9c 83       	std	Y+4, r25	; 0x04
    2bdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bde:	8d 81       	ldd	r24, Y+5	; 0x05
    2be0:	9e 81       	ldd	r25, Y+6	; 0x06
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	69 f7       	brne	.-38     	; 0x2bca <RunBuzzer+0x1bc>
    2bf0:	14 c0       	rjmp	.+40     	; 0x2c1a <RunBuzzer+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf4:	78 85       	ldd	r23, Y+8	; 0x08
    2bf6:	89 85       	ldd	r24, Y+9	; 0x09
    2bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	8d 81       	ldd	r24, Y+5	; 0x05
    2c08:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0a:	9a 83       	std	Y+2, r25	; 0x02
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <RunBuzzer+0x204>
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
 void RunBuzzer()
 {

	 LCD_VidSetClEAR();
	 LCD_VidSendString("wait..");
 	for(int i=0;i<3;i++){
    2c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c1e:	01 96       	adiw	r24, 0x01	; 1
    2c20:	9e 8f       	std	Y+30, r25	; 0x1e
    2c22:	8d 8f       	std	Y+29, r24	; 0x1d
    2c24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c28:	83 30       	cpi	r24, 0x03	; 3
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	0c f4       	brge	.+2      	; 0x2c30 <RunBuzzer+0x222>
    2c2e:	02 cf       	rjmp	.-508    	; 0x2a34 <RunBuzzer+0x26>

 		DIO_VidSetPinValue( DIO_PORTD , DIO_PIN7 , DIO_LOW );
		_delay_ms(60);
 	}

 }
    2c30:	6e 96       	adiw	r28, 0x1e	; 30
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <getnum>:
 u8 getnum(u8 key)
 {
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <getnum+0x6>
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <getnum+0x8>
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	89 83       	std	Y+1, r24	; 0x01
 	switch (key)
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	3c 83       	std	Y+4, r19	; 0x04
    2c58:	2b 83       	std	Y+3, r18	; 0x03
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	84 33       	cpi	r24, 0x34	; 52
    2c60:	91 05       	cpc	r25, r1
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <getnum+0x24>
    2c64:	4b c0       	rjmp	.+150    	; 0x2cfc <getnum+0xba>
    2c66:	2b 81       	ldd	r18, Y+3	; 0x03
    2c68:	3c 81       	ldd	r19, Y+4	; 0x04
    2c6a:	25 33       	cpi	r18, 0x35	; 53
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	dc f4       	brge	.+54     	; 0x2ca6 <getnum+0x64>
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	81 33       	cpi	r24, 0x31	; 49
    2c76:	91 05       	cpc	r25, r1
    2c78:	c1 f1       	breq	.+112    	; 0x2cea <getnum+0xa8>
    2c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7e:	22 33       	cpi	r18, 0x32	; 50
    2c80:	31 05       	cpc	r19, r1
    2c82:	34 f4       	brge	.+12     	; 0x2c90 <getnum+0x4e>
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	9c 81       	ldd	r25, Y+4	; 0x04
    2c88:	80 33       	cpi	r24, 0x30	; 48
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	61 f1       	breq	.+88     	; 0x2ce6 <getnum+0xa4>
    2c8e:	48 c0       	rjmp	.+144    	; 0x2d20 <getnum+0xde>
    2c90:	2b 81       	ldd	r18, Y+3	; 0x03
    2c92:	3c 81       	ldd	r19, Y+4	; 0x04
    2c94:	22 33       	cpi	r18, 0x32	; 50
    2c96:	31 05       	cpc	r19, r1
    2c98:	59 f1       	breq	.+86     	; 0x2cf0 <getnum+0xae>
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9e:	83 33       	cpi	r24, 0x33	; 51
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	49 f1       	breq	.+82     	; 0x2cf6 <getnum+0xb4>
    2ca4:	3d c0       	rjmp	.+122    	; 0x2d20 <getnum+0xde>
    2ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    2caa:	27 33       	cpi	r18, 0x37	; 55
    2cac:	31 05       	cpc	r19, r1
    2cae:	79 f1       	breq	.+94     	; 0x2d0e <getnum+0xcc>
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb4:	88 33       	cpi	r24, 0x38	; 56
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	5c f4       	brge	.+22     	; 0x2cd0 <getnum+0x8e>
    2cba:	2b 81       	ldd	r18, Y+3	; 0x03
    2cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    2cbe:	25 33       	cpi	r18, 0x35	; 53
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	f9 f0       	breq	.+62     	; 0x2d02 <getnum+0xc0>
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	86 33       	cpi	r24, 0x36	; 54
    2cca:	91 05       	cpc	r25, r1
    2ccc:	e9 f0       	breq	.+58     	; 0x2d08 <getnum+0xc6>
    2cce:	28 c0       	rjmp	.+80     	; 0x2d20 <getnum+0xde>
    2cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd4:	28 33       	cpi	r18, 0x38	; 56
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	e9 f0       	breq	.+58     	; 0x2d14 <getnum+0xd2>
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	89 33       	cpi	r24, 0x39	; 57
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	d9 f0       	breq	.+54     	; 0x2d1a <getnum+0xd8>
    2ce4:	1d c0       	rjmp	.+58     	; 0x2d20 <getnum+0xde>
 	{
 	     case '0' : return 0;
    2ce6:	1a 82       	std	Y+2, r1	; 0x02
    2ce8:	1d c0       	rjmp	.+58     	; 0x2d24 <getnum+0xe2>
 	     case '1' : return 1;
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	1a c0       	rjmp	.+52     	; 0x2d24 <getnum+0xe2>
 	     case '2' : return 2;
    2cf0:	22 e0       	ldi	r18, 0x02	; 2
    2cf2:	2a 83       	std	Y+2, r18	; 0x02
    2cf4:	17 c0       	rjmp	.+46     	; 0x2d24 <getnum+0xe2>
 	     case '3' : return 3;
    2cf6:	33 e0       	ldi	r19, 0x03	; 3
    2cf8:	3a 83       	std	Y+2, r19	; 0x02
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <getnum+0xe2>
 	     case '4' : return 4;
    2cfc:	84 e0       	ldi	r24, 0x04	; 4
    2cfe:	8a 83       	std	Y+2, r24	; 0x02
    2d00:	11 c0       	rjmp	.+34     	; 0x2d24 <getnum+0xe2>
 	     case '5' : return 5;
    2d02:	95 e0       	ldi	r25, 0x05	; 5
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	0e c0       	rjmp	.+28     	; 0x2d24 <getnum+0xe2>
 	     case '6' : return 6;
    2d08:	26 e0       	ldi	r18, 0x06	; 6
    2d0a:	2a 83       	std	Y+2, r18	; 0x02
    2d0c:	0b c0       	rjmp	.+22     	; 0x2d24 <getnum+0xe2>
 	     case '7' : return 7;
    2d0e:	37 e0       	ldi	r19, 0x07	; 7
    2d10:	3a 83       	std	Y+2, r19	; 0x02
    2d12:	08 c0       	rjmp	.+16     	; 0x2d24 <getnum+0xe2>
 	     case '8' : return 8;
    2d14:	88 e0       	ldi	r24, 0x08	; 8
    2d16:	8a 83       	std	Y+2, r24	; 0x02
    2d18:	05 c0       	rjmp	.+10     	; 0x2d24 <getnum+0xe2>
 	     case '9' : return 9;
    2d1a:	99 e0       	ldi	r25, 0x09	; 9
    2d1c:	9a 83       	std	Y+2, r25	; 0x02
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <getnum+0xe2>
 	}
 	return 50;
    2d20:	22 e3       	ldi	r18, 0x32	; 50
    2d22:	2a 83       	std	Y+2, r18	; 0x02
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
 }
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <CheckUser>:


 /////


 u8 CheckUser(u32 VildPassword){
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	a1 97       	sbiw	r28, 0x21	; 33
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	6d 8f       	std	Y+29, r22	; 0x1d
    2d4a:	7e 8f       	std	Y+30, r23	; 0x1e
    2d4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d4e:	98 a3       	std	Y+32, r25	; 0x20
 	   if(Password==VildPassword)
    2d50:	80 91 98 01 	lds	r24, 0x0198
    2d54:	90 91 99 01 	lds	r25, 0x0199
    2d58:	9c 01       	movw	r18, r24
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d62:	af 8d       	ldd	r26, Y+31	; 0x1f
    2d64:	b8 a1       	ldd	r27, Y+32	; 0x20
    2d66:	28 17       	cp	r18, r24
    2d68:	39 07       	cpc	r19, r25
    2d6a:	4a 07       	cpc	r20, r26
    2d6c:	5b 07       	cpc	r21, r27
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <CheckUser+0x3e>
    2d70:	87 c0       	rjmp	.+270    	; 0x2e80 <CheckUser+0x14c>
 		{

		LCD_VidSetClEAR();
    2d72:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
		DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN5 , DIO_OUTPUT );
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	65 e0       	ldi	r22, 0x05	; 5
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	    Timer_VidTimer1Init();
    2d80:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Timer_VidTimer1Init>
		LCD_VidSendString(" welcome");
    2d84:	86 e9       	ldi	r24, 0x96	; 150
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
		DIO_VidSetPinValue( DIO_PORTA , DIO_PIN5 , DIO_HIGH );
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	65 e0       	ldi	r22, 0x05	; 5
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	a8 ec       	ldi	r26, 0xC8	; 200
    2d9c:	b2 e4       	ldi	r27, 0x42	; 66
    2d9e:	89 8f       	std	Y+25, r24	; 0x19
    2da0:	9a 8f       	std	Y+26, r25	; 0x1a
    2da2:	ab 8f       	std	Y+27, r26	; 0x1b
    2da4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	69 8d       	ldd	r22, Y+25	; 0x19
    2da8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a ef       	ldi	r20, 0xFA	; 250
    2db4:	54 e4       	ldi	r21, 0x44	; 68
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8d 8b       	std	Y+21, r24	; 0x15
    2dc0:	9e 8b       	std	Y+22, r25	; 0x16
    2dc2:	af 8b       	std	Y+23, r26	; 0x17
    2dc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dca:	8f 89       	ldd	r24, Y+23	; 0x17
    2dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <CheckUser+0xb4>
		__ticks = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9c 8b       	std	Y+20, r25	; 0x14
    2de4:	8b 8b       	std	Y+19, r24	; 0x13
    2de6:	3f c0       	rjmp	.+126    	; 0x2e66 <CheckUser+0x132>
	else if (__tmp > 65535)
    2de8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dea:	7e 89       	ldd	r23, Y+22	; 0x16
    2dec:	8f 89       	ldd	r24, Y+23	; 0x17
    2dee:	98 8d       	ldd	r25, Y+24	; 0x18
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	4c f5       	brge	.+82     	; 0x2e52 <CheckUser+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	69 8d       	ldd	r22, Y+25	; 0x19
    2e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9c 8b       	std	Y+20, r25	; 0x14
    2e26:	8b 8b       	std	Y+19, r24	; 0x13
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <CheckUser+0x114>
    2e2a:	88 ec       	ldi	r24, 0xC8	; 200
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	9a 8b       	std	Y+18, r25	; 0x12
    2e30:	89 8b       	std	Y+17, r24	; 0x11
    2e32:	89 89       	ldd	r24, Y+17	; 0x11
    2e34:	9a 89       	ldd	r25, Y+18	; 0x12
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <CheckUser+0x102>
    2e3a:	9a 8b       	std	Y+18, r25	; 0x12
    2e3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e40:	9c 89       	ldd	r25, Y+20	; 0x14
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9c 8b       	std	Y+20, r25	; 0x14
    2e46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <CheckUser+0xf6>
    2e50:	14 c0       	rjmp	.+40     	; 0x2e7a <CheckUser+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	6d 89       	ldd	r22, Y+21	; 0x15
    2e54:	7e 89       	ldd	r23, Y+22	; 0x16
    2e56:	8f 89       	ldd	r24, Y+23	; 0x17
    2e58:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9c 8b       	std	Y+20, r25	; 0x14
    2e64:	8b 8b       	std	Y+19, r24	; 0x13
    2e66:	8b 89       	ldd	r24, Y+19	; 0x13
    2e68:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6a:	98 8b       	std	Y+16, r25	; 0x10
    2e6c:	8f 87       	std	Y+15, r24	; 0x0f
    2e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e70:	98 89       	ldd	r25, Y+16	; 0x10
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <CheckUser+0x13e>
    2e76:	98 8b       	std	Y+16, r25	; 0x10
    2e78:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(100);
	    return 1;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	89 a3       	std	Y+33, r24	; 0x21
    2e7e:	79 c0       	rjmp	.+242    	; 0x2f72 <CheckUser+0x23e>

 		}
 	    else{
 			LCD_VidSetClEAR();
    2e80:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
 			LCD_VidSendString(" wrong pass");
    2e84:	8f e9       	ldi	r24, 0x9F	; 159
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	a0 e7       	ldi	r26, 0x70	; 112
    2e92:	b2 e4       	ldi	r27, 0x42	; 66
    2e94:	8b 87       	std	Y+11, r24	; 0x0b
    2e96:	9c 87       	std	Y+12, r25	; 0x0c
    2e98:	ad 87       	std	Y+13, r26	; 0x0d
    2e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	4a ef       	ldi	r20, 0xFA	; 250
    2eaa:	54 e4       	ldi	r21, 0x44	; 68
    2eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	8f 83       	std	Y+7, r24	; 0x07
    2eb6:	98 87       	std	Y+8, r25	; 0x08
    2eb8:	a9 87       	std	Y+9, r26	; 0x09
    2eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebe:	78 85       	ldd	r23, Y+8	; 0x08
    2ec0:	89 85       	ldd	r24, Y+9	; 0x09
    2ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	40 e8       	ldi	r20, 0x80	; 128
    2eca:	5f e3       	ldi	r21, 0x3F	; 63
    2ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed0:	88 23       	and	r24, r24
    2ed2:	2c f4       	brge	.+10     	; 0x2ede <CheckUser+0x1aa>
		__ticks = 1;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	9e 83       	std	Y+6, r25	; 0x06
    2eda:	8d 83       	std	Y+5, r24	; 0x05
    2edc:	3f c0       	rjmp	.+126    	; 0x2f5c <CheckUser+0x228>
	else if (__tmp > 65535)
    2ede:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee0:	78 85       	ldd	r23, Y+8	; 0x08
    2ee2:	89 85       	ldd	r24, Y+9	; 0x09
    2ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	3f ef       	ldi	r19, 0xFF	; 255
    2eea:	4f e7       	ldi	r20, 0x7F	; 127
    2eec:	57 e4       	ldi	r21, 0x47	; 71
    2eee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef2:	18 16       	cp	r1, r24
    2ef4:	4c f5       	brge	.+82     	; 0x2f48 <CheckUser+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	40 e2       	ldi	r20, 0x20	; 32
    2f04:	51 e4       	ldi	r21, 0x41	; 65
    2f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	bc 01       	movw	r22, r24
    2f10:	cd 01       	movw	r24, r26
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	9e 83       	std	Y+6, r25	; 0x06
    2f1c:	8d 83       	std	Y+5, r24	; 0x05
    2f1e:	0f c0       	rjmp	.+30     	; 0x2f3e <CheckUser+0x20a>
    2f20:	88 ec       	ldi	r24, 0xC8	; 200
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	9c 83       	std	Y+4, r25	; 0x04
    2f26:	8b 83       	std	Y+3, r24	; 0x03
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <CheckUser+0x1f8>
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	9e 81       	ldd	r25, Y+6	; 0x06
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	9e 83       	std	Y+6, r25	; 0x06
    2f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f40:	9e 81       	ldd	r25, Y+6	; 0x06
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	69 f7       	brne	.-38     	; 0x2f20 <CheckUser+0x1ec>
    2f46:	14 c0       	rjmp	.+40     	; 0x2f70 <CheckUser+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f48:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4a:	78 85       	ldd	r23, Y+8	; 0x08
    2f4c:	89 85       	ldd	r24, Y+9	; 0x09
    2f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	9e 83       	std	Y+6, r25	; 0x06
    2f5a:	8d 83       	std	Y+5, r24	; 0x05
    2f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f60:	9a 83       	std	Y+2, r25	; 0x02
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	9a 81       	ldd	r25, Y+2	; 0x02
    2f68:	01 97       	sbiw	r24, 0x01	; 1
    2f6a:	f1 f7       	brne	.-4      	; 0x2f68 <CheckUser+0x234>
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01
 			_delay_ms(60);
 			return 0;
    2f70:	19 a2       	std	Y+33, r1	; 0x21
    2f72:	89 a1       	ldd	r24, Y+33	; 0x21
 		}
 	}
    2f74:	a1 96       	adiw	r28, 0x21	; 33
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <Login>:


u8 Login(void){
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	6e 97       	sbiw	r28, 0x1e	; 30
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61

	u8 key;
	u8 flag=0;
    2f9a:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_VidInit();
    2f9c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_VidInit>


	LCD_VidSendString("Welcome to the");
    2fa0:	8b ea       	ldi	r24, 0xAB	; 171
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
	LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    2fa8:	82 e0       	ldi	r24, 0x02	; 2
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidGoToLocation>
	LCD_VidSendString("smart home");
    2fb0:	8a eb       	ldi	r24, 0xBA	; 186
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	a8 e4       	ldi	r26, 0x48	; 72
    2fbe:	b3 e4       	ldi	r27, 0x43	; 67
    2fc0:	89 8f       	std	Y+25, r24	; 0x19
    2fc2:	9a 8f       	std	Y+26, r25	; 0x1a
    2fc4:	ab 8f       	std	Y+27, r26	; 0x1b
    2fc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	4a ef       	ldi	r20, 0xFA	; 250
    2fd6:	54 e4       	ldi	r21, 0x44	; 68
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8d 8b       	std	Y+21, r24	; 0x15
    2fe2:	9e 8b       	std	Y+22, r25	; 0x16
    2fe4:	af 8b       	std	Y+23, r26	; 0x17
    2fe6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fea:	7e 89       	ldd	r23, Y+22	; 0x16
    2fec:	8f 89       	ldd	r24, Y+23	; 0x17
    2fee:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ffc:	88 23       	and	r24, r24
    2ffe:	2c f4       	brge	.+10     	; 0x300a <Login+0x84>
		__ticks = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	9c 8b       	std	Y+20, r25	; 0x14
    3006:	8b 8b       	std	Y+19, r24	; 0x13
    3008:	3f c0       	rjmp	.+126    	; 0x3088 <Login+0x102>
	else if (__tmp > 65535)
    300a:	6d 89       	ldd	r22, Y+21	; 0x15
    300c:	7e 89       	ldd	r23, Y+22	; 0x16
    300e:	8f 89       	ldd	r24, Y+23	; 0x17
    3010:	98 8d       	ldd	r25, Y+24	; 0x18
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	3f ef       	ldi	r19, 0xFF	; 255
    3016:	4f e7       	ldi	r20, 0x7F	; 127
    3018:	57 e4       	ldi	r21, 0x47	; 71
    301a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    301e:	18 16       	cp	r1, r24
    3020:	4c f5       	brge	.+82     	; 0x3074 <Login+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3022:	69 8d       	ldd	r22, Y+25	; 0x19
    3024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e2       	ldi	r20, 0x20	; 32
    3030:	51 e4       	ldi	r21, 0x41	; 65
    3032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9c 8b       	std	Y+20, r25	; 0x14
    3048:	8b 8b       	std	Y+19, r24	; 0x13
    304a:	0f c0       	rjmp	.+30     	; 0x306a <Login+0xe4>
    304c:	88 ec       	ldi	r24, 0xC8	; 200
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	9a 8b       	std	Y+18, r25	; 0x12
    3052:	89 8b       	std	Y+17, r24	; 0x11
    3054:	89 89       	ldd	r24, Y+17	; 0x11
    3056:	9a 89       	ldd	r25, Y+18	; 0x12
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <Login+0xd2>
    305c:	9a 8b       	std	Y+18, r25	; 0x12
    305e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3060:	8b 89       	ldd	r24, Y+19	; 0x13
    3062:	9c 89       	ldd	r25, Y+20	; 0x14
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	9c 8b       	std	Y+20, r25	; 0x14
    3068:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	8b 89       	ldd	r24, Y+19	; 0x13
    306c:	9c 89       	ldd	r25, Y+20	; 0x14
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	69 f7       	brne	.-38     	; 0x304c <Login+0xc6>
    3072:	14 c0       	rjmp	.+40     	; 0x309c <Login+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3074:	6d 89       	ldd	r22, Y+21	; 0x15
    3076:	7e 89       	ldd	r23, Y+22	; 0x16
    3078:	8f 89       	ldd	r24, Y+23	; 0x17
    307a:	98 8d       	ldd	r25, Y+24	; 0x18
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9c 8b       	std	Y+20, r25	; 0x14
    3086:	8b 8b       	std	Y+19, r24	; 0x13
    3088:	8b 89       	ldd	r24, Y+19	; 0x13
    308a:	9c 89       	ldd	r25, Y+20	; 0x14
    308c:	98 8b       	std	Y+16, r25	; 0x10
    308e:	8f 87       	std	Y+15, r24	; 0x0f
    3090:	8f 85       	ldd	r24, Y+15	; 0x0f
    3092:	98 89       	ldd	r25, Y+16	; 0x10
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <Login+0x10e>
    3098:	98 8b       	std	Y+16, r25	; 0x10
    309a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	KPAD_VidInint();
    309c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <KPAD_VidInint>

	EEROM();
    30a0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <EEROM>
	while(1)
		{
	LCD_VidSetClEAR();
    30a4:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
	LCD_VidSendString("Select mode :");
    30a8:	85 ec       	ldi	r24, 0xC5	; 197
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
	LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    30b0:	82 e0       	ldi	r24, 0x02	; 2
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidGoToLocation>
	LCD_VidSendString("0:Admin 1:Guest");
    30b8:	83 ed       	ldi	r24, 0xD3	; 211
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>


	key = KPD_u8GetPressedKey();
    30c0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <KPD_u8GetPressedKey>
    30c4:	8e 8f       	std	Y+30, r24	; 0x1e

	if (key=='0')
    30c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30c8:	80 33       	cpi	r24, 0x30	; 48
    30ca:	69 f4       	brne	.+26     	; 0x30e6 <Login+0x160>
	{
     flag=LoginAdmin();
    30cc:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <LoginAdmin>
    30d0:	8d 8f       	std	Y+29, r24	; 0x1d


	}

	}
	return flag;
    30d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    30d4:	6e 96       	adiw	r28, 0x1e	; 30
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	de bf       	out	0x3e, r29	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	cf 91       	pop	r28
    30e2:	df 91       	pop	r29
    30e4:	08 95       	ret

	if (key=='0')
	{
     flag=LoginAdmin();
		break;
	}else if(key=='1'){
    30e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30e8:	81 33       	cpi	r24, 0x31	; 49
    30ea:	69 f4       	brne	.+26     	; 0x3106 <Login+0x180>
    //run buzer
		DIO_VidSetPinValue( DIO_PORTA , DIO_PIN6 , DIO_HIGH );
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	66 e0       	ldi	r22, 0x06	; 6
    30f0:	41 e0       	ldi	r20, 0x01	; 1
    30f2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
		RunBuzzer();
    30f6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <RunBuzzer>
		DIO_VidSetPinValue( DIO_PORTA , DIO_PIN6 , DIO_LOW );
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	66 e0       	ldi	r22, 0x06	; 6
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    3104:	cf cf       	rjmp	.-98     	; 0x30a4 <Login+0x11e>

	}else{
		LCD_VidSetClEAR();
    3106:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
		LCD_VidSendString("wrong select !");
    310a:	83 ee       	ldi	r24, 0xE3	; 227
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	a8 ec       	ldi	r26, 0xC8	; 200
    3118:	b2 e4       	ldi	r27, 0x42	; 66
    311a:	8b 87       	std	Y+11, r24	; 0x0b
    311c:	9c 87       	std	Y+12, r25	; 0x0c
    311e:	ad 87       	std	Y+13, r26	; 0x0d
    3120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3122:	6b 85       	ldd	r22, Y+11	; 0x0b
    3124:	7c 85       	ldd	r23, Y+12	; 0x0c
    3126:	8d 85       	ldd	r24, Y+13	; 0x0d
    3128:	9e 85       	ldd	r25, Y+14	; 0x0e
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	4a ef       	ldi	r20, 0xFA	; 250
    3130:	54 e4       	ldi	r21, 0x44	; 68
    3132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	8f 83       	std	Y+7, r24	; 0x07
    313c:	98 87       	std	Y+8, r25	; 0x08
    313e:	a9 87       	std	Y+9, r26	; 0x09
    3140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3142:	6f 81       	ldd	r22, Y+7	; 0x07
    3144:	78 85       	ldd	r23, Y+8	; 0x08
    3146:	89 85       	ldd	r24, Y+9	; 0x09
    3148:	9a 85       	ldd	r25, Y+10	; 0x0a
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e8       	ldi	r20, 0x80	; 128
    3150:	5f e3       	ldi	r21, 0x3F	; 63
    3152:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3156:	88 23       	and	r24, r24
    3158:	2c f4       	brge	.+10     	; 0x3164 <Login+0x1de>
		__ticks = 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	3f c0       	rjmp	.+126    	; 0x31e2 <Login+0x25c>
	else if (__tmp > 65535)
    3164:	6f 81       	ldd	r22, Y+7	; 0x07
    3166:	78 85       	ldd	r23, Y+8	; 0x08
    3168:	89 85       	ldd	r24, Y+9	; 0x09
    316a:	9a 85       	ldd	r25, Y+10	; 0x0a
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	3f ef       	ldi	r19, 0xFF	; 255
    3170:	4f e7       	ldi	r20, 0x7F	; 127
    3172:	57 e4       	ldi	r21, 0x47	; 71
    3174:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3178:	18 16       	cp	r1, r24
    317a:	4c f5       	brge	.+82     	; 0x31ce <Login+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317c:	6b 85       	ldd	r22, Y+11	; 0x0b
    317e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3180:	8d 85       	ldd	r24, Y+13	; 0x0d
    3182:	9e 85       	ldd	r25, Y+14	; 0x0e
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e2       	ldi	r20, 0x20	; 32
    318a:	51 e4       	ldi	r21, 0x41	; 65
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	0f c0       	rjmp	.+30     	; 0x31c4 <Login+0x23e>
    31a6:	88 ec       	ldi	r24, 0xC8	; 200
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9c 83       	std	Y+4, r25	; 0x04
    31ac:	8b 83       	std	Y+3, r24	; 0x03
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	9c 81       	ldd	r25, Y+4	; 0x04
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <Login+0x22c>
    31b6:	9c 83       	std	Y+4, r25	; 0x04
    31b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ba:	8d 81       	ldd	r24, Y+5	; 0x05
    31bc:	9e 81       	ldd	r25, Y+6	; 0x06
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	9e 81       	ldd	r25, Y+6	; 0x06
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	69 f7       	brne	.-38     	; 0x31a6 <Login+0x220>
    31cc:	6b cf       	rjmp	.-298    	; 0x30a4 <Login+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ce:	6f 81       	ldd	r22, Y+7	; 0x07
    31d0:	78 85       	ldd	r23, Y+8	; 0x08
    31d2:	89 85       	ldd	r24, Y+9	; 0x09
    31d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	9e 83       	std	Y+6, r25	; 0x06
    31e0:	8d 83       	std	Y+5, r24	; 0x05
    31e2:	8d 81       	ldd	r24, Y+5	; 0x05
    31e4:	9e 81       	ldd	r25, Y+6	; 0x06
    31e6:	9a 83       	std	Y+2, r25	; 0x02
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <Login+0x268>
    31f2:	9a 83       	std	Y+2, r25	; 0x02
    31f4:	89 83       	std	Y+1, r24	; 0x01
    31f6:	56 cf       	rjmp	.-340    	; 0x30a4 <Login+0x11e>

000031f8 <LoginAdmin>:
	return flag;
}

 ////
u8 LoginAdmin (void)
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	65 97       	sbiw	r28, 0x15	; 21
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61

	u16 ValidPassword=0;
    320c:	1c 8a       	std	Y+20, r1	; 0x14
    320e:	1b 8a       	std	Y+19, r1	; 0x13
	u8 key;
	u8 x=0;
    3210:	19 8a       	std	Y+17, r1	; 0x11




	for ( x=0;x<3;x++)
    3212:	19 8a       	std	Y+17, r1	; 0x11
    3214:	b0 c0       	rjmp	.+352    	; 0x3376 <LoginAdmin+0x17e>
	{
		LCD_VidSetClEAR();
    3216:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
		LCD_VidSendString("Password:");
    321a:	82 ef       	ldi	r24, 0xF2	; 242
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>

		for(int i =0 ;i<4;i++)
    3222:	18 8a       	std	Y+16, r1	; 0x10
    3224:	1f 86       	std	Y+15, r1	; 0x0f
    3226:	22 c0       	rjmp	.+68     	; 0x326c <LoginAdmin+0x74>
		{
				key = KPD_u8GetPressedKey();
    3228:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <KPD_u8GetPressedKey>
    322c:	8a 8b       	std	Y+18, r24	; 0x12
					LCD_vidSendChar(key);
    322e:	8a 89       	ldd	r24, Y+18	; 0x12
    3230:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidSendChar>
					key = getnum(key);
    3234:	8a 89       	ldd	r24, Y+18	; 0x12
    3236:	0e 94 21 16 	call	0x2c42	; 0x2c42 <getnum>
    323a:	8a 8b       	std	Y+18, r24	; 0x12
					ValidPassword=ValidPassword*10+key;
    323c:	8b 89       	ldd	r24, Y+19	; 0x13
    323e:	9c 89       	ldd	r25, Y+20	; 0x14
    3240:	9c 01       	movw	r18, r24
    3242:	22 0f       	add	r18, r18
    3244:	33 1f       	adc	r19, r19
    3246:	c9 01       	movw	r24, r18
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	28 0f       	add	r18, r24
    3252:	39 1f       	adc	r19, r25
    3254:	8a 89       	ldd	r24, Y+18	; 0x12
    3256:	88 2f       	mov	r24, r24
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	82 0f       	add	r24, r18
    325c:	93 1f       	adc	r25, r19
    325e:	9c 8b       	std	Y+20, r25	; 0x14
    3260:	8b 8b       	std	Y+19, r24	; 0x13
	for ( x=0;x<3;x++)
	{
		LCD_VidSetClEAR();
		LCD_VidSendString("Password:");

		for(int i =0 ;i<4;i++)
    3262:	8f 85       	ldd	r24, Y+15	; 0x0f
    3264:	98 89       	ldd	r25, Y+16	; 0x10
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	98 8b       	std	Y+16, r25	; 0x10
    326a:	8f 87       	std	Y+15, r24	; 0x0f
    326c:	8f 85       	ldd	r24, Y+15	; 0x0f
    326e:	98 89       	ldd	r25, Y+16	; 0x10
    3270:	84 30       	cpi	r24, 0x04	; 4
    3272:	91 05       	cpc	r25, r1
    3274:	cc f2       	brlt	.-78     	; 0x3228 <LoginAdmin+0x30>
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	a8 e4       	ldi	r26, 0x48	; 72
    327c:	b2 e4       	ldi	r27, 0x42	; 66
    327e:	8b 87       	std	Y+11, r24	; 0x0b
    3280:	9c 87       	std	Y+12, r25	; 0x0c
    3282:	ad 87       	std	Y+13, r26	; 0x0d
    3284:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3286:	6b 85       	ldd	r22, Y+11	; 0x0b
    3288:	7c 85       	ldd	r23, Y+12	; 0x0c
    328a:	8d 85       	ldd	r24, Y+13	; 0x0d
    328c:	9e 85       	ldd	r25, Y+14	; 0x0e
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	4a ef       	ldi	r20, 0xFA	; 250
    3294:	54 e4       	ldi	r21, 0x44	; 68
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	8f 83       	std	Y+7, r24	; 0x07
    32a0:	98 87       	std	Y+8, r25	; 0x08
    32a2:	a9 87       	std	Y+9, r26	; 0x09
    32a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32a6:	6f 81       	ldd	r22, Y+7	; 0x07
    32a8:	78 85       	ldd	r23, Y+8	; 0x08
    32aa:	89 85       	ldd	r24, Y+9	; 0x09
    32ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e8       	ldi	r20, 0x80	; 128
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	2c f4       	brge	.+10     	; 0x32c8 <LoginAdmin+0xd0>
		__ticks = 1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	9e 83       	std	Y+6, r25	; 0x06
    32c4:	8d 83       	std	Y+5, r24	; 0x05
    32c6:	3f c0       	rjmp	.+126    	; 0x3346 <LoginAdmin+0x14e>
	else if (__tmp > 65535)
    32c8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ca:	78 85       	ldd	r23, Y+8	; 0x08
    32cc:	89 85       	ldd	r24, Y+9	; 0x09
    32ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	3f ef       	ldi	r19, 0xFF	; 255
    32d4:	4f e7       	ldi	r20, 0x7F	; 127
    32d6:	57 e4       	ldi	r21, 0x47	; 71
    32d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32dc:	18 16       	cp	r1, r24
    32de:	4c f5       	brge	.+82     	; 0x3332 <LoginAdmin+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e2       	ldi	r20, 0x20	; 32
    32ee:	51 e4       	ldi	r21, 0x41	; 65
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	bc 01       	movw	r22, r24
    32fa:	cd 01       	movw	r24, r26
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
    3308:	0f c0       	rjmp	.+30     	; 0x3328 <LoginAdmin+0x130>
    330a:	88 ec       	ldi	r24, 0xC8	; 200
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	9c 83       	std	Y+4, r25	; 0x04
    3310:	8b 83       	std	Y+3, r24	; 0x03
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <LoginAdmin+0x11e>
    331a:	9c 83       	std	Y+4, r25	; 0x04
    331c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331e:	8d 81       	ldd	r24, Y+5	; 0x05
    3320:	9e 81       	ldd	r25, Y+6	; 0x06
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	9e 83       	std	Y+6, r25	; 0x06
    3326:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
    332a:	9e 81       	ldd	r25, Y+6	; 0x06
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	69 f7       	brne	.-38     	; 0x330a <LoginAdmin+0x112>
    3330:	14 c0       	rjmp	.+40     	; 0x335a <LoginAdmin+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3332:	6f 81       	ldd	r22, Y+7	; 0x07
    3334:	78 85       	ldd	r23, Y+8	; 0x08
    3336:	89 85       	ldd	r24, Y+9	; 0x09
    3338:	9a 85       	ldd	r25, Y+10	; 0x0a
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <LoginAdmin+0x15a>
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	89 83       	std	Y+1, r24	; 0x01
					ValidPassword=ValidPassword*10+key;

			}
		_delay_ms(50);

		if(CheckUser(ValidPassword)){
    335a:	8b 89       	ldd	r24, Y+19	; 0x13
    335c:	9c 89       	ldd	r25, Y+20	; 0x14
    335e:	cc 01       	movw	r24, r24
    3360:	a0 e0       	ldi	r26, 0x00	; 0
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	bc 01       	movw	r22, r24
    3366:	cd 01       	movw	r24, r26
    3368:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <CheckUser>
    336c:	88 23       	and	r24, r24
    336e:	39 f4       	brne	.+14     	; 0x337e <LoginAdmin+0x186>
	u8 x=0;




	for ( x=0;x<3;x++)
    3370:	89 89       	ldd	r24, Y+17	; 0x11
    3372:	8f 5f       	subi	r24, 0xFF	; 255
    3374:	89 8b       	std	Y+17, r24	; 0x11
    3376:	89 89       	ldd	r24, Y+17	; 0x11
    3378:	83 30       	cpi	r24, 0x03	; 3
    337a:	08 f4       	brcc	.+2      	; 0x337e <LoginAdmin+0x186>
    337c:	4c cf       	rjmp	.-360    	; 0x3216 <LoginAdmin+0x1e>

			break;
		}

          	}
	if(x==3){
    337e:	89 89       	ldd	r24, Y+17	; 0x11
    3380:	83 30       	cpi	r24, 0x03	; 3
    3382:	a9 f4       	brne	.+42     	; 0x33ae <LoginAdmin+0x1b6>
	LCD_VidSetClEAR();
    3384:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
	LCD_VidSendString("sorry not allowed ");
    3388:	8c ef       	ldi	r24, 0xFC	; 252
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
	LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    3390:	82 e0       	ldi	r24, 0x02	; 2
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidGoToLocation>
	LCD_VidSendString("more of 3");
    3398:	8f e0       	ldi	r24, 0x0F	; 15
    339a:	91 e0       	ldi	r25, 0x01	; 1
    339c:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>

	DIO_VidSetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH);
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	67 e0       	ldi	r22, 0x07	; 7
    33a4:	41 e0       	ldi	r20, 0x01	; 1
    33a6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	return 0;
    33aa:	1d 8a       	std	Y+21, r1	; 0x15
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <LoginAdmin+0x1ba>
	}
	return 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	8d 8b       	std	Y+21, r24	; 0x15
    33b2:	8d 89       	ldd	r24, Y+21	; 0x15
}
    33b4:	65 96       	adiw	r28, 0x15	; 21
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <CheckLight>:
#include"USART.h"
#include"menu.h"
#include "ADC.h"

 ///
void CheckLight(void){
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <CheckLight+0x6>
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62


	 u16 sun;
	sun= ADC_U16GetDigitalValue(ADC_CHANNEL_3);
    33d0:	83 e0       	ldi	r24, 0x03	; 3
    33d2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_U16GetDigitalValue>
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01
 if(sun<=8){
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	89 30       	cpi	r24, 0x09	; 9
    33e0:	91 05       	cpc	r25, r1
    33e2:	30 f4       	brcc	.+12     	; 0x33f0 <CheckLight+0x2a>
	 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    33e4:	83 e0       	ldi	r24, 0x03	; 3
    33e6:	66 e0       	ldi	r22, 0x06	; 6
    33e8:	41 e0       	ldi	r20, 0x01	; 1
    33ea:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    33ee:	05 c0       	rjmp	.+10     	; 0x33fa <CheckLight+0x34>

 }else{
	 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    33f0:	83 e0       	ldi	r24, 0x03	; 3
    33f2:	66 e0       	ldi	r22, 0x06	; 6
    33f4:	40 e0       	ldi	r20, 0x00	; 0
    33f6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

 }
 }
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <main>:
 ///


void main (void)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	0f 92       	push	r0
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
	USART();
    340e:	0e 94 5f 14 	call	0x28be	; 0x28be <USART>

	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	65 e0       	ldi	r22, 0x05	; 5
    3416:	41 e0       	ldi	r20, 0x01	; 1
    3418:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	66 e0       	ldi	r22, 0x06	; 6
    3420:	41 e0       	ldi	r20, 0x01	; 1
    3422:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN7,DIO_OUTPUT);
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	67 e0       	ldi	r22, 0x07	; 7
    342a:	41 e0       	ldi	r20, 0x01	; 1
    342c:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	u8 flag=Login();
    3430:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <Login>
    3434:	89 83       	std	Y+1, r24	; 0x01
	//USART();
		ADC_VidInit();
    3436:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_VidInit>
		Timers_VidTimer0SetCallBack(&CheckLight);
    343a:	83 ee       	ldi	r24, 0xE3	; 227
    343c:	99 e1       	ldi	r25, 0x19	; 25
    343e:	0e 94 07 14 	call	0x280e	; 0x280e <Timers_VidTimer0SetCallBack>
		Timers_VidTimer0Init();
    3442:	0e 94 cb 13 	call	0x2796	; 0x2796 <Timers_VidTimer0Init>
		DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
    3446:	83 e0       	ldi	r24, 0x03	; 3
    3448:	66 e0       	ldi	r22, 0x06	; 6
    344a:	41 e0       	ldi	r20, 0x01	; 1
    344c:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>



if(flag==1){
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	81 30       	cpi	r24, 0x01	; 1
    3454:	19 f4       	brne	.+6      	; 0x345c <main+0x58>

 while(1){

	Menu();
    3456:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <Menu>
    345a:	fd cf       	rjmp	.-6      	; 0x3456 <main+0x52>
    345c:	ff cf       	rjmp	.-2      	; 0x345c <main+0x58>

0000345e <getTemperature>:
 *
 *  Created on: Sep 13, 2023
 *      Author: btc
 */
#include"menu.h"
void getTemperature(void){
    345e:	df 93       	push	r29
    3460:	cf 93       	push	r28
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	2f 97       	sbiw	r28, 0x0f	; 15
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
	u8 key;

	LCD_VidSetClEAR();
    3472:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>

		USART_VidSendChar('t');
    3476:	84 e7       	ldi	r24, 0x74	; 116
    3478:	0e 94 c8 14 	call	0x2990	; 0x2990 <USART_VidSendChar>
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a0 ea       	ldi	r26, 0xA0	; 160
    3482:	b0 e4       	ldi	r27, 0x40	; 64
    3484:	8b 87       	std	Y+11, r24	; 0x0b
    3486:	9c 87       	std	Y+12, r25	; 0x0c
    3488:	ad 87       	std	Y+13, r26	; 0x0d
    348a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	6b 85       	ldd	r22, Y+11	; 0x0b
    348e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3490:	8d 85       	ldd	r24, Y+13	; 0x0d
    3492:	9e 85       	ldd	r25, Y+14	; 0x0e
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4a ef       	ldi	r20, 0xFA	; 250
    349a:	54 e4       	ldi	r21, 0x44	; 68
    349c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	8f 83       	std	Y+7, r24	; 0x07
    34a6:	98 87       	std	Y+8, r25	; 0x08
    34a8:	a9 87       	std	Y+9, r26	; 0x09
    34aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34ac:	6f 81       	ldd	r22, Y+7	; 0x07
    34ae:	78 85       	ldd	r23, Y+8	; 0x08
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e8       	ldi	r20, 0x80	; 128
    34ba:	5f e3       	ldi	r21, 0x3F	; 63
    34bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c0:	88 23       	and	r24, r24
    34c2:	2c f4       	brge	.+10     	; 0x34ce <getTemperature+0x70>
		__ticks = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9e 83       	std	Y+6, r25	; 0x06
    34ca:	8d 83       	std	Y+5, r24	; 0x05
    34cc:	3f c0       	rjmp	.+126    	; 0x354c <getTemperature+0xee>
	else if (__tmp > 65535)
    34ce:	6f 81       	ldd	r22, Y+7	; 0x07
    34d0:	78 85       	ldd	r23, Y+8	; 0x08
    34d2:	89 85       	ldd	r24, Y+9	; 0x09
    34d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	57 e4       	ldi	r21, 0x47	; 71
    34de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	4c f5       	brge	.+82     	; 0x3538 <getTemperature+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e2       	ldi	r20, 0x20	; 32
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9e 83       	std	Y+6, r25	; 0x06
    350c:	8d 83       	std	Y+5, r24	; 0x05
    350e:	0f c0       	rjmp	.+30     	; 0x352e <getTemperature+0xd0>
    3510:	88 ec       	ldi	r24, 0xC8	; 200
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9c 83       	std	Y+4, r25	; 0x04
    3516:	8b 83       	std	Y+3, r24	; 0x03
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	9c 81       	ldd	r25, Y+4	; 0x04
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <getTemperature+0xbe>
    3520:	9c 83       	std	Y+4, r25	; 0x04
    3522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	8d 81       	ldd	r24, Y+5	; 0x05
    3530:	9e 81       	ldd	r25, Y+6	; 0x06
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	69 f7       	brne	.-38     	; 0x3510 <getTemperature+0xb2>
    3536:	14 c0       	rjmp	.+40     	; 0x3560 <getTemperature+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3538:	6f 81       	ldd	r22, Y+7	; 0x07
    353a:	78 85       	ldd	r23, Y+8	; 0x08
    353c:	89 85       	ldd	r24, Y+9	; 0x09
    353e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9e 83       	std	Y+6, r25	; 0x06
    354a:	8d 83       	std	Y+5, r24	; 0x05
    354c:	8d 81       	ldd	r24, Y+5	; 0x05
    354e:	9e 81       	ldd	r25, Y+6	; 0x06
    3550:	9a 83       	std	Y+2, r25	; 0x02
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	9a 81       	ldd	r25, Y+2	; 0x02
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <getTemperature+0xfa>
    355c:	9a 83       	std	Y+2, r25	; 0x02
    355e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		LCD_VidSendString("Temperature:");
    3560:	89 e1       	ldi	r24, 0x19	; 25
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
		 key =USART_U8GetChar();
    3568:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <USART_U8GetChar>
    356c:	8f 87       	std	Y+15, r24	; 0x0f
		if(key=='l'){
    356e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3570:	8c 36       	cpi	r24, 0x6C	; 108
    3572:	29 f4       	brne	.+10     	; 0x357e <getTemperature+0x120>
			LCD_VidSendString("Low");
    3574:	86 e2       	ldi	r24, 0x26	; 38
    3576:	91 e0       	ldi	r25, 0x01	; 1
    3578:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
    357c:	0f c0       	rjmp	.+30     	; 0x359c <getTemperature+0x13e>
		}else if(key=='m'){
    357e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3580:	8d 36       	cpi	r24, 0x6D	; 109
    3582:	29 f4       	brne	.+10     	; 0x358e <getTemperature+0x130>
			LCD_VidSendString("Middle");
    3584:	8a e2       	ldi	r24, 0x2A	; 42
    3586:	91 e0       	ldi	r25, 0x01	; 1
    3588:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
    358c:	07 c0       	rjmp	.+14     	; 0x359c <getTemperature+0x13e>
		}else if(key=='h'){
    358e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3590:	88 36       	cpi	r24, 0x68	; 104
    3592:	21 f4       	brne	.+8      	; 0x359c <getTemperature+0x13e>
			LCD_VidSendString("High");
    3594:	81 e3       	ldi	r24, 0x31	; 49
    3596:	91 e0       	ldi	r25, 0x01	; 1
    3598:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
		}

		LCD_VidGoToLocation(LCD_RowTwo,LCD_ColOne);
    359c:	82 e0       	ldi	r24, 0x02	; 2
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidGoToLocation>
}
    35a4:	2f 96       	adiw	r28, 0x0f	; 15
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	cf 91       	pop	r28
    35b2:	df 91       	pop	r29
    35b4:	08 95       	ret

000035b6 <Menu>:
void Menu(void){
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	2f 97       	sbiw	r28, 0x0f	; 15
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
	u8 key;
	LCD_VidSetClEAR();
    35ca:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
	LCD_VidSendString("Hall:0 Room1:1");
    35ce:	86 e3       	ldi	r24, 0x36	; 54
    35d0:	91 e0       	ldi	r25, 0x01	; 1
    35d2:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
	LCD_VidGoToLocation(LCD_RowTwo,LCD_ColOne);
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VidGoToLocation>
	LCD_VidSendString("Room2:2 Room3:3");
    35de:	85 e4       	ldi	r24, 0x45	; 69
    35e0:	91 e0       	ldi	r25, 0x01	; 1
    35e2:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
	key = KPD_u8GetPressedKey();
    35e6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <KPD_u8GetPressedKey>
    35ea:	8f 87       	std	Y+15, r24	; 0x0f
	if (key=='0')
    35ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ee:	80 33       	cpi	r24, 0x30	; 48
    35f0:	c1 f4       	brne	.+48     	; 0x3622 <Menu+0x6c>
	{
		getTemperature();
    35f2:	0e 94 2f 1a 	call	0x345e	; 0x345e <getTemperature>
		///
		LCD_VidSendString("TV:0 LED:1");
    35f6:	85 e5       	ldi	r24, 0x55	; 85
    35f8:	91 e0       	ldi	r25, 0x01	; 1
    35fa:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
		key = KPD_u8GetPressedKey();
    35fe:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <KPD_u8GetPressedKey>
    3602:	8f 87       	std	Y+15, r24	; 0x0f
		 if(key=='0'){
    3604:	8f 85       	ldd	r24, Y+15	; 0x0f
    3606:	80 33       	cpi	r24, 0x30	; 48
    3608:	21 f4       	brne	.+8      	; 0x3612 <Menu+0x5c>
			USART_VidSendChar('0');
    360a:	80 e3       	ldi	r24, 0x30	; 48
    360c:	0e 94 c8 14 	call	0x2990	; 0x2990 <USART_VidSendChar>
    3610:	43 c0       	rjmp	.+134    	; 0x3698 <Menu+0xe2>

			}else if(key=='1'){
    3612:	8f 85       	ldd	r24, Y+15	; 0x0f
    3614:	81 33       	cpi	r24, 0x31	; 49
    3616:	09 f0       	breq	.+2      	; 0x361a <Menu+0x64>
    3618:	3f c0       	rjmp	.+126    	; 0x3698 <Menu+0xe2>

			USART_VidSendChar('1');
    361a:	81 e3       	ldi	r24, 0x31	; 49
    361c:	0e 94 c8 14 	call	0x2990	; 0x2990 <USART_VidSendChar>
    3620:	3b c0       	rjmp	.+118    	; 0x3698 <Menu+0xe2>

			}
	}else if(key=='1'){
    3622:	8f 85       	ldd	r24, Y+15	; 0x0f
    3624:	81 33       	cpi	r24, 0x31	; 49
    3626:	81 f4       	brne	.+32     	; 0x3648 <Menu+0x92>
		getTemperature();
    3628:	0e 94 2f 1a 	call	0x345e	; 0x345e <getTemperature>
		LCD_VidSendString(" LED:1");
    362c:	80 e6       	ldi	r24, 0x60	; 96
    362e:	91 e0       	ldi	r25, 0x01	; 1
    3630:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
				key = KPD_u8GetPressedKey();
    3634:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <KPD_u8GetPressedKey>
    3638:	8f 87       	std	Y+15, r24	; 0x0f
				 if(key=='1'){
    363a:	8f 85       	ldd	r24, Y+15	; 0x0f
    363c:	81 33       	cpi	r24, 0x31	; 49
    363e:	61 f5       	brne	.+88     	; 0x3698 <Menu+0xe2>
					USART_VidSendChar('a');
    3640:	81 e6       	ldi	r24, 0x61	; 97
    3642:	0e 94 c8 14 	call	0x2990	; 0x2990 <USART_VidSendChar>
    3646:	28 c0       	rjmp	.+80     	; 0x3698 <Menu+0xe2>

					}
	}else if(key=='2'){
    3648:	8f 85       	ldd	r24, Y+15	; 0x0f
    364a:	82 33       	cpi	r24, 0x32	; 50
    364c:	81 f4       	brne	.+32     	; 0x366e <Menu+0xb8>
		getTemperature();
    364e:	0e 94 2f 1a 	call	0x345e	; 0x345e <getTemperature>
		LCD_VidSendString("LED:2");
    3652:	87 e6       	ldi	r24, 0x67	; 103
    3654:	91 e0       	ldi	r25, 0x01	; 1
    3656:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
		key = KPD_u8GetPressedKey();
    365a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <KPD_u8GetPressedKey>
    365e:	8f 87       	std	Y+15, r24	; 0x0f
		 if(key=='2'){
    3660:	8f 85       	ldd	r24, Y+15	; 0x0f
    3662:	82 33       	cpi	r24, 0x32	; 50
    3664:	c9 f4       	brne	.+50     	; 0x3698 <Menu+0xe2>
			USART_VidSendChar('b');
    3666:	82 e6       	ldi	r24, 0x62	; 98
    3668:	0e 94 c8 14 	call	0x2990	; 0x2990 <USART_VidSendChar>
    366c:	15 c0       	rjmp	.+42     	; 0x3698 <Menu+0xe2>

			}
	}else if(key=='3'){
    366e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3670:	83 33       	cpi	r24, 0x33	; 51
    3672:	81 f4       	brne	.+32     	; 0x3694 <Menu+0xde>
		getTemperature();
    3674:	0e 94 2f 1a 	call	0x345e	; 0x345e <getTemperature>
		LCD_VidSendString("LED:3");
    3678:	8d e6       	ldi	r24, 0x6D	; 109
    367a:	91 e0       	ldi	r25, 0x01	; 1
    367c:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
				key = KPD_u8GetPressedKey();
    3680:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <KPD_u8GetPressedKey>
    3684:	8f 87       	std	Y+15, r24	; 0x0f
				 if(key=='3'){
    3686:	8f 85       	ldd	r24, Y+15	; 0x0f
    3688:	83 33       	cpi	r24, 0x33	; 51
    368a:	31 f4       	brne	.+12     	; 0x3698 <Menu+0xe2>
					USART_VidSendChar('c');
    368c:	83 e6       	ldi	r24, 0x63	; 99
    368e:	0e 94 c8 14 	call	0x2990	; 0x2990 <USART_VidSendChar>
    3692:	02 c0       	rjmp	.+4      	; 0x3698 <Menu+0xe2>

					}
	}else{
		WrongSelect();
    3694:	0e 94 c7 1b 	call	0x378e	; 0x378e <WrongSelect>
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	a0 ea       	ldi	r26, 0xA0	; 160
    369e:	b1 e4       	ldi	r27, 0x41	; 65
    36a0:	8b 87       	std	Y+11, r24	; 0x0b
    36a2:	9c 87       	std	Y+12, r25	; 0x0c
    36a4:	ad 87       	std	Y+13, r26	; 0x0d
    36a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	4a ef       	ldi	r20, 0xFA	; 250
    36b6:	54 e4       	ldi	r21, 0x44	; 68
    36b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	8f 83       	std	Y+7, r24	; 0x07
    36c2:	98 87       	std	Y+8, r25	; 0x08
    36c4:	a9 87       	std	Y+9, r26	; 0x09
    36c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36c8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ca:	78 85       	ldd	r23, Y+8	; 0x08
    36cc:	89 85       	ldd	r24, Y+9	; 0x09
    36ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	40 e8       	ldi	r20, 0x80	; 128
    36d6:	5f e3       	ldi	r21, 0x3F	; 63
    36d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36dc:	88 23       	and	r24, r24
    36de:	2c f4       	brge	.+10     	; 0x36ea <Menu+0x134>
		__ticks = 1;
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	3f c0       	rjmp	.+126    	; 0x3768 <Menu+0x1b2>
	else if (__tmp > 65535)
    36ea:	6f 81       	ldd	r22, Y+7	; 0x07
    36ec:	78 85       	ldd	r23, Y+8	; 0x08
    36ee:	89 85       	ldd	r24, Y+9	; 0x09
    36f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	3f ef       	ldi	r19, 0xFF	; 255
    36f6:	4f e7       	ldi	r20, 0x7F	; 127
    36f8:	57 e4       	ldi	r21, 0x47	; 71
    36fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36fe:	18 16       	cp	r1, r24
    3700:	4c f5       	brge	.+82     	; 0x3754 <Menu+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3702:	6b 85       	ldd	r22, Y+11	; 0x0b
    3704:	7c 85       	ldd	r23, Y+12	; 0x0c
    3706:	8d 85       	ldd	r24, Y+13	; 0x0d
    3708:	9e 85       	ldd	r25, Y+14	; 0x0e
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 e2       	ldi	r20, 0x20	; 32
    3710:	51 e4       	ldi	r21, 0x41	; 65
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	bc 01       	movw	r22, r24
    371c:	cd 01       	movw	r24, r26
    371e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	9e 83       	std	Y+6, r25	; 0x06
    3728:	8d 83       	std	Y+5, r24	; 0x05
    372a:	0f c0       	rjmp	.+30     	; 0x374a <Menu+0x194>
    372c:	88 ec       	ldi	r24, 0xC8	; 200
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	9c 83       	std	Y+4, r25	; 0x04
    3732:	8b 83       	std	Y+3, r24	; 0x03
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	9c 81       	ldd	r25, Y+4	; 0x04
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <Menu+0x182>
    373c:	9c 83       	std	Y+4, r25	; 0x04
    373e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3740:	8d 81       	ldd	r24, Y+5	; 0x05
    3742:	9e 81       	ldd	r25, Y+6	; 0x06
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	9e 83       	std	Y+6, r25	; 0x06
    3748:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374a:	8d 81       	ldd	r24, Y+5	; 0x05
    374c:	9e 81       	ldd	r25, Y+6	; 0x06
    374e:	00 97       	sbiw	r24, 0x00	; 0
    3750:	69 f7       	brne	.-38     	; 0x372c <Menu+0x176>
    3752:	14 c0       	rjmp	.+40     	; 0x377c <Menu+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3754:	6f 81       	ldd	r22, Y+7	; 0x07
    3756:	78 85       	ldd	r23, Y+8	; 0x08
    3758:	89 85       	ldd	r24, Y+9	; 0x09
    375a:	9a 85       	ldd	r25, Y+10	; 0x0a
    375c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	9e 83       	std	Y+6, r25	; 0x06
    3766:	8d 83       	std	Y+5, r24	; 0x05
    3768:	8d 81       	ldd	r24, Y+5	; 0x05
    376a:	9e 81       	ldd	r25, Y+6	; 0x06
    376c:	9a 83       	std	Y+2, r25	; 0x02
    376e:	89 83       	std	Y+1, r24	; 0x01
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	9a 81       	ldd	r25, Y+2	; 0x02
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	f1 f7       	brne	.-4      	; 0x3774 <Menu+0x1be>
    3778:	9a 83       	std	Y+2, r25	; 0x02
    377a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(20);

	}
    377c:	2f 96       	adiw	r28, 0x0f	; 15
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	de bf       	out	0x3e, r29	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	cf 91       	pop	r28
    378a:	df 91       	pop	r29
    378c:	08 95       	ret

0000378e <WrongSelect>:

void WrongSelect(void)
{
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSetClEAR();
    3796:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_VidSetClEAR>
			LCD_VidSendString("wrong choose");
    379a:	83 e7       	ldi	r24, 0x73	; 115
    379c:	91 e0       	ldi	r25, 0x01	; 1
    379e:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_VidSendString>
}
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <__mulsi3>:
    37a8:	62 9f       	mul	r22, r18
    37aa:	d0 01       	movw	r26, r0
    37ac:	73 9f       	mul	r23, r19
    37ae:	f0 01       	movw	r30, r0
    37b0:	82 9f       	mul	r24, r18
    37b2:	e0 0d       	add	r30, r0
    37b4:	f1 1d       	adc	r31, r1
    37b6:	64 9f       	mul	r22, r20
    37b8:	e0 0d       	add	r30, r0
    37ba:	f1 1d       	adc	r31, r1
    37bc:	92 9f       	mul	r25, r18
    37be:	f0 0d       	add	r31, r0
    37c0:	83 9f       	mul	r24, r19
    37c2:	f0 0d       	add	r31, r0
    37c4:	74 9f       	mul	r23, r20
    37c6:	f0 0d       	add	r31, r0
    37c8:	65 9f       	mul	r22, r21
    37ca:	f0 0d       	add	r31, r0
    37cc:	99 27       	eor	r25, r25
    37ce:	72 9f       	mul	r23, r18
    37d0:	b0 0d       	add	r27, r0
    37d2:	e1 1d       	adc	r30, r1
    37d4:	f9 1f       	adc	r31, r25
    37d6:	63 9f       	mul	r22, r19
    37d8:	b0 0d       	add	r27, r0
    37da:	e1 1d       	adc	r30, r1
    37dc:	f9 1f       	adc	r31, r25
    37de:	bd 01       	movw	r22, r26
    37e0:	cf 01       	movw	r24, r30
    37e2:	11 24       	eor	r1, r1
    37e4:	08 95       	ret

000037e6 <__udivmodsi4>:
    37e6:	a1 e2       	ldi	r26, 0x21	; 33
    37e8:	1a 2e       	mov	r1, r26
    37ea:	aa 1b       	sub	r26, r26
    37ec:	bb 1b       	sub	r27, r27
    37ee:	fd 01       	movw	r30, r26
    37f0:	0d c0       	rjmp	.+26     	; 0x380c <__udivmodsi4_ep>

000037f2 <__udivmodsi4_loop>:
    37f2:	aa 1f       	adc	r26, r26
    37f4:	bb 1f       	adc	r27, r27
    37f6:	ee 1f       	adc	r30, r30
    37f8:	ff 1f       	adc	r31, r31
    37fa:	a2 17       	cp	r26, r18
    37fc:	b3 07       	cpc	r27, r19
    37fe:	e4 07       	cpc	r30, r20
    3800:	f5 07       	cpc	r31, r21
    3802:	20 f0       	brcs	.+8      	; 0x380c <__udivmodsi4_ep>
    3804:	a2 1b       	sub	r26, r18
    3806:	b3 0b       	sbc	r27, r19
    3808:	e4 0b       	sbc	r30, r20
    380a:	f5 0b       	sbc	r31, r21

0000380c <__udivmodsi4_ep>:
    380c:	66 1f       	adc	r22, r22
    380e:	77 1f       	adc	r23, r23
    3810:	88 1f       	adc	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	1a 94       	dec	r1
    3816:	69 f7       	brne	.-38     	; 0x37f2 <__udivmodsi4_loop>
    3818:	60 95       	com	r22
    381a:	70 95       	com	r23
    381c:	80 95       	com	r24
    381e:	90 95       	com	r25
    3820:	9b 01       	movw	r18, r22
    3822:	ac 01       	movw	r20, r24
    3824:	bd 01       	movw	r22, r26
    3826:	cf 01       	movw	r24, r30
    3828:	08 95       	ret

0000382a <__prologue_saves__>:
    382a:	2f 92       	push	r2
    382c:	3f 92       	push	r3
    382e:	4f 92       	push	r4
    3830:	5f 92       	push	r5
    3832:	6f 92       	push	r6
    3834:	7f 92       	push	r7
    3836:	8f 92       	push	r8
    3838:	9f 92       	push	r9
    383a:	af 92       	push	r10
    383c:	bf 92       	push	r11
    383e:	cf 92       	push	r12
    3840:	df 92       	push	r13
    3842:	ef 92       	push	r14
    3844:	ff 92       	push	r15
    3846:	0f 93       	push	r16
    3848:	1f 93       	push	r17
    384a:	cf 93       	push	r28
    384c:	df 93       	push	r29
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	ca 1b       	sub	r28, r26
    3854:	db 0b       	sbc	r29, r27
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	09 94       	ijmp

00003862 <__epilogue_restores__>:
    3862:	2a 88       	ldd	r2, Y+18	; 0x12
    3864:	39 88       	ldd	r3, Y+17	; 0x11
    3866:	48 88       	ldd	r4, Y+16	; 0x10
    3868:	5f 84       	ldd	r5, Y+15	; 0x0f
    386a:	6e 84       	ldd	r6, Y+14	; 0x0e
    386c:	7d 84       	ldd	r7, Y+13	; 0x0d
    386e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3870:	9b 84       	ldd	r9, Y+11	; 0x0b
    3872:	aa 84       	ldd	r10, Y+10	; 0x0a
    3874:	b9 84       	ldd	r11, Y+9	; 0x09
    3876:	c8 84       	ldd	r12, Y+8	; 0x08
    3878:	df 80       	ldd	r13, Y+7	; 0x07
    387a:	ee 80       	ldd	r14, Y+6	; 0x06
    387c:	fd 80       	ldd	r15, Y+5	; 0x05
    387e:	0c 81       	ldd	r16, Y+4	; 0x04
    3880:	1b 81       	ldd	r17, Y+3	; 0x03
    3882:	aa 81       	ldd	r26, Y+2	; 0x02
    3884:	b9 81       	ldd	r27, Y+1	; 0x01
    3886:	ce 0f       	add	r28, r30
    3888:	d1 1d       	adc	r29, r1
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	de bf       	out	0x3e, r29	; 62
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	cd bf       	out	0x3d, r28	; 61
    3894:	ed 01       	movw	r28, r26
    3896:	08 95       	ret

00003898 <itoa>:
    3898:	fb 01       	movw	r30, r22
    389a:	9f 01       	movw	r18, r30
    389c:	e8 94       	clt
    389e:	42 30       	cpi	r20, 0x02	; 2
    38a0:	c4 f0       	brlt	.+48     	; 0x38d2 <itoa+0x3a>
    38a2:	45 32       	cpi	r20, 0x25	; 37
    38a4:	b4 f4       	brge	.+44     	; 0x38d2 <itoa+0x3a>
    38a6:	4a 30       	cpi	r20, 0x0A	; 10
    38a8:	29 f4       	brne	.+10     	; 0x38b4 <itoa+0x1c>
    38aa:	97 fb       	bst	r25, 7
    38ac:	1e f4       	brtc	.+6      	; 0x38b4 <itoa+0x1c>
    38ae:	90 95       	com	r25
    38b0:	81 95       	neg	r24
    38b2:	9f 4f       	sbci	r25, 0xFF	; 255
    38b4:	64 2f       	mov	r22, r20
    38b6:	77 27       	eor	r23, r23
    38b8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__udivmodhi4>
    38bc:	80 5d       	subi	r24, 0xD0	; 208
    38be:	8a 33       	cpi	r24, 0x3A	; 58
    38c0:	0c f0       	brlt	.+2      	; 0x38c4 <itoa+0x2c>
    38c2:	89 5d       	subi	r24, 0xD9	; 217
    38c4:	81 93       	st	Z+, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	a1 f7       	brne	.-24     	; 0x38b4 <itoa+0x1c>
    38cc:	16 f4       	brtc	.+4      	; 0x38d2 <itoa+0x3a>
    38ce:	5d e2       	ldi	r21, 0x2D	; 45
    38d0:	51 93       	st	Z+, r21
    38d2:	10 82       	st	Z, r1
    38d4:	c9 01       	movw	r24, r18
    38d6:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <strrev>

000038da <strrev>:
    38da:	dc 01       	movw	r26, r24
    38dc:	fc 01       	movw	r30, r24
    38de:	67 2f       	mov	r22, r23
    38e0:	71 91       	ld	r23, Z+
    38e2:	77 23       	and	r23, r23
    38e4:	e1 f7       	brne	.-8      	; 0x38de <strrev+0x4>
    38e6:	32 97       	sbiw	r30, 0x02	; 2
    38e8:	04 c0       	rjmp	.+8      	; 0x38f2 <strrev+0x18>
    38ea:	7c 91       	ld	r23, X
    38ec:	6d 93       	st	X+, r22
    38ee:	70 83       	st	Z, r23
    38f0:	62 91       	ld	r22, -Z
    38f2:	ae 17       	cp	r26, r30
    38f4:	bf 07       	cpc	r27, r31
    38f6:	c8 f3       	brcs	.-14     	; 0x38ea <strrev+0x10>
    38f8:	08 95       	ret

000038fa <__udivmodhi4>:
    38fa:	aa 1b       	sub	r26, r26
    38fc:	bb 1b       	sub	r27, r27
    38fe:	51 e1       	ldi	r21, 0x11	; 17
    3900:	07 c0       	rjmp	.+14     	; 0x3910 <__udivmodhi4_ep>

00003902 <__udivmodhi4_loop>:
    3902:	aa 1f       	adc	r26, r26
    3904:	bb 1f       	adc	r27, r27
    3906:	a6 17       	cp	r26, r22
    3908:	b7 07       	cpc	r27, r23
    390a:	10 f0       	brcs	.+4      	; 0x3910 <__udivmodhi4_ep>
    390c:	a6 1b       	sub	r26, r22
    390e:	b7 0b       	sbc	r27, r23

00003910 <__udivmodhi4_ep>:
    3910:	88 1f       	adc	r24, r24
    3912:	99 1f       	adc	r25, r25
    3914:	5a 95       	dec	r21
    3916:	a9 f7       	brne	.-22     	; 0x3902 <__udivmodhi4_loop>
    3918:	80 95       	com	r24
    391a:	90 95       	com	r25
    391c:	bc 01       	movw	r22, r24
    391e:	cd 01       	movw	r24, r26
    3920:	08 95       	ret

00003922 <_exit>:
    3922:	f8 94       	cli

00003924 <__stop_program>:
    3924:	ff cf       	rjmp	.-2      	; 0x3924 <__stop_program>
