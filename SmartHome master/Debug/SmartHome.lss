
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00003962  000039f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800188  00800188  00003b1e  2**0
                  ALLOC
  3 .stab         00003d98  00000000  00000000  00003b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ec  00000000  00000000  000078b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000afd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d05c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d49e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 af 18 	jmp	0x315e	; 0x315e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <main>
      8a:	0c 94 af 1c 	jmp	0x395e	; 0x395e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_VidInit>:
#include "ADC.h"




void ADC_VidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADPS0);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_U16GetDigitalValue>:

u16 ADC_U16GetDigitalValue(u8 Copy_U8ChannelNumber){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <ADC_U16GetDigitalValue+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U16_value;
	ADMUX &=0b11100000;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 7e       	andi	r24, 0xE0	; 224
     d36:	8c 93       	st	X, r24
	ADMUX |=Copy_U8ChannelNumber ;
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	90 81       	ld	r25, Z
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	8c 93       	st	X, r24

	while((GET_BIT(ADCSRA , ADIF))==0);
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	82 95       	swap	r24
     d5e:	8f 70       	andi	r24, 0x0F	; 15
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a9 f3       	breq	.-22     	; 0xd56 <ADC_U16GetDigitalValue+0x3a>

	SET_BIT(ADCSRA , ADIF);
     d6c:	a6 e2       	ldi	r26, 0x26	; 38
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e6 e2       	ldi	r30, 0x26	; 38
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 61       	ori	r24, 0x10	; 16
     d78:	8c 93       	st	X, r24

	Local_U16_value=ADC;
     d7a:	e4 e2       	ldi	r30, 0x24	; 36
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01

	return Local_U16_value;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02

}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <DIO_VidSetPinDirection>:
#include "DIO.h"

/*Function for the direction*/
void DIO_VidSetPinDirection(u8 Copy_U8Port, u8 Copy_U8pin, u8 Copy_U8Direction)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	29 97       	sbiw	r28, 0x09	; 9
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
     dae:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8Direction)
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	39 87       	std	Y+9, r19	; 0x09
     db8:	28 87       	std	Y+8, r18	; 0x08
     dba:	88 85       	ldd	r24, Y+8	; 0x08
     dbc:	99 85       	ldd	r25, Y+9	; 0x09
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <DIO_VidSetPinDirection+0x3a>
     dc2:	28 85       	ldd	r18, Y+8	; 0x08
     dc4:	39 85       	ldd	r19, Y+9	; 0x09
     dc6:	21 30       	cpi	r18, 0x01	; 1
     dc8:	31 05       	cpc	r19, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <DIO_VidSetPinDirection+0x38>
     dcc:	75 c0       	rjmp	.+234    	; 0xeb8 <DIO_VidSetPinDirection+0x122>
     dce:	e2 c0       	rjmp	.+452    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	{
	       case DIO_INPUT:
	    	   switch (Copy_U8Port)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	3f 83       	std	Y+7, r19	; 0x07
     dd8:	2e 83       	std	Y+6, r18	; 0x06
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	9f 81       	ldd	r25, Y+7	; 0x07
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	91 05       	cpc	r25, r1
     de2:	59 f1       	breq	.+86     	; 0xe3a <DIO_VidSetPinDirection+0xa4>
     de4:	2e 81       	ldd	r18, Y+6	; 0x06
     de6:	3f 81       	ldd	r19, Y+7	; 0x07
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	2c f4       	brge	.+10     	; 0xdf8 <DIO_VidSetPinDirection+0x62>
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	69 f0       	breq	.+26     	; 0xe10 <DIO_VidSetPinDirection+0x7a>
     df6:	ce c0       	rjmp	.+412    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
     df8:	2e 81       	ldd	r18, Y+6	; 0x06
     dfa:	3f 81       	ldd	r19, Y+7	; 0x07
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	89 f1       	breq	.+98     	; 0xe64 <DIO_VidSetPinDirection+0xce>
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	91 05       	cpc	r25, r1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <DIO_VidSetPinDirection+0x78>
     e0c:	40 c0       	rjmp	.+128    	; 0xe8e <DIO_VidSetPinDirection+0xf8>
     e0e:	c2 c0       	rjmp	.+388    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	   {
	    	        case DIO_PORTA :
	    	        	CLR_BIT(DDRA, Copy_U8pin);
     e10:	aa e3       	ldi	r26, 0x3A	; 58
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ea e3       	ldi	r30, 0x3A	; 58
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_VidSetPinDirection+0x98>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_VidSetPinDirection+0x94>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	ad c0       	rjmp	.+346    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTB:
	    	        	CLR_BIT(DDRB, Copy_U8pin);
     e3a:	a7 e3       	ldi	r26, 0x37	; 55
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_VidSetPinDirection+0xc2>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_VidSetPinDirection+0xbe>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	98 c0       	rjmp	.+304    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTC:
	    	        	CLR_BIT(DDRC, Copy_U8pin);
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_VidSetPinDirection+0xec>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_VidSetPinDirection+0xe8>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	83 c0       	rjmp	.+262    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTD:
	    	        	CLR_BIT(DDRD, Copy_U8pin);
     e8e:	a1 e3       	ldi	r26, 0x31	; 49
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e1 e3       	ldi	r30, 0x31	; 49
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinDirection+0x116>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinDirection+0x112>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	6e c0       	rjmp	.+220    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	        	break;


	    	   }break;
	       case DIO_OUTPUT:
	    	   switch (Copy_U8Port)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3d 83       	std	Y+5, r19	; 0x05
     ec0:	2c 83       	std	Y+4, r18	; 0x04
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	49 f1       	breq	.+82     	; 0xf1e <DIO_VidSetPinDirection+0x188>
     ecc:	2c 81       	ldd	r18, Y+4	; 0x04
     ece:	3d 81       	ldd	r19, Y+5	; 0x05
     ed0:	22 30       	cpi	r18, 0x02	; 2
     ed2:	31 05       	cpc	r19, r1
     ed4:	2c f4       	brge	.+10     	; 0xee0 <DIO_VidSetPinDirection+0x14a>
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	61 f0       	breq	.+24     	; 0xef6 <DIO_VidSetPinDirection+0x160>
     ede:	5a c0       	rjmp	.+180    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
     ee0:	2c 81       	ldd	r18, Y+4	; 0x04
     ee2:	3d 81       	ldd	r19, Y+5	; 0x05
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	71 f1       	breq	.+92     	; 0xf46 <DIO_VidSetPinDirection+0x1b0>
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	91 05       	cpc	r25, r1
     ef2:	e9 f1       	breq	.+122    	; 0xf6e <DIO_VidSetPinDirection+0x1d8>
     ef4:	4f c0       	rjmp	.+158    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	  	  {
	    	  	    case DIO_PORTA :
	    	            SET_BIT(DDRA, Copy_U8pin);
     ef6:	aa e3       	ldi	r26, 0x3A	; 58
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ea e3       	ldi	r30, 0x3A	; 58
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_VidSetPinDirection+0x17e>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_VidSetPinDirection+0x17a>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	3b c0       	rjmp	.+118    	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
 	    	            break;

	    	  	    case DIO_PORTB:
	    	  	    	SET_BIT(DDRB, Copy_U8pin);
     f1e:	a7 e3       	ldi	r26, 0x37	; 55
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e3       	ldi	r30, 0x37	; 55
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_VidSetPinDirection+0x1a6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_VidSetPinDirection+0x1a2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	27 c0       	rjmp	.+78     	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	  	    	break;

	    	  	   case DIO_PORTC:
	    	  	    	 SET_BIT(DDRC, Copy_U8pin);
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_VidSetPinDirection+0x1ce>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_VidSetPinDirection+0x1ca>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <DIO_VidSetPinDirection+0x1fe>
	    	  	    	 break;

	    	  	    case DIO_PORTD:
	    	  	    	 SET_BIT(DDRD, Copy_U8pin);
     f6e:	a1 e3       	ldi	r26, 0x31	; 49
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e1 e3       	ldi	r30, 0x31	; 49
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_VidSetPinDirection+0x1f6>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_VidSetPinDirection+0x1f2>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
	    	  	  }break;


	}

}
     f94:	29 96       	adiw	r28, 0x09	; 9
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <DIO_VidSetPinValue>:



/*Function for the  value*/
void DIO_VidSetPinValue(u8 Copy_U8Port, u8 Copy_U8pin, u8 Copy_U8Value)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	29 97       	sbiw	r28, 0x09	; 9
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	6a 83       	std	Y+2, r22	; 0x02
     fbe:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8Value)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	39 87       	std	Y+9, r19	; 0x09
     fc8:	28 87       	std	Y+8, r18	; 0x08
     fca:	88 85       	ldd	r24, Y+8	; 0x08
     fcc:	99 85       	ldd	r25, Y+9	; 0x09
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <DIO_VidSetPinValue+0x3a>
     fd2:	28 85       	ldd	r18, Y+8	; 0x08
     fd4:	39 85       	ldd	r19, Y+9	; 0x09
     fd6:	21 30       	cpi	r18, 0x01	; 1
     fd8:	31 05       	cpc	r19, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <DIO_VidSetPinValue+0x38>
     fdc:	75 c0       	rjmp	.+234    	; 0x10c8 <DIO_VidSetPinValue+0x122>
     fde:	e2 c0       	rjmp	.+452    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		{
		       case DIO_LOW:
		    	   switch (Copy_U8Port)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3f 83       	std	Y+7, r19	; 0x07
     fe8:	2e 83       	std	Y+6, r18	; 0x06
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	59 f1       	breq	.+86     	; 0x104a <DIO_VidSetPinValue+0xa4>
     ff4:	2e 81       	ldd	r18, Y+6	; 0x06
     ff6:	3f 81       	ldd	r19, Y+7	; 0x07
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	2c f4       	brge	.+10     	; 0x1008 <DIO_VidSetPinValue+0x62>
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	9f 81       	ldd	r25, Y+7	; 0x07
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f0       	breq	.+26     	; 0x1020 <DIO_VidSetPinValue+0x7a>
    1006:	ce c0       	rjmp	.+412    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
    1008:	2e 81       	ldd	r18, Y+6	; 0x06
    100a:	3f 81       	ldd	r19, Y+7	; 0x07
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	89 f1       	breq	.+98     	; 0x1074 <DIO_VidSetPinValue+0xce>
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	9f 81       	ldd	r25, Y+7	; 0x07
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <DIO_VidSetPinValue+0x78>
    101c:	40 c0       	rjmp	.+128    	; 0x109e <DIO_VidSetPinValue+0xf8>
    101e:	c2 c0       	rjmp	.+388    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	   {
		    	        case DIO_PORTA :
		    	        	CLR_BIT(PORTA, Copy_U8pin);
    1020:	ab e3       	ldi	r26, 0x3B	; 59
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	eb e3       	ldi	r30, 0x3B	; 59
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_VidSetPinValue+0x98>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_VidSetPinValue+0x94>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	ad c0       	rjmp	.+346    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTB:
		    	        	CLR_BIT(PORTB, Copy_U8pin);
    104a:	a8 e3       	ldi	r26, 0x38	; 56
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e3       	ldi	r30, 0x38	; 56
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_VidSetPinValue+0xc2>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_VidSetPinValue+0xbe>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	98 c0       	rjmp	.+304    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTC:
		    	        	CLR_BIT(PORTC, Copy_U8pin);
    1074:	a5 e3       	ldi	r26, 0x35	; 53
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e3       	ldi	r30, 0x35	; 53
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_VidSetPinValue+0xec>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_VidSetPinValue+0xe8>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	83 c0       	rjmp	.+262    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTD:
		    	        	CLR_BIT(PORTD, Copy_U8pin);
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_VidSetPinValue+0x116>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_VidSetPinValue+0x112>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	6e c0       	rjmp	.+220    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	        	break;


		    	   } break;
		       case DIO_HIGH:
		    	   switch (Copy_U8Port)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	49 f1       	breq	.+82     	; 0x112e <DIO_VidSetPinValue+0x188>
    10dc:	2c 81       	ldd	r18, Y+4	; 0x04
    10de:	3d 81       	ldd	r19, Y+5	; 0x05
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <DIO_VidSetPinValue+0x14a>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	61 f0       	breq	.+24     	; 0x1106 <DIO_VidSetPinValue+0x160>
    10ee:	5a c0       	rjmp	.+180    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	71 f1       	breq	.+92     	; 0x1156 <DIO_VidSetPinValue+0x1b0>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	91 05       	cpc	r25, r1
    1102:	e9 f1       	breq	.+122    	; 0x117e <DIO_VidSetPinValue+0x1d8>
    1104:	4f c0       	rjmp	.+158    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	  	  {
		    	  	    case DIO_PORTA :
		    	            SET_BIT(PORTA, Copy_U8pin);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_VidSetPinValue+0x17e>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_VidSetPinValue+0x17a>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	3b c0       	rjmp	.+118    	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
	 	    	            break;

		    	  	    case DIO_PORTB:
		    	  	    	SET_BIT(PORTB, Copy_U8pin);
    112e:	a8 e3       	ldi	r26, 0x38	; 56
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e8 e3       	ldi	r30, 0x38	; 56
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_VidSetPinValue+0x1a6>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_VidSetPinValue+0x1a2>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	27 c0       	rjmp	.+78     	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	  	    	break;

		    	  	   case DIO_PORTC:
		    	  	    	 SET_BIT(PORTC, Copy_U8pin);
    1156:	a5 e3       	ldi	r26, 0x35	; 53
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_VidSetPinValue+0x1ce>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_VidSetPinValue+0x1ca>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <DIO_VidSetPinValue+0x1fe>
		    	  	    	 break;

		    	  	    case DIO_PORTD:
		    	  	    	 SET_BIT(PORTD, Copy_U8pin);
    117e:	a2 e3       	ldi	r26, 0x32	; 50
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_VidSetPinValue+0x1f6>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_VidSetPinValue+0x1f2>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24

		    	  	  }break;


		}
}
    11a4:	29 96       	adiw	r28, 0x09	; 9
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <DIO_VidPortDirection>:
/*Function to set port Direction*/
void DIO_VidPortDirection (u8 Copy_U8Port , u8  Copy_U8Direction)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <DIO_VidPortDirection+0x6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <DIO_VidPortDirection+0x8>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	6a 83       	std	Y+2, r22	; 0x02

     switch (Copy_U8Port)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3c 83       	std	Y+4, r19	; 0x04
    11ce:	2b 83       	std	Y+3, r18	; 0x03
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	d1 f0       	breq	.+52     	; 0x120e <DIO_VidPortDirection+0x58>
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	3c 81       	ldd	r19, Y+4	; 0x04
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_VidPortDirection+0x38>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <DIO_VidPortDirection+0x4e>
    11ec:	1e c0       	rjmp	.+60     	; 0x122a <DIO_VidPortDirection+0x74>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	81 f0       	breq	.+32     	; 0x1218 <DIO_VidPortDirection+0x62>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	81 f0       	breq	.+32     	; 0x1222 <DIO_VidPortDirection+0x6c>
    1202:	13 c0       	rjmp	.+38     	; 0x122a <DIO_VidPortDirection+0x74>
		   {
		      case DIO_PORTA :
		        	DDRA = Copy_U8Direction;
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
    120c:	0e c0       	rjmp	.+28     	; 0x122a <DIO_VidPortDirection+0x74>
		           	break;

	   	      case DIO_PORTB:
		    	  DDRB = Copy_U8Direction;
    120e:	e7 e3       	ldi	r30, 0x37	; 55
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	80 83       	st	Z, r24
    1216:	09 c0       	rjmp	.+18     	; 0x122a <DIO_VidPortDirection+0x74>
		    	  break;

		      case DIO_PORTC:
		    	   DDRC = Copy_U8Direction;
    1218:	e4 e3       	ldi	r30, 0x34	; 52
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	04 c0       	rjmp	.+8      	; 0x122a <DIO_VidPortDirection+0x74>
		    	    break;

		      case DIO_PORTD:
		    	   DDRD = Copy_U8Direction;
    1222:	e1 e3       	ldi	r30, 0x31	; 49
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
		    	    break;


		    	   }
		}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_VidPortValue>:


/*Function to set port value*/
void DIO_VidPortValue (u8 Copy_U8Port , u8  Copy_U8Value)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_VidPortValue+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_VidPortValue+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8Port)
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3c 83       	std	Y+4, r19	; 0x04
    1250:	2b 83       	std	Y+3, r18	; 0x03
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	d1 f0       	breq	.+52     	; 0x1290 <DIO_VidPortValue+0x58>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	2c f4       	brge	.+10     	; 0x1270 <DIO_VidPortValue+0x38>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	61 f0       	breq	.+24     	; 0x1286 <DIO_VidPortValue+0x4e>
    126e:	1e c0       	rjmp	.+60     	; 0x12ac <DIO_VidPortValue+0x74>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	81 f0       	breq	.+32     	; 0x129a <DIO_VidPortValue+0x62>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	81 f0       	breq	.+32     	; 0x12a4 <DIO_VidPortValue+0x6c>
    1284:	13 c0       	rjmp	.+38     	; 0x12ac <DIO_VidPortValue+0x74>
	{
	          case DIO_PORTA :
			    	PORTA = Copy_U8Value;
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <DIO_VidPortValue+0x74>
		 	        break;

		      case DIO_PORTB:
			    	PORTB = Copy_U8Value;
    1290:	e8 e3       	ldi	r30, 0x38	; 56
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <DIO_VidPortValue+0x74>
			    	 break;

			  case DIO_PORTC:
			       PORTC = Copy_U8Value;
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	80 83       	st	Z, r24
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <DIO_VidPortValue+0x74>
			    	  break;

			  case DIO_PORTD:
			    	PORTD = Copy_U8Value;
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	80 83       	st	Z, r24
			    	   break;

	}

}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_VidTogglePinValue>:

/*Function to set port Direction*/
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8  Copy_U8Pin)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_VidTogglePinValue+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DIO_VidTogglePinValue+0x8>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8Port)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3c 83       	std	Y+4, r19	; 0x04
    12d2:	2b 83       	std	Y+3, r18	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	49 f1       	breq	.+82     	; 0x1330 <DIO_VidTogglePinValue+0x76>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <DIO_VidTogglePinValue+0x38>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	61 f0       	breq	.+24     	; 0x1308 <DIO_VidTogglePinValue+0x4e>
    12f0:	5a c0       	rjmp	.+180    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	71 f1       	breq	.+92     	; 0x1358 <DIO_VidTogglePinValue+0x9e>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	e9 f1       	breq	.+122    	; 0x1380 <DIO_VidTogglePinValue+0xc6>
    1306:	4f c0       	rjmp	.+158    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
	{
               	 case DIO_PORTA :
               		TOGGLE_BIT(PORTA,Copy_U8Pin);
    1308:	ab e3       	ldi	r26, 0x3B	; 59
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_VidTogglePinValue+0x6c>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_VidTogglePinValue+0x68>
    132a:	84 27       	eor	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	3b c0       	rjmp	.+118    	; 0x13a6 <DIO_VidTogglePinValue+0xec>
					break;

			      case DIO_PORTB:
			    	  TOGGLE_BIT(PORTB,Copy_U8Pin);
    1330:	a8 e3       	ldi	r26, 0x38	; 56
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 e3       	ldi	r30, 0x38	; 56
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_VidTogglePinValue+0x94>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_VidTogglePinValue+0x90>
    1352:	84 27       	eor	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	27 c0       	rjmp	.+78     	; 0x13a6 <DIO_VidTogglePinValue+0xec>
				    	 break;

				  case DIO_PORTC:
					  TOGGLE_BIT(PORTC,Copy_U8Pin);
    1358:	a5 e3       	ldi	r26, 0x35	; 53
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e5 e3       	ldi	r30, 0x35	; 53
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_VidTogglePinValue+0xbc>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_VidTogglePinValue+0xb8>
    137a:	84 27       	eor	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <DIO_VidTogglePinValue+0xec>
				    	  break;

				  case DIO_PORTD:
					  TOGGLE_BIT(PORTD,Copy_U8Pin);
    1380:	a2 e3       	ldi	r26, 0x32	; 50
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e2 e3       	ldi	r30, 0x32	; 50
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_VidTogglePinValue+0xe4>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_VidTogglePinValue+0xe0>
    13a2:	84 27       	eor	r24, r20
    13a4:	8c 93       	st	X, r24
				    	   break;
	}

}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <DIO_U8GetPinValue>:

/*function to get state of input value*/
u8 DIO_U8GetPinValue(u8 Copy_U8Port,u8  Copy_U8Pin)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_U8GetPinValue+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DIO_U8GetPinValue+0x8>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 read;
	switch (Copy_U8Port)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	4c 81       	ldd	r20, Y+4	; 0x04
    13d2:	5d 81       	ldd	r21, Y+5	; 0x05
    13d4:	41 30       	cpi	r20, 0x01	; 1
    13d6:	51 05       	cpc	r21, r1
    13d8:	41 f1       	breq	.+80     	; 0x142a <DIO_U8GetPinValue+0x76>
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	91 05       	cpc	r25, r1
    13e2:	34 f4       	brge	.+12     	; 0x13f0 <DIO_U8GetPinValue+0x3c>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	21 15       	cp	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	61 f0       	breq	.+24     	; 0x1406 <DIO_U8GetPinValue+0x52>
    13ee:	52 c0       	rjmp	.+164    	; 0x1494 <DIO_U8GetPinValue+0xe0>
    13f0:	4c 81       	ldd	r20, Y+4	; 0x04
    13f2:	5d 81       	ldd	r21, Y+5	; 0x05
    13f4:	42 30       	cpi	r20, 0x02	; 2
    13f6:	51 05       	cpc	r21, r1
    13f8:	51 f1       	breq	.+84     	; 0x144e <DIO_U8GetPinValue+0x9a>
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	91 05       	cpc	r25, r1
    1402:	b9 f1       	breq	.+110    	; 0x1472 <DIO_U8GetPinValue+0xbe>
    1404:	47 c0       	rjmp	.+142    	; 0x1494 <DIO_U8GetPinValue+0xe0>
		{
	               	 case DIO_PINA :
	               		read= GET_BIT(PINA,Copy_U8Pin);
    1406:	e9 e3       	ldi	r30, 0x39	; 57
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_U8GetPinValue+0x6a>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_U8GetPinValue+0x66>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	35 c0       	rjmp	.+106    	; 0x1494 <DIO_U8GetPinValue+0xe0>
						break;

				      case DIO_PINB:
				    	  read= GET_BIT(PINB,Copy_U8Pin);
    142a:	e6 e3       	ldi	r30, 0x36	; 54
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_U8GetPinValue+0x8e>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_U8GetPinValue+0x8a>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	23 c0       	rjmp	.+70     	; 0x1494 <DIO_U8GetPinValue+0xe0>
					    	 break;

					  case DIO_PINC:
						  read=GET_BIT(PINC,Copy_U8Pin);
    144e:	e3 e3       	ldi	r30, 0x33	; 51
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_U8GetPinValue+0xb2>
    1462:	55 95       	asr	r21
    1464:	47 95       	ror	r20
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_U8GetPinValue+0xae>
    146a:	ca 01       	movw	r24, r20
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <DIO_U8GetPinValue+0xe0>
					    	  break;

					  case DIO_PIND:
						  read= GET_BIT(PIND,Copy_U8Pin);
    1472:	e0 e3       	ldi	r30, 0x30	; 48
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_U8GetPinValue+0xd6>
    1486:	55 95       	asr	r21
    1488:	47 95       	ror	r20
    148a:	8a 95       	dec	r24
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_U8GetPinValue+0xd2>
    148e:	ca 01       	movw	r24, r20
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
					    	   break;
		}
	return read;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <EEROM>:
#include "EEROM.h"



void EEROM(void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	a8 97       	sbiw	r28, 0x28	; 40
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
	u16 ValidPassword=0;
    14ba:	1c a2       	std	Y+36, r1	; 0x24
    14bc:	1b a2       	std	Y+35, r1	; 0x23
	u8 pass[4];
	if ( (EEPROM_Read_Byte(0X100)!=0x01) ){
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 bd 0b 	call	0x177a	; 0x177a <EEPROM_Read_Byte>
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <EEROM+0x26>
    14ca:	22 c1       	rjmp	.+580    	; 0x1710 <EEROM+0x26a>
			u8	key;
			for(int i =0 ;i<4;i++)
    14cc:	19 a2       	std	Y+33, r1	; 0x21
    14ce:	18 a2       	std	Y+32, r1	; 0x20
    14d0:	9f c0       	rjmp	.+318    	; 0x1610 <EEROM+0x16a>
			{
				key = KPD_u8GetPressedKey();
    14d2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <KPD_u8GetPressedKey>
    14d6:	8a a3       	std	Y+34, r24	; 0x22
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	a0 e2       	ldi	r26, 0x20	; 32
    14de:	b1 e4       	ldi	r27, 0x41	; 65
    14e0:	89 8f       	std	Y+25, r24	; 0x19
    14e2:	9a 8f       	std	Y+26, r25	; 0x1a
    14e4:	ab 8f       	std	Y+27, r26	; 0x1b
    14e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e8:	69 8d       	ldd	r22, Y+25	; 0x19
    14ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a ef       	ldi	r20, 0xFA	; 250
    14f6:	54 e4       	ldi	r21, 0x44	; 68
    14f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	8d 8b       	std	Y+21, r24	; 0x15
    1502:	9e 8b       	std	Y+22, r25	; 0x16
    1504:	af 8b       	std	Y+23, r26	; 0x17
    1506:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1508:	6d 89       	ldd	r22, Y+21	; 0x15
    150a:	7e 89       	ldd	r23, Y+22	; 0x16
    150c:	8f 89       	ldd	r24, Y+23	; 0x17
    150e:	98 8d       	ldd	r25, Y+24	; 0x18
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e8       	ldi	r20, 0x80	; 128
    1516:	5f e3       	ldi	r21, 0x3F	; 63
    1518:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    151c:	88 23       	and	r24, r24
    151e:	2c f4       	brge	.+10     	; 0x152a <EEROM+0x84>
		__ticks = 1;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9c 8b       	std	Y+20, r25	; 0x14
    1526:	8b 8b       	std	Y+19, r24	; 0x13
    1528:	3f c0       	rjmp	.+126    	; 0x15a8 <EEROM+0x102>
	else if (__tmp > 65535)
    152a:	6d 89       	ldd	r22, Y+21	; 0x15
    152c:	7e 89       	ldd	r23, Y+22	; 0x16
    152e:	8f 89       	ldd	r24, Y+23	; 0x17
    1530:	98 8d       	ldd	r25, Y+24	; 0x18
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	3f ef       	ldi	r19, 0xFF	; 255
    1536:	4f e7       	ldi	r20, 0x7F	; 127
    1538:	57 e4       	ldi	r21, 0x47	; 71
    153a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    153e:	18 16       	cp	r1, r24
    1540:	4c f5       	brge	.+82     	; 0x1594 <EEROM+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1542:	69 8d       	ldd	r22, Y+25	; 0x19
    1544:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e2       	ldi	r20, 0x20	; 32
    1550:	51 e4       	ldi	r21, 0x41	; 65
    1552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	bc 01       	movw	r22, r24
    155c:	cd 01       	movw	r24, r26
    155e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	9c 8b       	std	Y+20, r25	; 0x14
    1568:	8b 8b       	std	Y+19, r24	; 0x13
    156a:	0f c0       	rjmp	.+30     	; 0x158a <EEROM+0xe4>
    156c:	88 ec       	ldi	r24, 0xC8	; 200
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1574:	89 89       	ldd	r24, Y+17	; 0x11
    1576:	9a 89       	ldd	r25, Y+18	; 0x12
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <EEROM+0xd2>
    157c:	9a 8b       	std	Y+18, r25	; 0x12
    157e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1580:	8b 89       	ldd	r24, Y+19	; 0x13
    1582:	9c 89       	ldd	r25, Y+20	; 0x14
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	9c 8b       	std	Y+20, r25	; 0x14
    1588:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158a:	8b 89       	ldd	r24, Y+19	; 0x13
    158c:	9c 89       	ldd	r25, Y+20	; 0x14
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	69 f7       	brne	.-38     	; 0x156c <EEROM+0xc6>
    1592:	14 c0       	rjmp	.+40     	; 0x15bc <EEROM+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1594:	6d 89       	ldd	r22, Y+21	; 0x15
    1596:	7e 89       	ldd	r23, Y+22	; 0x16
    1598:	8f 89       	ldd	r24, Y+23	; 0x17
    159a:	98 8d       	ldd	r25, Y+24	; 0x18
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9c 8b       	std	Y+20, r25	; 0x14
    15a6:	8b 8b       	std	Y+19, r24	; 0x13
    15a8:	8b 89       	ldd	r24, Y+19	; 0x13
    15aa:	9c 89       	ldd	r25, Y+20	; 0x14
    15ac:	98 8b       	std	Y+16, r25	; 0x10
    15ae:	8f 87       	std	Y+15, r24	; 0x0f
    15b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b2:	98 89       	ldd	r25, Y+16	; 0x10
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <EEROM+0x10e>
    15b8:	98 8b       	std	Y+16, r25	; 0x10
    15ba:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);

						LCD_vidSendChar(key);
    15bc:	8a a1       	ldd	r24, Y+34	; 0x22
    15be:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <LCD_vidSendChar>
						key = getnum(key);
    15c2:	8a a1       	ldd	r24, Y+34	; 0x22
    15c4:	0e 94 c9 19 	call	0x3392	; 0x3392 <getnum>
    15c8:	8a a3       	std	Y+34, r24	; 0x22
						EEPROM_Write_Byte(0X102+i,key);
    15ca:	88 a1       	ldd	r24, Y+32	; 0x20
    15cc:	99 a1       	ldd	r25, Y+33	; 0x21
    15ce:	8e 5f       	subi	r24, 0xFE	; 254
    15d0:	9e 4f       	sbci	r25, 0xFE	; 254
    15d2:	6a a1       	ldd	r22, Y+34	; 0x22
    15d4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <EEPROM_Write_Byte>
						//pass[i]=key;
						ValidPassword=ValidPassword*10+key;
    15d8:	8b a1       	ldd	r24, Y+35	; 0x23
    15da:	9c a1       	ldd	r25, Y+36	; 0x24
    15dc:	9c 01       	movw	r18, r24
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	c9 01       	movw	r24, r18
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	28 0f       	add	r18, r24
    15ee:	39 1f       	adc	r19, r25
    15f0:	8a a1       	ldd	r24, Y+34	; 0x22
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	9c a3       	std	Y+36, r25	; 0x24
    15fc:	8b a3       	std	Y+35, r24	; 0x23
						 SetPassword(ValidPassword);
    15fe:	8b a1       	ldd	r24, Y+35	; 0x23
    1600:	9c a1       	ldd	r25, Y+36	; 0x24
    1602:	0e 94 8b 19 	call	0x3316	; 0x3316 <SetPassword>
{
	u16 ValidPassword=0;
	u8 pass[4];
	if ( (EEPROM_Read_Byte(0X100)!=0x01) ){
			u8	key;
			for(int i =0 ;i<4;i++)
    1606:	88 a1       	ldd	r24, Y+32	; 0x20
    1608:	99 a1       	ldd	r25, Y+33	; 0x21
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	99 a3       	std	Y+33, r25	; 0x21
    160e:	88 a3       	std	Y+32, r24	; 0x20
    1610:	88 a1       	ldd	r24, Y+32	; 0x20
    1612:	99 a1       	ldd	r25, Y+33	; 0x21
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	91 05       	cpc	r25, r1
    1618:	0c f4       	brge	.+2      	; 0x161c <EEROM+0x176>
    161a:	5b cf       	rjmp	.-330    	; 0x14d2 <EEROM+0x2c>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a8 e4       	ldi	r26, 0x48	; 72
    1622:	b2 e4       	ldi	r27, 0x42	; 66
    1624:	8b 87       	std	Y+11, r24	; 0x0b
    1626:	9c 87       	std	Y+12, r25	; 0x0c
    1628:	ad 87       	std	Y+13, r26	; 0x0d
    162a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162c:	6b 85       	ldd	r22, Y+11	; 0x0b
    162e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a ef       	ldi	r20, 0xFA	; 250
    163a:	54 e4       	ldi	r21, 0x44	; 68
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8f 83       	std	Y+7, r24	; 0x07
    1646:	98 87       	std	Y+8, r25	; 0x08
    1648:	a9 87       	std	Y+9, r26	; 0x09
    164a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164c:	6f 81       	ldd	r22, Y+7	; 0x07
    164e:	78 85       	ldd	r23, Y+8	; 0x08
    1650:	89 85       	ldd	r24, Y+9	; 0x09
    1652:	9a 85       	ldd	r25, Y+10	; 0x0a
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1660:	88 23       	and	r24, r24
    1662:	2c f4       	brge	.+10     	; 0x166e <EEROM+0x1c8>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9e 83       	std	Y+6, r25	; 0x06
    166a:	8d 83       	std	Y+5, r24	; 0x05
    166c:	3f c0       	rjmp	.+126    	; 0x16ec <EEROM+0x246>
	else if (__tmp > 65535)
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	4c f5       	brge	.+82     	; 0x16d8 <EEROM+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <EEROM+0x228>
    16b0:	88 ec       	ldi	r24, 0xC8	; 200
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	8b 83       	std	Y+3, r24	; 0x03
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <EEROM+0x216>
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	69 f7       	brne	.-38     	; 0x16b0 <EEROM+0x20a>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <EEROM+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <EEROM+0x252>
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
				}
			_delay_ms(50);

			//EEPROM_vWriteBlockToAddress(0X102,pass,4);//save the entire password as a block to the EEPROM
			//EEPROM_vWriteByteToAddress(0X100,0x01);//write the status of pass as it is set
			EEPROM_Write_Byte(0X100,0x01);//write the status of pass as it is set
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	91 e0       	ldi	r25, 0x01	; 1
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <EEPROM_Write_Byte>
			MessageSavePassword();
    170a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <MessageSavePassword>
    170e:	2c c0       	rjmp	.+88     	; 0x1768 <EEROM+0x2c2>

	}else{
	 //ValidPassword= EEPROM_vReadBlockFromAddress(0X102,4);//read the stored pass from the EEPROM
		u8 key=0;
    1710:	1f 8e       	std	Y+31, r1	; 0x1f
		for(int i =0 ;i<4;i++)
    1712:	1e 8e       	std	Y+30, r1	; 0x1e
    1714:	1d 8e       	std	Y+29, r1	; 0x1d
    1716:	1f c0       	rjmp	.+62     	; 0x1756 <EEROM+0x2b0>
					{
					key=EEPROM_Read_Byte(0X102+i);
    1718:	8d 8d       	ldd	r24, Y+29	; 0x1d
    171a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    171c:	8e 5f       	subi	r24, 0xFE	; 254
    171e:	9e 4f       	sbci	r25, 0xFE	; 254
    1720:	0e 94 bd 0b 	call	0x177a	; 0x177a <EEPROM_Read_Byte>
    1724:	8f 8f       	std	Y+31, r24	; 0x1f
					//pass[i]=key;
					ValidPassword=ValidPassword*10+key;
    1726:	8b a1       	ldd	r24, Y+35	; 0x23
    1728:	9c a1       	ldd	r25, Y+36	; 0x24
    172a:	9c 01       	movw	r18, r24
    172c:	22 0f       	add	r18, r18
    172e:	33 1f       	adc	r19, r19
    1730:	c9 01       	movw	r24, r18
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	28 0f       	add	r18, r24
    173c:	39 1f       	adc	r19, r25
    173e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	82 0f       	add	r24, r18
    1746:	93 1f       	adc	r25, r19
    1748:	9c a3       	std	Y+36, r25	; 0x24
    174a:	8b a3       	std	Y+35, r24	; 0x23
			MessageSavePassword();

	}else{
	 //ValidPassword= EEPROM_vReadBlockFromAddress(0X102,4);//read the stored pass from the EEPROM
		u8 key=0;
		for(int i =0 ;i<4;i++)
    174c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	9e 8f       	std	Y+30, r25	; 0x1e
    1754:	8d 8f       	std	Y+29, r24	; 0x1d
    1756:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1758:	9e 8d       	ldd	r25, Y+30	; 0x1e
    175a:	84 30       	cpi	r24, 0x04	; 4
    175c:	91 05       	cpc	r25, r1
    175e:	e4 f2       	brlt	.-72     	; 0x1718 <EEROM+0x272>
					//pass[i]=key;
					ValidPassword=ValidPassword*10+key;

						}

		SetPassword(ValidPassword);
    1760:	8b a1       	ldd	r24, Y+35	; 0x23
    1762:	9c a1       	ldd	r25, Y+36	; 0x24
    1764:	0e 94 8b 19 	call	0x3316	; 0x3316 <SetPassword>
	}
}
    1768:	a8 96       	adiw	r28, 0x28	; 40
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <EEPROM_Read_Byte>:




u8 EEPROM_Read_Byte( u16 Address)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <EEPROM_Read_Byte+0x6>
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01

	while(EECR & (1<<EEWE));
    1788:	ec e3       	ldi	r30, 0x3C	; 60
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	88 2f       	mov	r24, r24
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	82 70       	andi	r24, 0x02	; 2
    1794:	90 70       	andi	r25, 0x00	; 0
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	b9 f7       	brne	.-18     	; 0x1788 <EEPROM_Read_Byte+0xe>


	EEAR = Address;
    179a:	ee e3       	ldi	r30, 0x3E	; 62
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	80 83       	st	Z, r24

	EECR |= (1<<EERE);
    17a6:	ac e3       	ldi	r26, 0x3C	; 60
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ec e3       	ldi	r30, 0x3C	; 60
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	81 60       	ori	r24, 0x01	; 1
    17b2:	8c 93       	st	X, r24


	return EEDR;
    17b4:	ed e3       	ldi	r30, 0x3D	; 61
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z

}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <EEPROM_Write_Byte>:


void EEPROM_Write_Byte( u16 Address, u8 Value)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <EEPROM_Write_Byte+0x6>
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write process*/
	while ( EECR & (1<<EEWE));
    17d6:	ec e3       	ldi	r30, 0x3C	; 60
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	82 70       	andi	r24, 0x02	; 2
    17e2:	90 70       	andi	r25, 0x00	; 0
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	b9 f7       	brne	.-18     	; 0x17d6 <EEPROM_Write_Byte+0x12>
	/* Set up address register */
	EEAR = Address;
    17e8:	ee e3       	ldi	r30, 0x3E	; 62
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
	EECR |= (1<<EERE);
    17f4:	ac e3       	ldi	r26, 0x3C	; 60
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ec e3       	ldi	r30, 0x3C	; 60
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	81 60       	ori	r24, 0x01	; 1
    1800:	8c 93       	st	X, r24
	/* Write logical one to EEMWE */
	if(EEDR!=Value){
    1802:	ed e3       	ldi	r30, 0x3D	; 61
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	90 81       	ld	r25, Z
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	98 17       	cp	r25, r24
    180c:	79 f0       	breq	.+30     	; 0x182c <EEPROM_Write_Byte+0x68>
			EEDR = Value;
    180e:	ed e3       	ldi	r30, 0x3D	; 61
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	80 83       	st	Z, r24
			EECR |= (1<<EEMWE);
    1816:	ac e3       	ldi	r26, 0x3C	; 60
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ec e3       	ldi	r30, 0x3C	; 60
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	8c 93       	st	X, r24
			EECR=0x03;}			/* Start eeprom write by setting EEWE */
    1824:	ec e3       	ldi	r30, 0x3C	; 60
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	83 e0       	ldi	r24, 0x03	; 3
    182a:	80 83       	st	Z, r24


}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <KPAD_VidInint>:
const u8 arr[KPAD_RowNum][KPAD_ColNum]= {{'1','2','3'},
			                             {'4','5','6'},
			                             {'7','8','9'},
								         {'*','0','#'}};
void KPAD_VidInint()
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	DIO_VidPortDirection(KPAD_PORT, KPAD_ROWS_COL_PINS );
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	6f e0       	ldi	r22, 0x0F	; 15
    1844:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_VidPortDirection>
	//DDRx = 0b11110000 , (most bits are columns) , (least bits are Rows)
	DIO_VidPortValue(KPAD_PORT,KPAD_ROWS_COL_INIT);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	6f ef       	ldi	r22, 0xFF	; 255
    184c:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidPortValue>
	//port = 0b11111111, most bits (o/p high), least bits (pull up)
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void){
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	62 97       	sbiw	r28, 0x12	; 18
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61


	u8 Local_U8ColCounter ;
    u8 Local_U8RowCounter ;
	u8 Local_U8Pressed ;
	u8 Local_u8ReturnValue = 20 ;
    186a:	84 e1       	ldi	r24, 0x14	; 20
    186c:	8f 87       	std	Y+15, r24	; 0x0f
	while(1){
	for (Local_U8ColCounter =0 ; Local_U8ColCounter<KPAD_ColNum ; Local_U8ColCounter++)
    186e:	1a 8a       	std	Y+18, r1	; 0x12
    1870:	c1 c0       	rjmp	.+386    	; 0x19f4 <KPD_u8GetPressedKey+0x19e>
	{
		 DIO_VidSetPinValue(KPAD_PORT,Local_U8ColCounter, DIO_LOW);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	6a 89       	ldd	r22, Y+18	; 0x12
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

		    for(Local_U8RowCounter=0; Local_U8RowCounter < KPAD_RowNum; Local_U8RowCounter++ )
    187c:	19 8a       	std	Y+17, r1	; 0x11
    187e:	ae c0       	rjmp	.+348    	; 0x19dc <KPD_u8GetPressedKey+0x186>
		    {//loop for rows
		    	Local_U8Pressed= DIO_U8GetPinValue(KPAD_PORT,Local_U8RowCounter+4);
    1880:	89 89       	ldd	r24, Y+17	; 0x11
    1882:	98 2f       	mov	r25, r24
    1884:	9c 5f       	subi	r25, 0xFC	; 252
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	69 2f       	mov	r22, r25
    188a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_U8GetPinValue>
    188e:	88 8b       	std	Y+16, r24	; 0x10

		        /* CHECK IF SWITCH IS PRESSED */
		      if( Local_U8Pressed == DIO_LOW)
    1890:	88 89       	ldd	r24, Y+16	; 0x10
    1892:	88 23       	and	r24, r24
    1894:	09 f0       	breq	.+2      	; 0x1898 <KPD_u8GetPressedKey+0x42>
    1896:	9f c0       	rjmp	.+318    	; 0x19d6 <KPD_u8GetPressedKey+0x180>
		      {
		    	  Local_u8ReturnValue = arr[Local_U8RowCounter][Local_U8ColCounter];
    1898:	89 89       	ldd	r24, Y+17	; 0x11
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	8a 89       	ldd	r24, Y+18	; 0x12
    18a0:	48 2f       	mov	r20, r24
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	c9 01       	movw	r24, r18
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	82 0f       	add	r24, r18
    18ac:	93 1f       	adc	r25, r19
    18ae:	84 0f       	add	r24, r20
    18b0:	95 1f       	adc	r25, r21
    18b2:	fc 01       	movw	r30, r24
    18b4:	e5 58       	subi	r30, 0x85	; 133
    18b6:	fe 4f       	sbci	r31, 0xFE	; 254
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 87       	std	Y+15, r24	; 0x0f
    18bc:	08 c0       	rjmp	.+16     	; 0x18ce <KPD_u8GetPressedKey+0x78>
		          /* Polling ( wait till button is released ) */
		        while(Local_U8Pressed == DIO_LOW  )
		        {
			    	Local_U8Pressed= DIO_U8GetPinValue(KPAD_PORT,Local_U8RowCounter+4);
    18be:	89 89       	ldd	r24, Y+17	; 0x11
    18c0:	98 2f       	mov	r25, r24
    18c2:	9c 5f       	subi	r25, 0xFC	; 252
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	69 2f       	mov	r22, r25
    18c8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DIO_U8GetPinValue>
    18cc:	88 8b       	std	Y+16, r24	; 0x10
		        /* CHECK IF SWITCH IS PRESSED */
		      if( Local_U8Pressed == DIO_LOW)
		      {
		    	  Local_u8ReturnValue = arr[Local_U8RowCounter][Local_U8ColCounter];
		          /* Polling ( wait till button is released ) */
		        while(Local_U8Pressed == DIO_LOW  )
    18ce:	88 89       	ldd	r24, Y+16	; 0x10
    18d0:	88 23       	and	r24, r24
    18d2:	a9 f3       	breq	.-22     	; 0x18be <KPD_u8GetPressedKey+0x68>
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a0 e2       	ldi	r26, 0x20	; 32
    18da:	b1 e4       	ldi	r27, 0x41	; 65
    18dc:	8b 87       	std	Y+11, r24	; 0x0b
    18de:	9c 87       	std	Y+12, r25	; 0x0c
    18e0:	ad 87       	std	Y+13, r26	; 0x0d
    18e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4a ef       	ldi	r20, 0xFA	; 250
    18f2:	54 e4       	ldi	r21, 0x44	; 68
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	8f 83       	std	Y+7, r24	; 0x07
    18fe:	98 87       	std	Y+8, r25	; 0x08
    1900:	a9 87       	std	Y+9, r26	; 0x09
    1902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1904:	6f 81       	ldd	r22, Y+7	; 0x07
    1906:	78 85       	ldd	r23, Y+8	; 0x08
    1908:	89 85       	ldd	r24, Y+9	; 0x09
    190a:	9a 85       	ldd	r25, Y+10	; 0x0a
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1918:	88 23       	and	r24, r24
    191a:	2c f4       	brge	.+10     	; 0x1926 <KPD_u8GetPressedKey+0xd0>
		__ticks = 1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	3f c0       	rjmp	.+126    	; 0x19a4 <KPD_u8GetPressedKey+0x14e>
	else if (__tmp > 65535)
    1926:	6f 81       	ldd	r22, Y+7	; 0x07
    1928:	78 85       	ldd	r23, Y+8	; 0x08
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	3f ef       	ldi	r19, 0xFF	; 255
    1932:	4f e7       	ldi	r20, 0x7F	; 127
    1934:	57 e4       	ldi	r21, 0x47	; 71
    1936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    193a:	18 16       	cp	r1, r24
    193c:	4c f5       	brge	.+82     	; 0x1990 <KPD_u8GetPressedKey+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1940:	7c 85       	ldd	r23, Y+12	; 0x0c
    1942:	8d 85       	ldd	r24, Y+13	; 0x0d
    1944:	9e 85       	ldd	r25, Y+14	; 0x0e
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e2       	ldi	r20, 0x20	; 32
    194c:	51 e4       	ldi	r21, 0x41	; 65
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <KPD_u8GetPressedKey+0x130>
    1968:	88 ec       	ldi	r24, 0xC8	; 200
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	8b 83       	std	Y+3, r24	; 0x03
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <KPD_u8GetPressedKey+0x11e>
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	69 f7       	brne	.-38     	; 0x1968 <KPD_u8GetPressedKey+0x112>
    198e:	14 c0       	rjmp	.+40     	; 0x19b8 <KPD_u8GetPressedKey+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1990:	6f 81       	ldd	r22, Y+7	; 0x07
    1992:	78 85       	ldd	r23, Y+8	; 0x08
    1994:	89 85       	ldd	r24, Y+9	; 0x09
    1996:	9a 85       	ldd	r25, Y+10	; 0x0a
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <KPD_u8GetPressedKey+0x15a>
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
		        {
			    	Local_U8Pressed= DIO_U8GetPinValue(KPAD_PORT,Local_U8RowCounter+4);
		        }
		        _delay_ms(10);
		        DIO_VidSetPinValue(KPAD_PORT, Local_U8ColCounter, DIO_HIGH);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	6a 89       	ldd	r22, Y+18	; 0x12
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
		        return Local_u8ReturnValue;
    19c2:	8f 85       	ldd	r24, Y+15	; 0x0f
		      /* DEACTIVATE CURRENT COLUMN */
		    DIO_VidSetPinValue(KPAD_PORT, Local_U8ColCounter, DIO_HIGH);
		  }
	}

}
    19c4:	62 96       	adiw	r28, 0x12	; 18
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret
	while(1){
	for (Local_U8ColCounter =0 ; Local_U8ColCounter<KPAD_ColNum ; Local_U8ColCounter++)
	{
		 DIO_VidSetPinValue(KPAD_PORT,Local_U8ColCounter, DIO_LOW);

		    for(Local_U8RowCounter=0; Local_U8RowCounter < KPAD_RowNum; Local_U8RowCounter++ )
    19d6:	89 89       	ldd	r24, Y+17	; 0x11
    19d8:	8f 5f       	subi	r24, 0xFF	; 255
    19da:	89 8b       	std	Y+17, r24	; 0x11
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
    19de:	84 30       	cpi	r24, 0x04	; 4
    19e0:	08 f4       	brcc	.+2      	; 0x19e4 <KPD_u8GetPressedKey+0x18e>
    19e2:	4e cf       	rjmp	.-356    	; 0x1880 <KPD_u8GetPressedKey+0x2a>
		        return Local_u8ReturnValue;

		      }
		    }
		      /* DEACTIVATE CURRENT COLUMN */
		    DIO_VidSetPinValue(KPAD_PORT, Local_U8ColCounter, DIO_HIGH);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	6a 89       	ldd	r22, Y+18	; 0x12
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	u8 Local_U8ColCounter ;
    u8 Local_U8RowCounter ;
	u8 Local_U8Pressed ;
	u8 Local_u8ReturnValue = 20 ;
	while(1){
	for (Local_U8ColCounter =0 ; Local_U8ColCounter<KPAD_ColNum ; Local_U8ColCounter++)
    19ee:	8a 89       	ldd	r24, Y+18	; 0x12
    19f0:	8f 5f       	subi	r24, 0xFF	; 255
    19f2:	8a 8b       	std	Y+18, r24	; 0x12
    19f4:	8a 89       	ldd	r24, Y+18	; 0x12
    19f6:	83 30       	cpi	r24, 0x03	; 3
    19f8:	08 f4       	brcc	.+2      	; 0x19fc <KPD_u8GetPressedKey+0x1a6>
    19fa:	3b cf       	rjmp	.-394    	; 0x1872 <KPD_u8GetPressedKey+0x1c>
    19fc:	38 cf       	rjmp	.-400    	; 0x186e <KPD_u8GetPressedKey+0x18>

000019fe <LCD_VidInit>:
#include "LCD.h"


void LCD_VidInit(void)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	e8 97       	sbiw	r28, 0x38	; 56
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
	//set the directions
	DIO_VidSetPinDirection(LCD_RS_PORT, LCD_RS_pin, DIO_OUTPUT );
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	41 e0       	ldi	r20, 0x01	; 1
    1a18:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RW_PORT,LCD_R_W_Pin,DIO_OUTPUT);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_ENABLE_PORT, LCD_Enable_pin, DIO_OUTPUT);
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	62 e0       	ldi	r22, 0x02	; 2
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidPortDirection(LCD_DATA_COMMAND_PORT,DIO_PORT_Setting);
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	6f ef       	ldi	r22, 0xFF	; 255
    1a34:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_VidPortDirection>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	ac e0       	ldi	r26, 0x0C	; 12
    1a3e:	b2 e4       	ldi	r27, 0x42	; 66
    1a40:	8d ab       	std	Y+53, r24	; 0x35
    1a42:	9e ab       	std	Y+54, r25	; 0x36
    1a44:	af ab       	std	Y+55, r26	; 0x37
    1a46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a48:	6d a9       	ldd	r22, Y+53	; 0x35
    1a4a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a ef       	ldi	r20, 0xFA	; 250
    1a56:	54 e4       	ldi	r21, 0x44	; 68
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	89 ab       	std	Y+49, r24	; 0x31
    1a62:	9a ab       	std	Y+50, r25	; 0x32
    1a64:	ab ab       	std	Y+51, r26	; 0x33
    1a66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a68:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <LCD_VidInit+0x8c>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	98 ab       	std	Y+48, r25	; 0x30
    1a86:	8f a7       	std	Y+47, r24	; 0x2f
    1a88:	3f c0       	rjmp	.+126    	; 0x1b08 <LCD_VidInit+0x10a>
	else if (__tmp > 65535)
    1a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a90:	9c a9       	ldd	r25, Y+52	; 0x34
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	4c f5       	brge	.+82     	; 0x1af4 <LCD_VidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa2:	6d a9       	ldd	r22, Y+53	; 0x35
    1aa4:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa6:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	98 ab       	std	Y+48, r25	; 0x30
    1ac8:	8f a7       	std	Y+47, r24	; 0x2f
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <LCD_VidInit+0xec>
    1acc:	88 ec       	ldi	r24, 0xC8	; 200
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9e a7       	std	Y+46, r25	; 0x2e
    1ad2:	8d a7       	std	Y+45, r24	; 0x2d
    1ad4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ad6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_VidInit+0xda>
    1adc:	9e a7       	std	Y+46, r25	; 0x2e
    1ade:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	98 ab       	std	Y+48, r25	; 0x30
    1ae8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aec:	98 a9       	ldd	r25, Y+48	; 0x30
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	69 f7       	brne	.-38     	; 0x1acc <LCD_VidInit+0xce>
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <LCD_VidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	69 a9       	ldd	r22, Y+49	; 0x31
    1af6:	7a a9       	ldd	r23, Y+50	; 0x32
    1af8:	8b a9       	ldd	r24, Y+51	; 0x33
    1afa:	9c a9       	ldd	r25, Y+52	; 0x34
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	98 ab       	std	Y+48, r25	; 0x30
    1b06:	8f a7       	std	Y+47, r24	; 0x2f
    1b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0c:	9c a7       	std	Y+44, r25	; 0x2c
    1b0e:	8b a7       	std	Y+43, r24	; 0x2b
    1b10:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b12:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_VidInit+0x116>
    1b18:	9c a7       	std	Y+44, r25	; 0x2c
    1b1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(35);
	// function set command
	LCD_VidSendCommand(FUNCTION_SET);
    1b1c:	88 e3       	ldi	r24, 0x38	; 56
    1b1e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_VidSendCommand>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e2       	ldi	r26, 0x20	; 32
    1b28:	b1 e4       	ldi	r27, 0x41	; 65
    1b2a:	8f a3       	std	Y+39, r24	; 0x27
    1b2c:	98 a7       	std	Y+40, r25	; 0x28
    1b2e:	a9 a7       	std	Y+41, r26	; 0x29
    1b30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6f a1       	ldd	r22, Y+39	; 0x27
    1b34:	78 a5       	ldd	r23, Y+40	; 0x28
    1b36:	89 a5       	ldd	r24, Y+41	; 0x29
    1b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8b a3       	std	Y+35, r24	; 0x23
    1b4c:	9c a3       	std	Y+36, r25	; 0x24
    1b4e:	ad a3       	std	Y+37, r26	; 0x25
    1b50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b52:	6b a1       	ldd	r22, Y+35	; 0x23
    1b54:	7c a1       	ldd	r23, Y+36	; 0x24
    1b56:	8d a1       	ldd	r24, Y+37	; 0x25
    1b58:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <LCD_VidInit+0x176>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9a a3       	std	Y+34, r25	; 0x22
    1b70:	89 a3       	std	Y+33, r24	; 0x21
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b90:	89 a5       	ldd	r24, Y+41	; 0x29
    1b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9a a3       	std	Y+34, r25	; 0x22
    1bb2:	89 a3       	std	Y+33, r24	; 0x21
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <LCD_VidInit+0x1d6>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	98 a3       	std	Y+32, r25	; 0x20
    1bbc:	8f 8f       	std	Y+31, r24	; 0x1f
    1bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_VidInit+0x1c4>
    1bc6:	98 a3       	std	Y+32, r25	; 0x20
    1bc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	89 a1       	ldd	r24, Y+33	; 0x21
    1bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9a a3       	std	Y+34, r25	; 0x22
    1bd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <LCD_VidInit+0x1b8>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6b a1       	ldd	r22, Y+35	; 0x23
    1be0:	7c a1       	ldd	r23, Y+36	; 0x24
    1be2:	8d a1       	ldd	r24, Y+37	; 0x25
    1be4:	9e a1       	ldd	r25, Y+38	; 0x26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9a a3       	std	Y+34, r25	; 0x22
    1bf0:	89 a3       	std	Y+33, r24	; 0x21
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    1bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_VidInit+0x200>
    1c02:	9e 8f       	std	Y+30, r25	; 0x1e
    1c04:	8d 8f       	std	Y+29, r24	; 0x1d
	// 0b0011NF00 while N>>line number(1) , F>>font size(0)
	_delay_ms(10);
	LCD_VidSendCommand(0b00001100);
    1c06:	8c e0       	ldi	r24, 0x0C	; 12
    1c08:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_VidSendCommand>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e2       	ldi	r26, 0x20	; 32
    1c12:	b1 e4       	ldi	r27, 0x41	; 65
    1c14:	89 8f       	std	Y+25, r24	; 0x19
    1c16:	9a 8f       	std	Y+26, r25	; 0x1a
    1c18:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8d 8b       	std	Y+21, r24	; 0x15
    1c36:	9e 8b       	std	Y+22, r25	; 0x16
    1c38:	af 8b       	std	Y+23, r26	; 0x17
    1c3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c40:	8f 89       	ldd	r24, Y+23	; 0x17
    1c42:	98 8d       	ldd	r25, Y+24	; 0x18
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <LCD_VidInit+0x260>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 8b       	std	Y+20, r25	; 0x14
    1c5a:	8b 8b       	std	Y+19, r24	; 0x13
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	69 8d       	ldd	r22, Y+25	; 0x19
    1c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_VidInit+0x2c0>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9a 8b       	std	Y+18, r25	; 0x12
    1ca6:	89 8b       	std	Y+17, r24	; 0x11
    1ca8:	89 89       	ldd	r24, Y+17	; 0x11
    1caa:	9a 89       	ldd	r25, Y+18	; 0x12
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_VidInit+0x2ae>
    1cb0:	9a 8b       	std	Y+18, r25	; 0x12
    1cb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <LCD_VidInit+0x2a2>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cce:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
    1cda:	8b 8b       	std	Y+19, r24	; 0x13
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce0:	98 8b       	std	Y+16, r25	; 0x10
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
    1ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce6:	98 89       	ldd	r25, Y+16	; 0x10
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_VidInit+0x2ea>
    1cec:	98 8b       	std	Y+16, r25	; 0x10
    1cee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_VidSendCommand(0x01);
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_VidSendCommand>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a0 e2       	ldi	r26, 0x20	; 32
    1cfc:	b1 e4       	ldi	r27, 0x41	; 65
    1cfe:	8b 87       	std	Y+11, r24	; 0x0b
    1d00:	9c 87       	std	Y+12, r25	; 0x0c
    1d02:	ad 87       	std	Y+13, r26	; 0x0d
    1d04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a ef       	ldi	r20, 0xFA	; 250
    1d14:	54 e4       	ldi	r21, 0x44	; 68
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	8f 83       	std	Y+7, r24	; 0x07
    1d20:	98 87       	std	Y+8, r25	; 0x08
    1d22:	a9 87       	std	Y+9, r26	; 0x09
    1d24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d26:	6f 81       	ldd	r22, Y+7	; 0x07
    1d28:	78 85       	ldd	r23, Y+8	; 0x08
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e8       	ldi	r20, 0x80	; 128
    1d34:	5f e3       	ldi	r21, 0x3F	; 63
    1d36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d3a:	88 23       	and	r24, r24
    1d3c:	2c f4       	brge	.+10     	; 0x1d48 <LCD_VidInit+0x34a>
		__ticks = 1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
    1d46:	3f c0       	rjmp	.+126    	; 0x1dc6 <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	3f ef       	ldi	r19, 0xFF	; 255
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	57 e4       	ldi	r21, 0x47	; 71
    1d58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	4c f5       	brge	.+82     	; 0x1db2 <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	bc 01       	movw	r22, r24
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	9e 83       	std	Y+6, r25	; 0x06
    1d86:	8d 83       	std	Y+5, r24	; 0x05
    1d88:	0f c0       	rjmp	.+30     	; 0x1da8 <LCD_VidInit+0x3aa>
    1d8a:	88 ec       	ldi	r24, 0xC8	; 200
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <LCD_VidInit+0x398>
    1d9a:	9c 83       	std	Y+4, r25	; 0x04
    1d9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	69 f7       	brne	.-38     	; 0x1d8a <LCD_VidInit+0x38c>
    1db0:	14 c0       	rjmp	.+40     	; 0x1dda <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_VidInit+0x3d4>
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_VidSendCommand(0b00000110);
    1dda:	86 e0       	ldi	r24, 0x06	; 6
    1ddc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_VidSendCommand>



}
    1de0:	e8 96       	adiw	r28, 0x38	; 56
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <LCD_VidSendCommand>:

void LCD_VidSendCommand (u8 command)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	69 97       	sbiw	r28, 0x19	; 25
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(DIO_PORTA,LCD_RS_pin,DIO_LOW);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_PORTA,LCD_R_W_Pin,DIO_LOW);
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidPortValue(LCD_DATA_COMMAND_PORT,command );
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e20:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidPortValue>
	DIO_VidSetPinValue(DIO_PORTA,LCD_Enable_pin, DIO_HIGH);
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	62 e0       	ldi	r22, 0x02	; 2
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e8       	ldi	r26, 0x80	; 128
    1e34:	bf e3       	ldi	r27, 0x3F	; 63
    1e36:	8d 8b       	std	Y+21, r24	; 0x15
    1e38:	9e 8b       	std	Y+22, r25	; 0x16
    1e3a:	af 8b       	std	Y+23, r26	; 0x17
    1e3c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	2b ea       	ldi	r18, 0xAB	; 171
    1e48:	3a ea       	ldi	r19, 0xAA	; 170
    1e4a:	4a e2       	ldi	r20, 0x2A	; 42
    1e4c:	50 e4       	ldi	r21, 0x40	; 64
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	89 8b       	std	Y+17, r24	; 0x11
    1e58:	9a 8b       	std	Y+18, r25	; 0x12
    1e5a:	ab 8b       	std	Y+19, r26	; 0x13
    1e5c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e5e:	69 89       	ldd	r22, Y+17	; 0x11
    1e60:	7a 89       	ldd	r23, Y+18	; 0x12
    1e62:	8b 89       	ldd	r24, Y+19	; 0x13
    1e64:	9c 89       	ldd	r25, Y+20	; 0x14
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	1c f4       	brge	.+6      	; 0x1e7c <LCD_VidSendCommand+0x8a>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	88 8b       	std	Y+16, r24	; 0x10
    1e7a:	91 c0       	rjmp	.+290    	; 0x1f9e <LCD_VidSendCommand+0x1ac>
	else if (__tmp > 255)
    1e7c:	69 89       	ldd	r22, Y+17	; 0x11
    1e7e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e80:	8b 89       	ldd	r24, Y+19	; 0x13
    1e82:	9c 89       	ldd	r25, Y+20	; 0x14
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	53 e4       	ldi	r21, 0x43	; 67
    1e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	0c f0       	brlt	.+2      	; 0x1e96 <LCD_VidSendCommand+0xa4>
    1e94:	7b c0       	rjmp	.+246    	; 0x1f8c <LCD_VidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e96:	6d 89       	ldd	r22, Y+21	; 0x15
    1e98:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a e7       	ldi	r20, 0x7A	; 122
    1ea4:	54 e4       	ldi	r21, 0x44	; 68
    1ea6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8c 87       	std	Y+12, r24	; 0x0c
    1eb0:	9d 87       	std	Y+13, r25	; 0x0d
    1eb2:	ae 87       	std	Y+14, r26	; 0x0e
    1eb4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eb8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ebc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4a ef       	ldi	r20, 0xFA	; 250
    1ec4:	54 e4       	ldi	r21, 0x44	; 68
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	88 87       	std	Y+8, r24	; 0x08
    1ed0:	99 87       	std	Y+9, r25	; 0x09
    1ed2:	aa 87       	std	Y+10, r26	; 0x0a
    1ed4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ed6:	68 85       	ldd	r22, Y+8	; 0x08
    1ed8:	79 85       	ldd	r23, Y+9	; 0x09
    1eda:	8a 85       	ldd	r24, Y+10	; 0x0a
    1edc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <LCD_VidSendCommand+0x106>
		__ticks = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9f 83       	std	Y+7, r25	; 0x07
    1ef4:	8e 83       	std	Y+6, r24	; 0x06
    1ef6:	3f c0       	rjmp	.+126    	; 0x1f76 <LCD_VidSendCommand+0x184>
	else if (__tmp > 65535)
    1ef8:	68 85       	ldd	r22, Y+8	; 0x08
    1efa:	79 85       	ldd	r23, Y+9	; 0x09
    1efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	4c f5       	brge	.+82     	; 0x1f62 <LCD_VidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f10:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f12:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f16:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9f 83       	std	Y+7, r25	; 0x07
    1f36:	8e 83       	std	Y+6, r24	; 0x06
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <LCD_VidSendCommand+0x166>
    1f3a:	88 ec       	ldi	r24, 0xC8	; 200
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9d 83       	std	Y+5, r25	; 0x05
    1f40:	8c 83       	std	Y+4, r24	; 0x04
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	9d 81       	ldd	r25, Y+5	; 0x05
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_VidSendCommand+0x154>
    1f4a:	9d 83       	std	Y+5, r25	; 0x05
    1f4c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f50:	9f 81       	ldd	r25, Y+7	; 0x07
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9f 83       	std	Y+7, r25	; 0x07
    1f56:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <LCD_VidSendCommand+0x148>
    1f60:	24 c0       	rjmp	.+72     	; 0x1faa <LCD_VidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	68 85       	ldd	r22, Y+8	; 0x08
    1f64:	79 85       	ldd	r23, Y+9	; 0x09
    1f66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9f 83       	std	Y+7, r25	; 0x07
    1f74:	8e 83       	std	Y+6, r24	; 0x06
    1f76:	8e 81       	ldd	r24, Y+6	; 0x06
    1f78:	9f 81       	ldd	r25, Y+7	; 0x07
    1f7a:	9b 83       	std	Y+3, r25	; 0x03
    1f7c:	8a 83       	std	Y+2, r24	; 0x02
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <LCD_VidSendCommand+0x190>
    1f86:	9b 83       	std	Y+3, r25	; 0x03
    1f88:	8a 83       	std	Y+2, r24	; 0x02
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <LCD_VidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f8c:	69 89       	ldd	r22, Y+17	; 0x11
    1f8e:	7a 89       	ldd	r23, Y+18	; 0x12
    1f90:	8b 89       	ldd	r24, Y+19	; 0x13
    1f92:	9c 89       	ldd	r25, Y+20	; 0x14
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	88 8b       	std	Y+16, r24	; 0x10
    1f9e:	88 89       	ldd	r24, Y+16	; 0x10
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	8a 95       	dec	r24
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <LCD_VidSendCommand+0x1b2>
    1fa8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(DIO_PORTA,LCD_Enable_pin, DIO_LOW);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	62 e0       	ldi	r22, 0x02	; 2
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

}
    1fb4:	69 96       	adiw	r28, 0x19	; 25
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <LCD_vidSendChar>:


void LCD_vidSendChar(u8 Data)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	69 97       	sbiw	r28, 0x19	; 25
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_pin,DIO_HIGH);
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_R_W_Pin,DIO_LOW);
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
	DIO_VidPortValue(LCD_DATA_COMMAND_PORT,Data );
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff4:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidPortValue>
	DIO_VidSetPinValue(LCD_ENABLE_PORT,LCD_Enable_pin, DIO_HIGH);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	62 e0       	ldi	r22, 0x02	; 2
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e8       	ldi	r26, 0x80	; 128
    2008:	bf e3       	ldi	r27, 0x3F	; 63
    200a:	8d 8b       	std	Y+21, r24	; 0x15
    200c:	9e 8b       	std	Y+22, r25	; 0x16
    200e:	af 8b       	std	Y+23, r26	; 0x17
    2010:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	2b ea       	ldi	r18, 0xAB	; 171
    201c:	3a ea       	ldi	r19, 0xAA	; 170
    201e:	4a e2       	ldi	r20, 0x2A	; 42
    2020:	50 e4       	ldi	r21, 0x40	; 64
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	89 8b       	std	Y+17, r24	; 0x11
    202c:	9a 8b       	std	Y+18, r25	; 0x12
    202e:	ab 8b       	std	Y+19, r26	; 0x13
    2030:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2032:	69 89       	ldd	r22, Y+17	; 0x11
    2034:	7a 89       	ldd	r23, Y+18	; 0x12
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	1c f4       	brge	.+6      	; 0x2050 <LCD_vidSendChar+0x8a>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	88 8b       	std	Y+16, r24	; 0x10
    204e:	91 c0       	rjmp	.+290    	; 0x2172 <LCD_vidSendChar+0x1ac>
	else if (__tmp > 255)
    2050:	69 89       	ldd	r22, Y+17	; 0x11
    2052:	7a 89       	ldd	r23, Y+18	; 0x12
    2054:	8b 89       	ldd	r24, Y+19	; 0x13
    2056:	9c 89       	ldd	r25, Y+20	; 0x14
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	53 e4       	ldi	r21, 0x43	; 67
    2060:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <LCD_vidSendChar+0xa4>
    2068:	7b c0       	rjmp	.+246    	; 0x2160 <LCD_vidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    206a:	6d 89       	ldd	r22, Y+21	; 0x15
    206c:	7e 89       	ldd	r23, Y+22	; 0x16
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	54 e4       	ldi	r21, 0x44	; 68
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8c 87       	std	Y+12, r24	; 0x0c
    2084:	9d 87       	std	Y+13, r25	; 0x0d
    2086:	ae 87       	std	Y+14, r26	; 0x0e
    2088:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208a:	6c 85       	ldd	r22, Y+12	; 0x0c
    208c:	7d 85       	ldd	r23, Y+13	; 0x0d
    208e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2090:	9f 85       	ldd	r25, Y+15	; 0x0f
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a ef       	ldi	r20, 0xFA	; 250
    2098:	54 e4       	ldi	r21, 0x44	; 68
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	88 87       	std	Y+8, r24	; 0x08
    20a4:	99 87       	std	Y+9, r25	; 0x09
    20a6:	aa 87       	std	Y+10, r26	; 0x0a
    20a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20aa:	68 85       	ldd	r22, Y+8	; 0x08
    20ac:	79 85       	ldd	r23, Y+9	; 0x09
    20ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <LCD_vidSendChar+0x106>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9f 83       	std	Y+7, r25	; 0x07
    20c8:	8e 83       	std	Y+6, r24	; 0x06
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <LCD_vidSendChar+0x184>
	else if (__tmp > 65535)
    20cc:	68 85       	ldd	r22, Y+8	; 0x08
    20ce:	79 85       	ldd	r23, Y+9	; 0x09
    20d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	4c f5       	brge	.+82     	; 0x2136 <LCD_vidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9f 83       	std	Y+7, r25	; 0x07
    210a:	8e 83       	std	Y+6, r24	; 0x06
    210c:	0f c0       	rjmp	.+30     	; 0x212c <LCD_vidSendChar+0x166>
    210e:	88 ec       	ldi	r24, 0xC8	; 200
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9d 83       	std	Y+5, r25	; 0x05
    2114:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	9d 81       	ldd	r25, Y+5	; 0x05
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <LCD_vidSendChar+0x154>
    211e:	9d 83       	std	Y+5, r25	; 0x05
    2120:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9f 83       	std	Y+7, r25	; 0x07
    212a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	8e 81       	ldd	r24, Y+6	; 0x06
    212e:	9f 81       	ldd	r25, Y+7	; 0x07
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	69 f7       	brne	.-38     	; 0x210e <LCD_vidSendChar+0x148>
    2134:	24 c0       	rjmp	.+72     	; 0x217e <LCD_vidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2136:	68 85       	ldd	r22, Y+8	; 0x08
    2138:	79 85       	ldd	r23, Y+9	; 0x09
    213a:	8a 85       	ldd	r24, Y+10	; 0x0a
    213c:	9b 85       	ldd	r25, Y+11	; 0x0b
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9f 83       	std	Y+7, r25	; 0x07
    2148:	8e 83       	std	Y+6, r24	; 0x06
    214a:	8e 81       	ldd	r24, Y+6	; 0x06
    214c:	9f 81       	ldd	r25, Y+7	; 0x07
    214e:	9b 83       	std	Y+3, r25	; 0x03
    2150:	8a 83       	std	Y+2, r24	; 0x02
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <LCD_vidSendChar+0x190>
    215a:	9b 83       	std	Y+3, r25	; 0x03
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	0f c0       	rjmp	.+30     	; 0x217e <LCD_vidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2160:	69 89       	ldd	r22, Y+17	; 0x11
    2162:	7a 89       	ldd	r23, Y+18	; 0x12
    2164:	8b 89       	ldd	r24, Y+19	; 0x13
    2166:	9c 89       	ldd	r25, Y+20	; 0x14
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	88 8b       	std	Y+16, r24	; 0x10
    2172:	88 89       	ldd	r24, Y+16	; 0x10
    2174:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	8a 95       	dec	r24
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_vidSendChar+0x1b2>
    217c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_ENABLE_PORT,LCD_Enable_pin, DIO_LOW);
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

}
    2188:	69 96       	adiw	r28, 0x19	; 25
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_VidGoToLocation>:

/*Go to location*/
void LCD_VidGoToLocation (u8 Copy_U8RowNumber, u8 Copy_U8ColoumNumber)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	62 97       	sbiw	r28, 0x12	; 18
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	8f 87       	std	Y+15, r24	; 0x0f
    21b0:	68 8b       	std	Y+16, r22	; 0x10
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e0       	ldi	r26, 0x00	; 0
    21b8:	b0 e4       	ldi	r27, 0x40	; 64
    21ba:	8b 87       	std	Y+11, r24	; 0x0b
    21bc:	9c 87       	std	Y+12, r25	; 0x0c
    21be:	ad 87       	std	Y+13, r26	; 0x0d
    21c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a ef       	ldi	r20, 0xFA	; 250
    21d0:	54 e4       	ldi	r21, 0x44	; 68
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8f 83       	std	Y+7, r24	; 0x07
    21dc:	98 87       	std	Y+8, r25	; 0x08
    21de:	a9 87       	std	Y+9, r26	; 0x09
    21e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <LCD_VidGoToLocation+0x6a>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <LCD_VidGoToLocation+0xe8>
	else if (__tmp > 65535)
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <LCD_VidGoToLocation+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	6b 85       	ldd	r22, Y+11	; 0x0b
    221e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2220:	8d 85       	ldd	r24, Y+13	; 0x0d
    2222:	9e 85       	ldd	r25, Y+14	; 0x0e
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <LCD_VidGoToLocation+0xca>
    2246:	88 ec       	ldi	r24, 0xC8	; 200
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 83       	std	Y+4, r25	; 0x04
    224c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_VidGoToLocation+0xb8>
    2256:	9c 83       	std	Y+4, r25	; 0x04
    2258:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <LCD_VidGoToLocation+0xac>
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <LCD_VidGoToLocation+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_VidGoToLocation+0xf4>
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	  switch(Copy_U8RowNumber)
    2296:	8f 85       	ldd	r24, Y+15	; 0x0f
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	3a 8b       	std	Y+18, r19	; 0x12
    229e:	29 8b       	std	Y+17, r18	; 0x11
    22a0:	89 89       	ldd	r24, Y+17	; 0x11
    22a2:	9a 89       	ldd	r25, Y+18	; 0x12
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	91 05       	cpc	r25, r1
    22a8:	31 f0       	breq	.+12     	; 0x22b6 <LCD_VidGoToLocation+0x11c>
    22aa:	29 89       	ldd	r18, Y+17	; 0x11
    22ac:	3a 89       	ldd	r19, Y+18	; 0x12
    22ae:	22 30       	cpi	r18, 0x02	; 2
    22b0:	31 05       	cpc	r19, r1
    22b2:	31 f0       	breq	.+12     	; 0x22c0 <LCD_VidGoToLocation+0x126>
    22b4:	09 c0       	rjmp	.+18     	; 0x22c8 <LCD_VidGoToLocation+0x12e>
	    {

	        case LCD_RowOne: LCD_VidSendCommand(LCD_RowOneStart+ Copy_U8ColoumNumber);
    22b6:	88 89       	ldd	r24, Y+16	; 0x10
    22b8:	80 58       	subi	r24, 0x80	; 128
    22ba:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_VidSendCommand>
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <LCD_VidGoToLocation+0x12e>
	                         break;
	        case LCD_RowTwo: LCD_VidSendCommand(LCD_RowTwoStart + Copy_U8ColoumNumber);
    22c0:	88 89       	ldd	r24, Y+16	; 0x10
    22c2:	80 54       	subi	r24, 0x40	; 64
    22c4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_VidSendCommand>
	                         break;
	    }
}
    22c8:	62 96       	adiw	r28, 0x12	; 18
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <LCD_VidSendString>:

/*Send String*/
void LCD_VidSendString(u8 * Copy_Pu8String)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <LCD_VidSendString+0x6>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	0a c0       	rjmp	.+20     	; 0x22fe <LCD_VidSendString+0x24>

  while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
  {
    LCD_vidSendChar(*Copy_Pu8String);
    22ea:	e9 81       	ldd	r30, Y+1	; 0x01
    22ec:	fa 81       	ldd	r31, Y+2	; 0x02
    22ee:	80 81       	ld	r24, Z
    22f0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <LCD_vidSendChar>
    Copy_Pu8String++;
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	01 96       	adiw	r24, 0x01	; 1
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01

/*Send String*/
void LCD_VidSendString(u8 * Copy_Pu8String)
{

  while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
    22fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2300:	fa 81       	ldd	r31, Y+2	; 0x02
    2302:	80 81       	ld	r24, Z
    2304:	88 23       	and	r24, r24
    2306:	89 f7       	brne	.-30     	; 0x22ea <LCD_VidSendString+0x10>
  {
    LCD_vidSendChar(*Copy_Pu8String);
    Copy_Pu8String++;

  }
}
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <LCD_VidSendNum>:

///

/*Send Number*/
void LCD_VidSendNum(u32 Copy_U32Number)
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	a4 97       	sbiw	r28, 0x24	; 36
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	69 a3       	std	Y+33, r22	; 0x21
    2328:	7a a3       	std	Y+34, r23	; 0x22
    232a:	8b a3       	std	Y+35, r24	; 0x23
    232c:	9c a3       	std	Y+36, r25	; 0x24
  u8 nums[32];
  itoa(Copy_U32Number, nums , 10);  //convert integer data type to string data type ,10 (base-DEC)
    232e:	89 a1       	ldd	r24, Y+33	; 0x21
    2330:	9a a1       	ldd	r25, Y+34	; 0x22
    2332:	9e 01       	movw	r18, r28
    2334:	2f 5f       	subi	r18, 0xFF	; 255
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	b9 01       	movw	r22, r18
    233a:	4a e0       	ldi	r20, 0x0A	; 10
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <itoa>
  LCD_VidSendString(nums);
    2342:	ce 01       	movw	r24, r28
    2344:	01 96       	adiw	r24, 0x01	; 1
    2346:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>

}
    234a:	a4 96       	adiw	r28, 0x24	; 36
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <LCD_VidSendNumber>:

void LCD_VidSendNumber( u32 Copy_U32Number )
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	2c 97       	sbiw	r28, 0x0c	; 12
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	69 87       	std	Y+9, r22	; 0x09
    2372:	7a 87       	std	Y+10, r23	; 0x0a
    2374:	8b 87       	std	Y+11, r24	; 0x0b
    2376:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32Counter=1 , Local_u32Digit=0;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	af 83       	std	Y+7, r26	; 0x07
    2386:	b8 87       	std	Y+8, r27	; 0x08
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	1a 82       	std	Y+2, r1	; 0x02
    238c:	1b 82       	std	Y+3, r1	; 0x03
    238e:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_U32Number == 0)
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	ab 85       	ldd	r26, Y+11	; 0x0b
    2396:	bc 85       	ldd	r27, Y+12	; 0x0c
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	a1 05       	cpc	r26, r1
    239c:	b1 05       	cpc	r27, r1
    239e:	b1 f4       	brne	.+44     	; 0x23cc <LCD_VidSendNumber+0x70>
	{
		LCD_vidSendChar('0');
    23a0:	80 e3       	ldi	r24, 0x30	; 48
    23a2:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <LCD_vidSendChar>
    23a6:	7a c0       	rjmp	.+244    	; 0x249c <LCD_VidSendNumber+0x140>
	}
	else
	{
		while (Copy_U32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	af 81       	ldd	r26, Y+7	; 0x07
    23ae:	b8 85       	ldd	r27, Y+8	; 0x08
    23b0:	2a e0       	ldi	r18, 0x0A	; 10
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__mulsi3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	af 83       	std	Y+7, r26	; 0x07
    23ca:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_vidSendChar('0');
	}
	else
	{
		while (Copy_U32Number/Local_u32Counter != 0)
    23cc:	89 85       	ldd	r24, Y+9	; 0x09
    23ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    23d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    23d4:	2d 81       	ldd	r18, Y+5	; 0x05
    23d6:	3e 81       	ldd	r19, Y+6	; 0x06
    23d8:	4f 81       	ldd	r20, Y+7	; 0x07
    23da:	58 85       	ldd	r21, Y+8	; 0x08
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 11 1c 	call	0x3822	; 0x3822 <__udivmodsi4>
    23e4:	da 01       	movw	r26, r20
    23e6:	c9 01       	movw	r24, r18
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	a1 05       	cpc	r26, r1
    23ec:	b1 05       	cpc	r27, r1
    23ee:	e1 f6       	brne	.-72     	; 0x23a8 <LCD_VidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	af 81       	ldd	r26, Y+7	; 0x07
    23f6:	b8 85       	ldd	r27, Y+8	; 0x08
    23f8:	2a e0       	ldi	r18, 0x0A	; 10
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 11 1c 	call	0x3822	; 0x3822 <__udivmodsi4>
    2408:	da 01       	movw	r26, r20
    240a:	c9 01       	movw	r24, r18
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	af 83       	std	Y+7, r26	; 0x07
    2412:	b8 87       	std	Y+8, r27	; 0x08
    2414:	3a c0       	rjmp	.+116    	; 0x248a <LCD_VidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_U32Number/Local_u32Counter;
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	ab 85       	ldd	r26, Y+11	; 0x0b
    241c:	bc 85       	ldd	r27, Y+12	; 0x0c
    241e:	2d 81       	ldd	r18, Y+5	; 0x05
    2420:	3e 81       	ldd	r19, Y+6	; 0x06
    2422:	4f 81       	ldd	r20, Y+7	; 0x07
    2424:	58 85       	ldd	r21, Y+8	; 0x08
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 11 1c 	call	0x3822	; 0x3822 <__udivmodsi4>
    242e:	da 01       	movw	r26, r20
    2430:	c9 01       	movw	r24, r18
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	ab 83       	std	Y+3, r26	; 0x03
    2438:	bc 83       	std	Y+4, r27	; 0x04

			LCD_vidSendChar(Local_u32Digit + '0');
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	80 5d       	subi	r24, 0xD0	; 208
    243e:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <LCD_vidSendChar>

			Copy_U32Number = Copy_U32Number%Local_u32Counter;
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	ab 85       	ldd	r26, Y+11	; 0x0b
    2448:	bc 85       	ldd	r27, Y+12	; 0x0c
    244a:	2d 81       	ldd	r18, Y+5	; 0x05
    244c:	3e 81       	ldd	r19, Y+6	; 0x06
    244e:	4f 81       	ldd	r20, Y+7	; 0x07
    2450:	58 85       	ldd	r21, Y+8	; 0x08
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 11 1c 	call	0x3822	; 0x3822 <__udivmodsi4>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	89 87       	std	Y+9, r24	; 0x09
    2460:	9a 87       	std	Y+10, r25	; 0x0a
    2462:	ab 87       	std	Y+11, r26	; 0x0b
    2464:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    2466:	8d 81       	ldd	r24, Y+5	; 0x05
    2468:	9e 81       	ldd	r25, Y+6	; 0x06
    246a:	af 81       	ldd	r26, Y+7	; 0x07
    246c:	b8 85       	ldd	r27, Y+8	; 0x08
    246e:	2a e0       	ldi	r18, 0x0A	; 10
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 11 1c 	call	0x3822	; 0x3822 <__udivmodsi4>
    247e:	da 01       	movw	r26, r20
    2480:	c9 01       	movw	r24, r18
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	af 83       	std	Y+7, r26	; 0x07
    2488:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	af 81       	ldd	r26, Y+7	; 0x07
    2490:	b8 85       	ldd	r27, Y+8	; 0x08
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	a1 05       	cpc	r26, r1
    2496:	b1 05       	cpc	r27, r1
    2498:	09 f0       	breq	.+2      	; 0x249c <LCD_VidSendNumber+0x140>
    249a:	bd cf       	rjmp	.-134    	; 0x2416 <LCD_VidSendNumber+0xba>
			Copy_U32Number = Copy_U32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    249c:	2c 96       	adiw	r28, 0x0c	; 12
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <LCD_VidSetClEAR>:



/*LCD clear*/
void LCD_VidSetClEAR()
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_CLEAR);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_VidSendCommand>
	LCD_VidGoToLocation(LCD_RowOne,LCD_ColOne);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VidGoToLocation>

}
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <LEDs_TurnON>:
#include"LEDs.h"

void LEDs_TurnON(void)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
	LEDsSystemModeDirection();
    24d2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LEDsSystemModeDirection>
	LED_Light_Sensor_Direction();
    24d6:	0e 94 86 12 	call	0x250c	; 0x250c <LED_Light_Sensor_Direction>
}
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <LEDsSystemModeDirection>:



void LEDsSystemModeDirection(){
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	65 e0       	ldi	r22, 0x05	; 5
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	66 e0       	ldi	r22, 0x06	; 6
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN7,DIO_OUTPUT);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	67 e0       	ldi	r22, 0x07	; 7
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
}
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <LED_Light_Sensor_Direction>:

void LED_Light_Sensor_Direction(){
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	66 e0       	ldi	r22, 0x06	; 6
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>

}
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <MessageWelcomeToEnterSystem>:
#include"Message.h"


	void MessageWelcomeToEnterSystem(void)
  {
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	2e 97       	sbiw	r28, 0x0e	; 14
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
	 LCD_VidSetClEAR();
    2538:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
	DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN5 , DIO_OUTPUT );
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	65 e0       	ldi	r22, 0x05	; 5
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
	Timer_VidTimer1Init();
    2546:	0e 94 0f 18 	call	0x301e	; 0x301e <Timer_VidTimer1Init>
	LCD_VidSendString(" welcome");
    254a:	80 e6       	ldi	r24, 0x60	; 96
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
	DIO_VidSetPinValue( DIO_PORTA , DIO_PIN5 , DIO_HIGH );
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	65 e0       	ldi	r22, 0x05	; 5
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a8 ec       	ldi	r26, 0xC8	; 200
    2562:	b2 e4       	ldi	r27, 0x42	; 66
    2564:	8b 87       	std	Y+11, r24	; 0x0b
    2566:	9c 87       	std	Y+12, r25	; 0x0c
    2568:	ad 87       	std	Y+13, r26	; 0x0d
    256a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256c:	6b 85       	ldd	r22, Y+11	; 0x0b
    256e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2570:	8d 85       	ldd	r24, Y+13	; 0x0d
    2572:	9e 85       	ldd	r25, Y+14	; 0x0e
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	4a ef       	ldi	r20, 0xFA	; 250
    257a:	54 e4       	ldi	r21, 0x44	; 68
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	8f 83       	std	Y+7, r24	; 0x07
    2586:	98 87       	std	Y+8, r25	; 0x08
    2588:	a9 87       	std	Y+9, r26	; 0x09
    258a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258c:	6f 81       	ldd	r22, Y+7	; 0x07
    258e:	78 85       	ldd	r23, Y+8	; 0x08
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	2c f4       	brge	.+10     	; 0x25ae <MessageWelcomeToEnterSystem+0x8a>
		__ticks = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	3f c0       	rjmp	.+126    	; 0x262c <MessageWelcomeToEnterSystem+0x108>
	else if (__tmp > 65535)
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	4c f5       	brge	.+82     	; 0x2618 <MessageWelcomeToEnterSystem+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    25cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e2       	ldi	r20, 0x20	; 32
    25d4:	51 e4       	ldi	r21, 0x41	; 65
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	0f c0       	rjmp	.+30     	; 0x260e <MessageWelcomeToEnterSystem+0xea>
    25f0:	88 ec       	ldi	r24, 0xC8	; 200
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9c 83       	std	Y+4, r25	; 0x04
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <MessageWelcomeToEnterSystem+0xd8>
    2600:	9c 83       	std	Y+4, r25	; 0x04
    2602:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	9e 83       	std	Y+6, r25	; 0x06
    260c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260e:	8d 81       	ldd	r24, Y+5	; 0x05
    2610:	9e 81       	ldd	r25, Y+6	; 0x06
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	69 f7       	brne	.-38     	; 0x25f0 <MessageWelcomeToEnterSystem+0xcc>
    2616:	14 c0       	rjmp	.+40     	; 0x2640 <MessageWelcomeToEnterSystem+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	6f 81       	ldd	r22, Y+7	; 0x07
    261a:	78 85       	ldd	r23, Y+8	; 0x08
    261c:	89 85       	ldd	r24, Y+9	; 0x09
    261e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	9a 83       	std	Y+2, r25	; 0x02
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <MessageWelcomeToEnterSystem+0x114>
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

  }
    2640:	2e 96       	adiw	r28, 0x0e	; 14
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <MessageWelcome>:
	void MessageWelcome(void)
	  {
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	2e 97       	sbiw	r28, 0x0e	; 14
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
		LCD_VidSendString("Welcome to the");
    2666:	89 e6       	ldi	r24, 0x69	; 105
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
		LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    266e:	82 e0       	ldi	r24, 0x02	; 2
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VidGoToLocation>
		LCD_VidSendString("smart home");
    2676:	88 e7       	ldi	r24, 0x78	; 120
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a8 e4       	ldi	r26, 0x48	; 72
    2684:	b3 e4       	ldi	r27, 0x43	; 67
    2686:	8b 87       	std	Y+11, r24	; 0x0b
    2688:	9c 87       	std	Y+12, r25	; 0x0c
    268a:	ad 87       	std	Y+13, r26	; 0x0d
    268c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a ef       	ldi	r20, 0xFA	; 250
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8f 83       	std	Y+7, r24	; 0x07
    26a8:	98 87       	std	Y+8, r25	; 0x08
    26aa:	a9 87       	std	Y+9, r26	; 0x09
    26ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <MessageWelcome+0x7e>
		__ticks = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <MessageWelcome+0xfc>
	else if (__tmp > 65535)
    26d0:	6f 81       	ldd	r22, Y+7	; 0x07
    26d2:	78 85       	ldd	r23, Y+8	; 0x08
    26d4:	89 85       	ldd	r24, Y+9	; 0x09
    26d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	57 e4       	ldi	r21, 0x47	; 71
    26e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	4c f5       	brge	.+82     	; 0x273a <MessageWelcome+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <MessageWelcome+0xde>
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	8b 83       	std	Y+3, r24	; 0x03
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <MessageWelcome+0xcc>
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	8d 81       	ldd	r24, Y+5	; 0x05
    2728:	9e 81       	ldd	r25, Y+6	; 0x06
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <MessageWelcome+0xc0>
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <MessageWelcome+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	6f 81       	ldd	r22, Y+7	; 0x07
    273c:	78 85       	ldd	r23, Y+8	; 0x08
    273e:	89 85       	ldd	r24, Y+9	; 0x09
    2740:	9a 85       	ldd	r25, Y+10	; 0x0a
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <MessageWelcome+0x108>
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
	  }
    2762:	2e 96       	adiw	r28, 0x0e	; 14
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <MessageMenu>:

	void MessageMenu(void)
	  {
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
		LCD_VidSetClEAR();
    277c:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		LCD_VidSendString("Hall:0 Room1:1");
    2780:	83 e8       	ldi	r24, 0x83	; 131
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
		LCD_VidGoToLocation(LCD_RowTwo,LCD_ColOne);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VidGoToLocation>
		LCD_VidSendString("Room2:2 Room3:3");
    2790:	82 e9       	ldi	r24, 0x92	; 146
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
	  }
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <MessageSetPassowrd>:


	void MessageSetPassowrd(void)
		  {
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
		LCD_VidSetClEAR();
    27a6:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		LCD_VidSendString("Password:");
    27aa:	82 ea       	ldi	r24, 0xA2	; 162
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>

		  }
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <MessageLoginForFirstPassowrd>:

	void MessageLoginForFirstPassowrd(void)
	 {
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	2e 97       	sbiw	r28, 0x0e	; 14
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
		LCD_VidSetClEAR();
    27cc:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		LCD_VidSendString("Login for");
    27d0:	8c ea       	ldi	r24, 0xAC	; 172
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
		LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VidGoToLocation>
		LCD_VidSendString("first time");
    27e0:	86 eb       	ldi	r24, 0xB6	; 182
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a6 e9       	ldi	r26, 0x96	; 150
    27ee:	b3 e4       	ldi	r27, 0x43	; 67
    27f0:	8b 87       	std	Y+11, r24	; 0x0b
    27f2:	9c 87       	std	Y+12, r25	; 0x0c
    27f4:	ad 87       	std	Y+13, r26	; 0x0d
    27f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a ef       	ldi	r20, 0xFA	; 250
    2806:	54 e4       	ldi	r21, 0x44	; 68
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8f 83       	std	Y+7, r24	; 0x07
    2812:	98 87       	std	Y+8, r25	; 0x08
    2814:	a9 87       	std	Y+9, r26	; 0x09
    2816:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2818:	6f 81       	ldd	r22, Y+7	; 0x07
    281a:	78 85       	ldd	r23, Y+8	; 0x08
    281c:	89 85       	ldd	r24, Y+9	; 0x09
    281e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	2c f4       	brge	.+10     	; 0x283a <MessageLoginForFirstPassowrd+0x82>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	3f c0       	rjmp	.+126    	; 0x28b8 <MessageLoginForFirstPassowrd+0x100>
	else if (__tmp > 65535)
    283a:	6f 81       	ldd	r22, Y+7	; 0x07
    283c:	78 85       	ldd	r23, Y+8	; 0x08
    283e:	89 85       	ldd	r24, Y+9	; 0x09
    2840:	9a 85       	ldd	r25, Y+10	; 0x0a
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	4c f5       	brge	.+82     	; 0x28a4 <MessageLoginForFirstPassowrd+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	6b 85       	ldd	r22, Y+11	; 0x0b
    2854:	7c 85       	ldd	r23, Y+12	; 0x0c
    2856:	8d 85       	ldd	r24, Y+13	; 0x0d
    2858:	9e 85       	ldd	r25, Y+14	; 0x0e
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	0f c0       	rjmp	.+30     	; 0x289a <MessageLoginForFirstPassowrd+0xe2>
    287c:	88 ec       	ldi	r24, 0xC8	; 200
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9c 83       	std	Y+4, r25	; 0x04
    2882:	8b 83       	std	Y+3, r24	; 0x03
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <MessageLoginForFirstPassowrd+0xd0>
    288c:	9c 83       	std	Y+4, r25	; 0x04
    288e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	69 f7       	brne	.-38     	; 0x287c <MessageLoginForFirstPassowrd+0xc4>
    28a2:	14 c0       	rjmp	.+40     	; 0x28cc <MessageLoginForFirstPassowrd+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	78 85       	ldd	r23, Y+8	; 0x08
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9e 83       	std	Y+6, r25	; 0x06
    28b6:	8d 83       	std	Y+5, r24	; 0x05
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <MessageLoginForFirstPassowrd+0x10c>
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		LCD_VidSetClEAR();
    28cc:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		LCD_VidSendString("Set Password");
    28d0:	81 ec       	ldi	r24, 0xC1	; 193
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
		LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VidGoToLocation>
		LCD_VidSendString(":");
    28e0:	8e ec       	ldi	r24, 0xCE	; 206
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
			  }
    28e8:	2e 96       	adiw	r28, 0x0e	; 14
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <MessageSavePassword>:

	void  MessageSavePassword()
		{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	2e 97       	sbiw	r28, 0x0e	; 14
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
		LCD_VidSetClEAR();
    290e:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		LCD_VidSendString("Pass Saved");
    2912:	80 ed       	ldi	r24, 0xD0	; 208
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a6 e9       	ldi	r26, 0x96	; 150
    2920:	b3 e4       	ldi	r27, 0x43	; 67
    2922:	8b 87       	std	Y+11, r24	; 0x0b
    2924:	9c 87       	std	Y+12, r25	; 0x0c
    2926:	ad 87       	std	Y+13, r26	; 0x0d
    2928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	6b 85       	ldd	r22, Y+11	; 0x0b
    292c:	7c 85       	ldd	r23, Y+12	; 0x0c
    292e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2930:	9e 85       	ldd	r25, Y+14	; 0x0e
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	4a ef       	ldi	r20, 0xFA	; 250
    2938:	54 e4       	ldi	r21, 0x44	; 68
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8f 83       	std	Y+7, r24	; 0x07
    2944:	98 87       	std	Y+8, r25	; 0x08
    2946:	a9 87       	std	Y+9, r26	; 0x09
    2948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	2c f4       	brge	.+10     	; 0x296c <MessageSavePassword+0x72>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	3f c0       	rjmp	.+126    	; 0x29ea <MessageSavePassword+0xf0>
	else if (__tmp > 65535)
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	57 e4       	ldi	r21, 0x47	; 71
    297c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	4c f5       	brge	.+82     	; 0x29d6 <MessageSavePassword+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2984:	6b 85       	ldd	r22, Y+11	; 0x0b
    2986:	7c 85       	ldd	r23, Y+12	; 0x0c
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	0f c0       	rjmp	.+30     	; 0x29cc <MessageSavePassword+0xd2>
    29ae:	88 ec       	ldi	r24, 0xC8	; 200
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	8b 83       	std	Y+3, r24	; 0x03
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <MessageSavePassword+0xc0>
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	69 f7       	brne	.-38     	; 0x29ae <MessageSavePassword+0xb4>
    29d4:	14 c0       	rjmp	.+40     	; 0x29fe <MessageSavePassword+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <MessageSavePassword+0xfc>
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		}
    29fe:	2e 96       	adiw	r28, 0x0e	; 14
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <MessageWrongPassword>:

	void  MessageWrongPassword()
	{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	2e 97       	sbiw	r28, 0x0e	; 14
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
		LCD_VidSetClEAR();
    2a24:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		LCD_VidSendString(" wrong pass");
    2a28:	8b ed       	ldi	r24, 0xDB	; 219
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e7       	ldi	r26, 0x70	; 112
    2a36:	b2 e4       	ldi	r27, 0x42	; 66
    2a38:	8b 87       	std	Y+11, r24	; 0x0b
    2a3a:	9c 87       	std	Y+12, r25	; 0x0c
    2a3c:	ad 87       	std	Y+13, r26	; 0x0d
    2a3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	4a ef       	ldi	r20, 0xFA	; 250
    2a4e:	54 e4       	ldi	r21, 0x44	; 68
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	8f 83       	std	Y+7, r24	; 0x07
    2a5a:	98 87       	std	Y+8, r25	; 0x08
    2a5c:	a9 87       	std	Y+9, r26	; 0x09
    2a5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e8       	ldi	r20, 0x80	; 128
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a74:	88 23       	and	r24, r24
    2a76:	2c f4       	brge	.+10     	; 0x2a82 <MessageWrongPassword+0x72>
		__ticks = 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	3f c0       	rjmp	.+126    	; 0x2b00 <MessageWrongPassword+0xf0>
	else if (__tmp > 65535)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	3f ef       	ldi	r19, 0xFF	; 255
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	4c f5       	brge	.+82     	; 0x2aec <MessageWrongPassword+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e2       	ldi	r20, 0x20	; 32
    2aa8:	51 e4       	ldi	r21, 0x41	; 65
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	0f c0       	rjmp	.+30     	; 0x2ae2 <MessageWrongPassword+0xd2>
    2ac4:	88 ec       	ldi	r24, 0xC8	; 200
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <MessageWrongPassword+0xc0>
    2ad4:	9c 83       	std	Y+4, r25	; 0x04
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	69 f7       	brne	.-38     	; 0x2ac4 <MessageWrongPassword+0xb4>
    2aea:	14 c0       	rjmp	.+40     	; 0x2b14 <MessageWrongPassword+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <MessageWrongPassword+0xfc>
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(60);
	}
    2b14:	2e 96       	adiw	r28, 0x0e	; 14
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <MessageWrongSelect>:

	void  MessageWrongSelect()
		{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	2e 97       	sbiw	r28, 0x0e	; 14
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
		LCD_VidSetClEAR();
    2b3a:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		LCD_VidSendString("wrong select !");
    2b3e:	87 ee       	ldi	r24, 0xE7	; 231
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a8 ec       	ldi	r26, 0xC8	; 200
    2b4c:	b2 e4       	ldi	r27, 0x42	; 66
    2b4e:	8b 87       	std	Y+11, r24	; 0x0b
    2b50:	9c 87       	std	Y+12, r25	; 0x0c
    2b52:	ad 87       	std	Y+13, r26	; 0x0d
    2b54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a ef       	ldi	r20, 0xFA	; 250
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8f 83       	std	Y+7, r24	; 0x07
    2b70:	98 87       	std	Y+8, r25	; 0x08
    2b72:	a9 87       	std	Y+9, r26	; 0x09
    2b74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <MessageWrongSelect+0x72>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <MessageWrongSelect+0xf0>
	else if (__tmp > 65535)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <MessageWrongSelect+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <MessageWrongSelect+0xd2>
    2bda:	88 ec       	ldi	r24, 0xC8	; 200
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <MessageWrongSelect+0xc0>
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <MessageWrongSelect+0xb4>
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <MessageWrongSelect+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	9a 83       	std	Y+2, r25	; 0x02
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <MessageWrongSelect+0xfc>
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		}
    2c2a:	2e 96       	adiw	r28, 0x0e	; 14
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <MessageSelect>:

	void  MessageSelect()
			{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
		LCD_VidSetClEAR();
    2c44:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		LCD_VidSendString("Select mode :");
    2c48:	86 ef       	ldi	r24, 0xF6	; 246
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
		LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	60 e0       	ldi	r22, 0x00	; 0
    2c54:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VidGoToLocation>
		LCD_VidSendString("0:Admin 1:Guest");
    2c58:	84 e0       	ldi	r24, 0x04	; 4
    2c5a:	91 e0       	ldi	r25, 0x01	; 1
    2c5c:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
			}
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <RunBuzzer>:


	 void RunBuzzer()
	 {
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	6e 97       	sbiw	r28, 0x1e	; 30
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61

		 LCD_VidSetClEAR();
    2c7a:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
		 LCD_VidSendString("wait..");
    2c7e:	84 e1       	ldi	r24, 0x14	; 20
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
	 	for(int i=0;i<3;i++)
    2c86:	1e 8e       	std	Y+30, r1	; 0x1e
    2c88:	1d 8e       	std	Y+29, r1	; 0x1d
    2c8a:	f3 c0       	rjmp	.+486    	; 0x2e72 <RunBuzzer+0x20c>
	 	{
			DIO_VidSetPinValue( DIO_PORTD , DIO_PIN7 , DIO_HIGH );
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	67 e0       	ldi	r22, 0x07	; 7
    2c90:	41 e0       	ldi	r20, 0x01	; 1
    2c92:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	a8 ec       	ldi	r26, 0xC8	; 200
    2c9c:	b2 e4       	ldi	r27, 0x42	; 66
    2c9e:	89 8f       	std	Y+25, r24	; 0x19
    2ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	4a ef       	ldi	r20, 0xFA	; 250
    2cb4:	54 e4       	ldi	r21, 0x44	; 68
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	8d 8b       	std	Y+21, r24	; 0x15
    2cc0:	9e 8b       	std	Y+22, r25	; 0x16
    2cc2:	af 8b       	std	Y+23, r26	; 0x17
    2cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e8       	ldi	r20, 0x80	; 128
    2cd4:	5f e3       	ldi	r21, 0x3F	; 63
    2cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cda:	88 23       	and	r24, r24
    2cdc:	2c f4       	brge	.+10     	; 0x2ce8 <RunBuzzer+0x82>
		__ticks = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9c 8b       	std	Y+20, r25	; 0x14
    2ce4:	8b 8b       	std	Y+19, r24	; 0x13
    2ce6:	3f c0       	rjmp	.+126    	; 0x2d66 <RunBuzzer+0x100>
	else if (__tmp > 65535)
    2ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cea:	7e 89       	ldd	r23, Y+22	; 0x16
    2cec:	8f 89       	ldd	r24, Y+23	; 0x17
    2cee:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	3f ef       	ldi	r19, 0xFF	; 255
    2cf4:	4f e7       	ldi	r20, 0x7F	; 127
    2cf6:	57 e4       	ldi	r21, 0x47	; 71
    2cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfc:	18 16       	cp	r1, r24
    2cfe:	4c f5       	brge	.+82     	; 0x2d52 <RunBuzzer+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	69 8d       	ldd	r22, Y+25	; 0x19
    2d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e2       	ldi	r20, 0x20	; 32
    2d0e:	51 e4       	ldi	r21, 0x41	; 65
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9c 8b       	std	Y+20, r25	; 0x14
    2d26:	8b 8b       	std	Y+19, r24	; 0x13
    2d28:	0f c0       	rjmp	.+30     	; 0x2d48 <RunBuzzer+0xe2>
    2d2a:	88 ec       	ldi	r24, 0xC8	; 200
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	9a 8b       	std	Y+18, r25	; 0x12
    2d30:	89 8b       	std	Y+17, r24	; 0x11
    2d32:	89 89       	ldd	r24, Y+17	; 0x11
    2d34:	9a 89       	ldd	r25, Y+18	; 0x12
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <RunBuzzer+0xd0>
    2d3a:	9a 8b       	std	Y+18, r25	; 0x12
    2d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d40:	9c 89       	ldd	r25, Y+20	; 0x14
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	9c 8b       	std	Y+20, r25	; 0x14
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <RunBuzzer+0xc4>
    2d50:	14 c0       	rjmp	.+40     	; 0x2d7a <RunBuzzer+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d52:	6d 89       	ldd	r22, Y+21	; 0x15
    2d54:	7e 89       	ldd	r23, Y+22	; 0x16
    2d56:	8f 89       	ldd	r24, Y+23	; 0x17
    2d58:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9c 8b       	std	Y+20, r25	; 0x14
    2d64:	8b 8b       	std	Y+19, r24	; 0x13
    2d66:	8b 89       	ldd	r24, Y+19	; 0x13
    2d68:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6a:	98 8b       	std	Y+16, r25	; 0x10
    2d6c:	8f 87       	std	Y+15, r24	; 0x0f
    2d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d70:	98 89       	ldd	r25, Y+16	; 0x10
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <RunBuzzer+0x10c>
    2d76:	98 8b       	std	Y+16, r25	; 0x10
    2d78:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(100);

			DIO_VidSetPinValue( DIO_PORTD , DIO_PIN7 , DIO_LOW );
    2d7a:	83 e0       	ldi	r24, 0x03	; 3
    2d7c:	67 e0       	ldi	r22, 0x07	; 7
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a0 e7       	ldi	r26, 0x70	; 112
    2d8a:	b2 e4       	ldi	r27, 0x42	; 66
    2d8c:	8b 87       	std	Y+11, r24	; 0x0b
    2d8e:	9c 87       	std	Y+12, r25	; 0x0c
    2d90:	ad 87       	std	Y+13, r26	; 0x0d
    2d92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a ef       	ldi	r20, 0xFA	; 250
    2da2:	54 e4       	ldi	r21, 0x44	; 68
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8f 83       	std	Y+7, r24	; 0x07
    2dae:	98 87       	std	Y+8, r25	; 0x08
    2db0:	a9 87       	std	Y+9, r26	; 0x09
    2db2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db4:	6f 81       	ldd	r22, Y+7	; 0x07
    2db6:	78 85       	ldd	r23, Y+8	; 0x08
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	2c f4       	brge	.+10     	; 0x2dd6 <RunBuzzer+0x170>
		__ticks = 1;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9e 83       	std	Y+6, r25	; 0x06
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
    2dd4:	3f c0       	rjmp	.+126    	; 0x2e54 <RunBuzzer+0x1ee>
	else if (__tmp > 65535)
    2dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd8:	78 85       	ldd	r23, Y+8	; 0x08
    2dda:	89 85       	ldd	r24, Y+9	; 0x09
    2ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	4f e7       	ldi	r20, 0x7F	; 127
    2de4:	57 e4       	ldi	r21, 0x47	; 71
    2de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dea:	18 16       	cp	r1, r24
    2dec:	4c f5       	brge	.+82     	; 0x2e40 <RunBuzzer+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e2       	ldi	r20, 0x20	; 32
    2dfc:	51 e4       	ldi	r21, 0x41	; 65
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	bc 01       	movw	r22, r24
    2e08:	cd 01       	movw	r24, r26
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
    2e16:	0f c0       	rjmp	.+30     	; 0x2e36 <RunBuzzer+0x1d0>
    2e18:	88 ec       	ldi	r24, 0xC8	; 200
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	9c 83       	std	Y+4, r25	; 0x04
    2e1e:	8b 83       	std	Y+3, r24	; 0x03
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <RunBuzzer+0x1be>
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	69 f7       	brne	.-38     	; 0x2e18 <RunBuzzer+0x1b2>
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <RunBuzzer+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9e 83       	std	Y+6, r25	; 0x06
    2e52:	8d 83       	std	Y+5, r24	; 0x05
    2e54:	8d 81       	ldd	r24, Y+5	; 0x05
    2e56:	9e 81       	ldd	r25, Y+6	; 0x06
    2e58:	9a 83       	std	Y+2, r25	; 0x02
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <RunBuzzer+0x1fa>
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	89 83       	std	Y+1, r24	; 0x01
	 void RunBuzzer()
	 {

		 LCD_VidSetClEAR();
		 LCD_VidSendString("wait..");
	 	for(int i=0;i<3;i++)
    2e68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e70:	8d 8f       	std	Y+29, r24	; 0x1d
    2e72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e76:	83 30       	cpi	r24, 0x03	; 3
    2e78:	91 05       	cpc	r25, r1
    2e7a:	0c f4       	brge	.+2      	; 0x2e7e <RunBuzzer+0x218>
    2e7c:	07 cf       	rjmp	.-498    	; 0x2c8c <RunBuzzer+0x26>

			DIO_VidSetPinValue( DIO_PORTD , DIO_PIN7 , DIO_LOW );
			_delay_ms(60);
	 	}

	 }
    2e7e:	6e 96       	adiw	r28, 0x1e	; 30
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <MessageNotAllowedMore_3>:


		void  MessageNotAllowedMore_3()
			{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
			LCD_VidSetClEAR();
    2e98:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>
			LCD_VidSendString("sorry not allowed ");
    2e9c:	8b e1       	ldi	r24, 0x1B	; 27
    2e9e:	91 e0       	ldi	r25, 0x01	; 1
    2ea0:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
			LCD_VidGoToLocation(LCD_RowTwo, LCD_ColOne);
    2ea4:	82 e0       	ldi	r24, 0x02	; 2
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VidGoToLocation>
			LCD_VidSendString("more of 3");
    2eac:	8e e2       	ldi	r24, 0x2E	; 46
    2eae:	91 e0       	ldi	r25, 0x01	; 1
    2eb0:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
			DIO_VidSetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH);
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	67 e0       	ldi	r22, 0x07	; 7
    2eb8:	41 e0       	ldi	r20, 0x01	; 1
    2eba:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
			}
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <MessagegetTemperature>:



		void MessagegetTemperature(void)
		{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	2f 97       	sbiw	r28, 0x0f	; 15
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
			u8 key;

			LCD_VidSetClEAR();
    2ed8:	0e 94 57 12 	call	0x24ae	; 0x24ae <LCD_VidSetClEAR>

				USART_VidSendChar('t');
    2edc:	84 e7       	ldi	r24, 0x74	; 116
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 5e 19 	call	0x32bc	; 0x32bc <USART_VidSendChar>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a0 ea       	ldi	r26, 0xA0	; 160
    2eea:	b0 e4       	ldi	r27, 0x40	; 64
    2eec:	8b 87       	std	Y+11, r24	; 0x0b
    2eee:	9c 87       	std	Y+12, r25	; 0x0c
    2ef0:	ad 87       	std	Y+13, r26	; 0x0d
    2ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a ef       	ldi	r20, 0xFA	; 250
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8f 83       	std	Y+7, r24	; 0x07
    2f0e:	98 87       	std	Y+8, r25	; 0x08
    2f10:	a9 87       	std	Y+9, r26	; 0x09
    2f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <MessagegetTemperature+0x72>
		__ticks = 1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <MessagegetTemperature+0xf0>
	else if (__tmp > 65535)
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	4c f5       	brge	.+82     	; 0x2fa0 <MessagegetTemperature+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <MessagegetTemperature+0xd2>
    2f78:	88 ec       	ldi	r24, 0xC8	; 200
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <MessagegetTemperature+0xc0>
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <MessagegetTemperature+0xb4>
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <MessagegetTemperature+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <MessagegetTemperature+0xfc>
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5);
				LCD_VidSendString("Temperature:");
    2fc8:	88 e3       	ldi	r24, 0x38	; 56
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
				 key =USART_U8GetChar();
    2fd0:	0e 94 78 19 	call	0x32f0	; 0x32f0 <USART_U8GetChar>
    2fd4:	8f 87       	std	Y+15, r24	; 0x0f
				if(key=='l'){
    2fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fd8:	8c 36       	cpi	r24, 0x6C	; 108
    2fda:	29 f4       	brne	.+10     	; 0x2fe6 <MessagegetTemperature+0x122>
					LCD_VidSendString("Low");
    2fdc:	85 e4       	ldi	r24, 0x45	; 69
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <MessagegetTemperature+0x140>
				}else if(key=='m'){
    2fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe8:	8d 36       	cpi	r24, 0x6D	; 109
    2fea:	29 f4       	brne	.+10     	; 0x2ff6 <MessagegetTemperature+0x132>
					LCD_VidSendString("Middle");
    2fec:	89 e4       	ldi	r24, 0x49	; 73
    2fee:	91 e0       	ldi	r25, 0x01	; 1
    2ff0:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
    2ff4:	07 c0       	rjmp	.+14     	; 0x3004 <MessagegetTemperature+0x140>
				}else if(key=='h'){
    2ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff8:	88 36       	cpi	r24, 0x68	; 104
    2ffa:	21 f4       	brne	.+8      	; 0x3004 <MessagegetTemperature+0x140>
					LCD_VidSendString("High");
    2ffc:	80 e5       	ldi	r24, 0x50	; 80
    2ffe:	91 e0       	ldi	r25, 0x01	; 1
    3000:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
				}

				LCD_VidGoToLocation(LCD_RowTwo,LCD_ColOne);
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VidGoToLocation>
		}
    300c:	2f 96       	adiw	r28, 0x0f	; 15
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <Timer_VidTimer1Init>:
#include"Timers.h"

//servo motor

void Timer_VidTimer1Init(void){
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
	// select mode
	//fast PWM -->14
	CLR_BIT(TCCR1A,WGM10);
    3026:	af e4       	ldi	r26, 0x4F	; 79
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	ef e4       	ldi	r30, 0x4F	; 79
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	8e 7f       	andi	r24, 0xFE	; 254
    3032:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    3034:	af e4       	ldi	r26, 0x4F	; 79
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	ef e4       	ldi	r30, 0x4F	; 79
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	82 60       	ori	r24, 0x02	; 2
    3040:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3042:	ae e4       	ldi	r26, 0x4E	; 78
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	ee e4       	ldi	r30, 0x4E	; 78
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	88 60       	ori	r24, 0x08	; 8
    304e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3050:	ae e4       	ldi	r26, 0x4E	; 78
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	ee e4       	ldi	r30, 0x4E	; 78
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	80 61       	ori	r24, 0x10	; 16
    305c:	8c 93       	st	X, r24
	//select OC1A PIN -->Fast PWM
	CLR_BIT(TCCR1A,COM1A0);
    305e:	af e4       	ldi	r26, 0x4F	; 79
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	ef e4       	ldi	r30, 0x4F	; 79
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	8f 7b       	andi	r24, 0xBF	; 191
    306a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    306c:	af e4       	ldi	r26, 0x4F	; 79
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	ef e4       	ldi	r30, 0x4F	; 79
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	80 68       	ori	r24, 0x80	; 128
    3078:	8c 93       	st	X, r24
	//setup value of ICR1

	ICR1=19999;
    307a:	e6 e4       	ldi	r30, 0x46	; 70
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	8f e1       	ldi	r24, 0x1F	; 31
    3080:	9e e4       	ldi	r25, 0x4E	; 78
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	80 83       	st	Z, r24

	//setup OCR1A--> for the angle of serve
	OCR1A=500;
    3086:	ea e4       	ldi	r30, 0x4A	; 74
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	84 ef       	ldi	r24, 0xF4	; 244
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	80 83       	st	Z, r24
	//presalar-->8
	CLR_BIT(TCCR1B,CS10);
    3092:	ae e4       	ldi	r26, 0x4E	; 78
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	ee e4       	ldi	r30, 0x4E	; 78
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	8e 7f       	andi	r24, 0xFE	; 254
    309e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    30a0:	ae e4       	ldi	r26, 0x4E	; 78
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	ee e4       	ldi	r30, 0x4E	; 78
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	82 60       	ori	r24, 0x02	; 2
    30ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    30ae:	ae e4       	ldi	r26, 0x4E	; 78
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	ee e4       	ldi	r30, 0x4E	; 78
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	8b 7f       	andi	r24, 0xFB	; 251
    30ba:	8c 93       	st	X, r24
}
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <Timers_VidTimer0Init>:
////
void (*Timer0_PFun)(void);


void Timers_VidTimer0Init(void)
{
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
	/*Select the MODE*/
	/*Normal Mode*/
	CLR_BIT( TCCR0 , WGM00 );
    30ca:	a3 e5       	ldi	r26, 0x53	; 83
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	e3 e5       	ldi	r30, 0x53	; 83
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	8f 7b       	andi	r24, 0xBF	; 191
    30d6:	8c 93       	st	X, r24
	CLR_BIT( TCCR0 , WGM01 );
    30d8:	a3 e5       	ldi	r26, 0x53	; 83
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e3 e5       	ldi	r30, 0x53	; 83
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	87 7f       	andi	r24, 0xF7	; 247
    30e4:	8c 93       	st	X, r24
//	CLR_BIT( TCCR0 , WGM00 );
//	SET_BIT( TCCR0 , WGM01 );

	/*Enable the Interrupt*/
	/*GIE*/
	SET_BIT( SREG , 7 );
    30e6:	af e5       	ldi	r26, 0x5F	; 95
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	ef e5       	ldi	r30, 0x5F	; 95
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	80 68       	ori	r24, 0x80	; 128
    30f2:	8c 93       	st	X, r24
	/*PIE -- > OVF */
	SET_BIT( TIMSK , TOIE0 );
    30f4:	a9 e5       	ldi	r26, 0x59	; 89
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e9 e5       	ldi	r30, 0x59	; 89
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	81 60       	ori	r24, 0x01	; 1
    3100:	8c 93       	st	X, r24
	/*PIE -- > CTC */
//	SET_BIT( TIMSK , OCIE0 );

	/* setup the preload value*/
	TCNT0 = 113 ;
    3102:	e2 e5       	ldi	r30, 0x52	; 82
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	81 e7       	ldi	r24, 0x71	; 113
    3108:	80 83       	st	Z, r24
//	SET_BIT( TCCR0 , CS01 );
//	CLR_BIT( TCCR0 , CS02 );
	////
	/*Select Prescaler factor*/
		/*/8 */
		CLR_BIT( TCCR0 , CS00 );
    310a:	a3 e5       	ldi	r26, 0x53	; 83
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e3 e5       	ldi	r30, 0x53	; 83
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	8e 7f       	andi	r24, 0xFE	; 254
    3116:	8c 93       	st	X, r24
		SET_BIT( TCCR0 , CS01 );
    3118:	a3 e5       	ldi	r26, 0x53	; 83
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	e3 e5       	ldi	r30, 0x53	; 83
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	82 60       	ori	r24, 0x02	; 2
    3124:	8c 93       	st	X, r24
		CLR_BIT( TCCR0 , CS02 );
    3126:	a3 e5       	ldi	r26, 0x53	; 83
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e3 e5       	ldi	r30, 0x53	; 83
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	8b 7f       	andi	r24, 0xFB	; 251
    3132:	8c 93       	st	X, r24
}
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <Timers_VidTimer0SetCallBack>:

void Timers_VidTimer0SetCallBack( void (*Timer0_Ptr)(void) )
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	00 d0       	rcall	.+0      	; 0x3140 <Timers_VidTimer0SetCallBack+0x6>
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	9a 83       	std	Y+2, r25	; 0x02
    3146:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PFun = Timer0_Ptr ;
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	90 93 8b 01 	sts	0x018B, r25
    3150:	80 93 8a 01 	sts	0x018A, r24
}
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <__vector_11>:
//}



ISR(TIMER0_OVF_vect)
{
    315e:	1f 92       	push	r1
    3160:	0f 92       	push	r0
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	0f 92       	push	r0
    3166:	11 24       	eor	r1, r1
    3168:	2f 93       	push	r18
    316a:	3f 93       	push	r19
    316c:	4f 93       	push	r20
    316e:	5f 93       	push	r21
    3170:	6f 93       	push	r22
    3172:	7f 93       	push	r23
    3174:	8f 93       	push	r24
    3176:	9f 93       	push	r25
    3178:	af 93       	push	r26
    317a:	bf 93       	push	r27
    317c:	ef 93       	push	r30
    317e:	ff 93       	push	r31
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_U16CounterOVF = 0 ;
	Local_U16CounterOVF++ ;
    3188:	80 91 88 01 	lds	r24, 0x0188
    318c:	90 91 89 01 	lds	r25, 0x0189
    3190:	01 96       	adiw	r24, 0x01	; 1
    3192:	90 93 89 01 	sts	0x0189, r25
    3196:	80 93 88 01 	sts	0x0188, r24
	if( Local_U16CounterOVF == 3907 )
    319a:	80 91 88 01 	lds	r24, 0x0188
    319e:	90 91 89 01 	lds	r25, 0x0189
    31a2:	2f e0       	ldi	r18, 0x0F	; 15
    31a4:	83 34       	cpi	r24, 0x43	; 67
    31a6:	92 07       	cpc	r25, r18
    31a8:	69 f4       	brne	.+26     	; 0x31c4 <__vector_11+0x66>
	{
		Local_U16CounterOVF = 0 ;
    31aa:	10 92 89 01 	sts	0x0189, r1
    31ae:	10 92 88 01 	sts	0x0188, r1
		TCNT0 = 192 ;
    31b2:	e2 e5       	ldi	r30, 0x52	; 82
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 ec       	ldi	r24, 0xC0	; 192
    31b8:	80 83       	st	Z, r24

		Timer0_PFun();
    31ba:	e0 91 8a 01 	lds	r30, 0x018A
    31be:	f0 91 8b 01 	lds	r31, 0x018B
    31c2:	09 95       	icall
	}

}
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	ff 91       	pop	r31
    31ca:	ef 91       	pop	r30
    31cc:	bf 91       	pop	r27
    31ce:	af 91       	pop	r26
    31d0:	9f 91       	pop	r25
    31d2:	8f 91       	pop	r24
    31d4:	7f 91       	pop	r23
    31d6:	6f 91       	pop	r22
    31d8:	5f 91       	pop	r21
    31da:	4f 91       	pop	r20
    31dc:	3f 91       	pop	r19
    31de:	2f 91       	pop	r18
    31e0:	0f 90       	pop	r0
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	0f 90       	pop	r0
    31e6:	1f 90       	pop	r1
    31e8:	18 95       	reti

000031ea <USART>:
#include"USART.h"


void USART(void){
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN0 , DIO_INPUT );
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	60 e0       	ldi	r22, 0x00	; 0
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN1 , DIO_OUTPUT );
    31fc:	83 e0       	ldi	r24, 0x03	; 3
    31fe:	61 e0       	ldi	r22, 0x01	; 1
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>

		USART_VidInit();
    3206:	0e 94 08 19 	call	0x3210	; 0x3210 <USART_VidInit>

}
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <USART_VidInit>:
void USART_VidInit(void)
{
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	00 d0       	rcall	.+0      	; 0x3216 <USART_VidInit+0x6>
    3216:	0f 92       	push	r0
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8UCSRCValue = 0b10000000 ;
    321c:	80 e8       	ldi	r24, 0x80	; 128
    321e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U8BaudRateValue = 51 ;
    3220:	83 e3       	ldi	r24, 0x33	; 51
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	89 83       	std	Y+1, r24	; 0x01

	/* Setup Baud Rate To 9600 */
	UBRRL = (u8)Local_U8BaudRateValue ;
    3228:	e9 e2       	ldi	r30, 0x29	; 41
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	80 83       	st	Z, r24
	UBRRH = (u8)(Local_U8BaudRateValue >> 8);
    3230:	e0 e4       	ldi	r30, 0x40	; 64
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	9a 81       	ldd	r25, Y+2	; 0x02
    3238:	89 2f       	mov	r24, r25
    323a:	99 27       	eor	r25, r25
    323c:	80 83       	st	Z, r24

	/* Normal Speed */
	CLR_BIT( UCSRA , U2X );
    323e:	ab e2       	ldi	r26, 0x2B	; 43
    3240:	b0 e0       	ldi	r27, 0x00	; 0
    3242:	eb e2       	ldi	r30, 0x2B	; 43
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	8d 7f       	andi	r24, 0xFD	; 253
    324a:	8c 93       	st	X, r24
	/* Disable MPM */
	CLR_BIT( UCSRA , MPCM );
    324c:	ab e2       	ldi	r26, 0x2B	; 43
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	eb e2       	ldi	r30, 0x2B	; 43
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	8e 7f       	andi	r24, 0xFE	; 254
    3258:	8c 93       	st	X, r24
	/* Rx , Tx Enable*/
	SET_BIT( UCSRB , RXEN );
    325a:	aa e2       	ldi	r26, 0x2A	; 42
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	ea e2       	ldi	r30, 0x2A	; 42
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	80 61       	ori	r24, 0x10	; 16
    3266:	8c 93       	st	X, r24
	SET_BIT( UCSRB , TXEN );
    3268:	aa e2       	ldi	r26, 0x2A	; 42
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	ea e2       	ldi	r30, 0x2A	; 42
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	88 60       	ori	r24, 0x08	; 8
    3274:	8c 93       	st	X, r24
	/* Select Char Size --> 8bits */
	CLR_BIT( UCSRB , UCSZ2 );
    3276:	aa e2       	ldi	r26, 0x2A	; 42
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	ea e2       	ldi	r30, 0x2A	; 42
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	8b 7f       	andi	r24, 0xFB	; 251
    3282:	8c 93       	st	X, r24
	SET_BIT( Local_U8UCSRCValue , UCSZ0 );
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	82 60       	ori	r24, 0x02	; 2
    3288:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT( Local_U8UCSRCValue , UCSZ1 );
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	84 60       	ori	r24, 0x04	; 4
    328e:	8b 83       	std	Y+3, r24	; 0x03
	/* Select Asynch Mode */
	CLR_BIT( Local_U8UCSRCValue , UMSEL );
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	8f 7b       	andi	r24, 0xBF	; 191
    3294:	8b 83       	std	Y+3, r24	; 0x03
	/* Parity --> Disabled */
	CLR_BIT( Local_U8UCSRCValue , UPM0 );
    3296:	8b 81       	ldd	r24, Y+3	; 0x03
    3298:	8f 7e       	andi	r24, 0xEF	; 239
    329a:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT( Local_U8UCSRCValue , UPM1 );
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	8f 7d       	andi	r24, 0xDF	; 223
    32a0:	8b 83       	std	Y+3, r24	; 0x03
	/* Stop Bits --> 2 */
	SET_BIT( Local_U8UCSRCValue , USBS );
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	88 60       	ori	r24, 0x08	; 8
    32a6:	8b 83       	std	Y+3, r24	; 0x03

	/* Update at the Reg*/
	UCSRC = Local_U8UCSRCValue ;
    32a8:	e0 e4       	ldi	r30, 0x40	; 64
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	8b 81       	ldd	r24, Y+3	; 0x03
    32ae:	80 83       	st	Z, r24

}
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <USART_VidSendChar>:


void USART_VidSendChar( u8 Copy_U8Char )
{
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	0f 92       	push	r0
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	89 83       	std	Y+1, r24	; 0x01
	while( (GET_BIT( UCSRA ,  UDRE )) == 0 );
    32c8:	eb e2       	ldi	r30, 0x2B	; 43
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	82 95       	swap	r24
    32d0:	86 95       	lsr	r24
    32d2:	87 70       	andi	r24, 0x07	; 7
    32d4:	88 2f       	mov	r24, r24
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	81 70       	andi	r24, 0x01	; 1
    32da:	90 70       	andi	r25, 0x00	; 0
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	a1 f3       	breq	.-24     	; 0x32c8 <USART_VidSendChar+0xc>

	UDR = Copy_U8Char ;
    32e0:	ec e2       	ldi	r30, 0x2C	; 44
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	80 83       	st	Z, r24
}
    32e8:	0f 90       	pop	r0
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <USART_U8GetChar>:


u8 USART_U8GetChar( void )
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	0f 92       	push	r0
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Char ;
	while( (GET_BIT( UCSRA ,  RXC )) == 0 );
    32fa:	eb e2       	ldi	r30, 0x2B	; 43
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	88 23       	and	r24, r24
    3302:	dc f7       	brge	.-10     	; 0x32fa <USART_U8GetChar+0xa>
	Local_U8Char = UDR ;
    3304:	ec e2       	ldi	r30, 0x2C	; 44
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	89 83       	std	Y+1, r24	; 0x01
	return Local_U8Char ;
    330c:	89 81       	ldd	r24, Y+1	; 0x01
}
    330e:	0f 90       	pop	r0
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	08 95       	ret

00003316 <SetPassword>:
#include "login.h"

 u16 Password;
 void SetPassword(u16 ValidPassword){
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	00 d0       	rcall	.+0      	; 0x331c <SetPassword+0x6>
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01
	 Password=ValidPassword;
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	9a 81       	ldd	r25, Y+2	; 0x02
    3328:	90 93 8d 01 	sts	0x018D, r25
    332c:	80 93 8c 01 	sts	0x018C, r24
 }
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	08 95       	ret

0000333a <CheckUser>:


 u8 CheckUser(u32 VildPassword){
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	00 d0       	rcall	.+0      	; 0x3340 <CheckUser+0x6>
    3340:	00 d0       	rcall	.+0      	; 0x3342 <CheckUser+0x8>
    3342:	0f 92       	push	r0
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	69 83       	std	Y+1, r22	; 0x01
    334a:	7a 83       	std	Y+2, r23	; 0x02
    334c:	8b 83       	std	Y+3, r24	; 0x03
    334e:	9c 83       	std	Y+4, r25	; 0x04
 	   if(Password==VildPassword)
    3350:	80 91 8c 01 	lds	r24, 0x018C
    3354:	90 91 8d 01 	lds	r25, 0x018D
    3358:	9c 01       	movw	r18, r24
    335a:	40 e0       	ldi	r20, 0x00	; 0
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	ab 81       	ldd	r26, Y+3	; 0x03
    3364:	bc 81       	ldd	r27, Y+4	; 0x04
    3366:	28 17       	cp	r18, r24
    3368:	39 07       	cpc	r19, r25
    336a:	4a 07       	cpc	r20, r26
    336c:	5b 07       	cpc	r21, r27
    336e:	29 f4       	brne	.+10     	; 0x337a <CheckUser+0x40>
 		{
 		  MessageWelcomeToEnterSystem();
    3370:	0e 94 92 12 	call	0x2524	; 0x2524 <MessageWelcomeToEnterSystem>
	    return 1;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	03 c0       	rjmp	.+6      	; 0x3380 <CheckUser+0x46>

 		}
 	    else{
 	 		  MessageWrongPassword();
    337a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <MessageWrongPassword>
 			return 0;
    337e:	1d 82       	std	Y+5, r1	; 0x05
    3380:	8d 81       	ldd	r24, Y+5	; 0x05
 		}
 	}
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <getnum>:




 u8 getnum(u8 key)
 {
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <getnum+0x6>
    3398:	00 d0       	rcall	.+0      	; 0x339a <getnum+0x8>
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	89 83       	std	Y+1, r24	; 0x01
 	switch (key)
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	28 2f       	mov	r18, r24
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	3c 83       	std	Y+4, r19	; 0x04
    33a8:	2b 83       	std	Y+3, r18	; 0x03
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	9c 81       	ldd	r25, Y+4	; 0x04
    33ae:	84 33       	cpi	r24, 0x34	; 52
    33b0:	91 05       	cpc	r25, r1
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <getnum+0x24>
    33b4:	4b c0       	rjmp	.+150    	; 0x344c <getnum+0xba>
    33b6:	2b 81       	ldd	r18, Y+3	; 0x03
    33b8:	3c 81       	ldd	r19, Y+4	; 0x04
    33ba:	25 33       	cpi	r18, 0x35	; 53
    33bc:	31 05       	cpc	r19, r1
    33be:	dc f4       	brge	.+54     	; 0x33f6 <getnum+0x64>
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	9c 81       	ldd	r25, Y+4	; 0x04
    33c4:	81 33       	cpi	r24, 0x31	; 49
    33c6:	91 05       	cpc	r25, r1
    33c8:	c1 f1       	breq	.+112    	; 0x343a <getnum+0xa8>
    33ca:	2b 81       	ldd	r18, Y+3	; 0x03
    33cc:	3c 81       	ldd	r19, Y+4	; 0x04
    33ce:	22 33       	cpi	r18, 0x32	; 50
    33d0:	31 05       	cpc	r19, r1
    33d2:	34 f4       	brge	.+12     	; 0x33e0 <getnum+0x4e>
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	9c 81       	ldd	r25, Y+4	; 0x04
    33d8:	80 33       	cpi	r24, 0x30	; 48
    33da:	91 05       	cpc	r25, r1
    33dc:	61 f1       	breq	.+88     	; 0x3436 <getnum+0xa4>
    33de:	48 c0       	rjmp	.+144    	; 0x3470 <getnum+0xde>
    33e0:	2b 81       	ldd	r18, Y+3	; 0x03
    33e2:	3c 81       	ldd	r19, Y+4	; 0x04
    33e4:	22 33       	cpi	r18, 0x32	; 50
    33e6:	31 05       	cpc	r19, r1
    33e8:	59 f1       	breq	.+86     	; 0x3440 <getnum+0xae>
    33ea:	8b 81       	ldd	r24, Y+3	; 0x03
    33ec:	9c 81       	ldd	r25, Y+4	; 0x04
    33ee:	83 33       	cpi	r24, 0x33	; 51
    33f0:	91 05       	cpc	r25, r1
    33f2:	49 f1       	breq	.+82     	; 0x3446 <getnum+0xb4>
    33f4:	3d c0       	rjmp	.+122    	; 0x3470 <getnum+0xde>
    33f6:	2b 81       	ldd	r18, Y+3	; 0x03
    33f8:	3c 81       	ldd	r19, Y+4	; 0x04
    33fa:	27 33       	cpi	r18, 0x37	; 55
    33fc:	31 05       	cpc	r19, r1
    33fe:	79 f1       	breq	.+94     	; 0x345e <getnum+0xcc>
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	9c 81       	ldd	r25, Y+4	; 0x04
    3404:	88 33       	cpi	r24, 0x38	; 56
    3406:	91 05       	cpc	r25, r1
    3408:	5c f4       	brge	.+22     	; 0x3420 <getnum+0x8e>
    340a:	2b 81       	ldd	r18, Y+3	; 0x03
    340c:	3c 81       	ldd	r19, Y+4	; 0x04
    340e:	25 33       	cpi	r18, 0x35	; 53
    3410:	31 05       	cpc	r19, r1
    3412:	f9 f0       	breq	.+62     	; 0x3452 <getnum+0xc0>
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	9c 81       	ldd	r25, Y+4	; 0x04
    3418:	86 33       	cpi	r24, 0x36	; 54
    341a:	91 05       	cpc	r25, r1
    341c:	e9 f0       	breq	.+58     	; 0x3458 <getnum+0xc6>
    341e:	28 c0       	rjmp	.+80     	; 0x3470 <getnum+0xde>
    3420:	2b 81       	ldd	r18, Y+3	; 0x03
    3422:	3c 81       	ldd	r19, Y+4	; 0x04
    3424:	28 33       	cpi	r18, 0x38	; 56
    3426:	31 05       	cpc	r19, r1
    3428:	e9 f0       	breq	.+58     	; 0x3464 <getnum+0xd2>
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	9c 81       	ldd	r25, Y+4	; 0x04
    342e:	89 33       	cpi	r24, 0x39	; 57
    3430:	91 05       	cpc	r25, r1
    3432:	d9 f0       	breq	.+54     	; 0x346a <getnum+0xd8>
    3434:	1d c0       	rjmp	.+58     	; 0x3470 <getnum+0xde>
 	{
 	     case '0' : return 0;
    3436:	1a 82       	std	Y+2, r1	; 0x02
    3438:	1d c0       	rjmp	.+58     	; 0x3474 <getnum+0xe2>
 	     case '1' : return 1;
    343a:	91 e0       	ldi	r25, 0x01	; 1
    343c:	9a 83       	std	Y+2, r25	; 0x02
    343e:	1a c0       	rjmp	.+52     	; 0x3474 <getnum+0xe2>
 	     case '2' : return 2;
    3440:	22 e0       	ldi	r18, 0x02	; 2
    3442:	2a 83       	std	Y+2, r18	; 0x02
    3444:	17 c0       	rjmp	.+46     	; 0x3474 <getnum+0xe2>
 	     case '3' : return 3;
    3446:	33 e0       	ldi	r19, 0x03	; 3
    3448:	3a 83       	std	Y+2, r19	; 0x02
    344a:	14 c0       	rjmp	.+40     	; 0x3474 <getnum+0xe2>
 	     case '4' : return 4;
    344c:	84 e0       	ldi	r24, 0x04	; 4
    344e:	8a 83       	std	Y+2, r24	; 0x02
    3450:	11 c0       	rjmp	.+34     	; 0x3474 <getnum+0xe2>
 	     case '5' : return 5;
    3452:	95 e0       	ldi	r25, 0x05	; 5
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	0e c0       	rjmp	.+28     	; 0x3474 <getnum+0xe2>
 	     case '6' : return 6;
    3458:	26 e0       	ldi	r18, 0x06	; 6
    345a:	2a 83       	std	Y+2, r18	; 0x02
    345c:	0b c0       	rjmp	.+22     	; 0x3474 <getnum+0xe2>
 	     case '7' : return 7;
    345e:	37 e0       	ldi	r19, 0x07	; 7
    3460:	3a 83       	std	Y+2, r19	; 0x02
    3462:	08 c0       	rjmp	.+16     	; 0x3474 <getnum+0xe2>
 	     case '8' : return 8;
    3464:	88 e0       	ldi	r24, 0x08	; 8
    3466:	8a 83       	std	Y+2, r24	; 0x02
    3468:	05 c0       	rjmp	.+10     	; 0x3474 <getnum+0xe2>
 	     case '9' : return 9;
    346a:	99 e0       	ldi	r25, 0x09	; 9
    346c:	9a 83       	std	Y+2, r25	; 0x02
    346e:	02 c0       	rjmp	.+4      	; 0x3474 <getnum+0xe2>
 	}
 	return 50;
    3470:	22 e3       	ldi	r18, 0x32	; 50
    3472:	2a 83       	std	Y+2, r18	; 0x02
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
 }
    3476:	0f 90       	pop	r0
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <Login>:

 /////


u8 Login(void){
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	00 d0       	rcall	.+0      	; 0x348a <Login+0x6>
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62

	u8 key;
	u8 flag=0;
    348e:	19 82       	std	Y+1, r1	; 0x01

	MessageWelcome();
    3490:	0e 94 29 13 	call	0x2652	; 0x2652 <MessageWelcome>

	EEROM();
    3494:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <EEROM>

	while(1)

	{
		MessageSelect();
    3498:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <MessageSelect>
	key = KPD_u8GetPressedKey();
    349c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <KPD_u8GetPressedKey>
    34a0:	8a 83       	std	Y+2, r24	; 0x02

	if (key=='0')
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	80 33       	cpi	r24, 0x30	; 48
    34a6:	49 f4       	brne	.+18     	; 0x34ba <Login+0x36>
	{
     flag=LoginAdmin();
    34a8:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LoginAdmin>
    34ac:	89 83       	std	Y+1, r24	; 0x01
		{
		 MessageWrongSelect();
	    }

	}
	return flag;
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret
	if (key=='0')
	{
     flag=LoginAdmin();
		break;
	}
	else if(key=='1'){
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	81 33       	cpi	r24, 0x31	; 49
    34be:	91 f4       	brne	.+36     	; 0x34e4 <Login+0x60>
    //run buzer
		DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN7 , DIO_OUTPUT );
    34c0:	83 e0       	ldi	r24, 0x03	; 3
    34c2:	67 e0       	ldi	r22, 0x07	; 7
    34c4:	41 e0       	ldi	r20, 0x01	; 1
    34c6:	0e 94 cb 06 	call	0xd96	; 0xd96 <DIO_VidSetPinDirection>
		DIO_VidSetPinValue( DIO_PORTA , DIO_PIN6 , DIO_HIGH );
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	66 e0       	ldi	r22, 0x06	; 6
    34ce:	41 e0       	ldi	r20, 0x01	; 1
    34d0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
		RunBuzzer();
    34d4:	0e 94 33 16 	call	0x2c66	; 0x2c66 <RunBuzzer>
		DIO_VidSetPinValue( DIO_PORTA , DIO_PIN6 , DIO_LOW );
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	66 e0       	ldi	r22, 0x06	; 6
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    34e2:	da cf       	rjmp	.-76     	; 0x3498 <Login+0x14>

	}
	else
		{
		 MessageWrongSelect();
    34e4:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MessageWrongSelect>
    34e8:	d7 cf       	rjmp	.-82     	; 0x3498 <Login+0x14>

000034ea <LoginAdmin>:
	return flag;
}


u8 LoginAdmin (void)
{
    34ea:	df 93       	push	r29
    34ec:	cf 93       	push	r28
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	27 97       	sbiw	r28, 0x07	; 7
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	f8 94       	cli
    34f8:	de bf       	out	0x3e, r29	; 62
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	cd bf       	out	0x3d, r28	; 61

	u16 ValidPassword=0;
    34fe:	1e 82       	std	Y+6, r1	; 0x06
    3500:	1d 82       	std	Y+5, r1	; 0x05
	u8 key;
	u8 x=0;
    3502:	1b 82       	std	Y+3, r1	; 0x03

	for ( x=0;x<3;x++)
    3504:	1b 82       	std	Y+3, r1	; 0x03
    3506:	3a c0       	rjmp	.+116    	; 0x357c <LoginAdmin+0x92>
	{
		 MessageSetPassowrd();
    3508:	0e 94 cf 13 	call	0x279e	; 0x279e <MessageSetPassowrd>

		for(int i =0 ;i<4;i++)
    350c:	1a 82       	std	Y+2, r1	; 0x02
    350e:	19 82       	std	Y+1, r1	; 0x01
    3510:	22 c0       	rjmp	.+68     	; 0x3556 <LoginAdmin+0x6c>
		{
			key = KPD_u8GetPressedKey();
    3512:	0e 94 2b 0c 	call	0x1856	; 0x1856 <KPD_u8GetPressedKey>
    3516:	8c 83       	std	Y+4, r24	; 0x04
			LCD_vidSendChar(key);
    3518:	8c 81       	ldd	r24, Y+4	; 0x04
    351a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <LCD_vidSendChar>
			key = getnum(key);
    351e:	8c 81       	ldd	r24, Y+4	; 0x04
    3520:	0e 94 c9 19 	call	0x3392	; 0x3392 <getnum>
    3524:	8c 83       	std	Y+4, r24	; 0x04
			ValidPassword=ValidPassword*10+key;
    3526:	8d 81       	ldd	r24, Y+5	; 0x05
    3528:	9e 81       	ldd	r25, Y+6	; 0x06
    352a:	9c 01       	movw	r18, r24
    352c:	22 0f       	add	r18, r18
    352e:	33 1f       	adc	r19, r19
    3530:	c9 01       	movw	r24, r18
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	88 0f       	add	r24, r24
    3538:	99 1f       	adc	r25, r25
    353a:	28 0f       	add	r18, r24
    353c:	39 1f       	adc	r19, r25
    353e:	8c 81       	ldd	r24, Y+4	; 0x04
    3540:	88 2f       	mov	r24, r24
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	82 0f       	add	r24, r18
    3546:	93 1f       	adc	r25, r19
    3548:	9e 83       	std	Y+6, r25	; 0x06
    354a:	8d 83       	std	Y+5, r24	; 0x05

	for ( x=0;x<3;x++)
	{
		 MessageSetPassowrd();

		for(int i =0 ;i<4;i++)
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	9a 81       	ldd	r25, Y+2	; 0x02
    3550:	01 96       	adiw	r24, 0x01	; 1
    3552:	9a 83       	std	Y+2, r25	; 0x02
    3554:	89 83       	std	Y+1, r24	; 0x01
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	84 30       	cpi	r24, 0x04	; 4
    355c:	91 05       	cpc	r25, r1
    355e:	cc f2       	brlt	.-78     	; 0x3512 <LoginAdmin+0x28>
			LCD_vidSendChar(key);
			key = getnum(key);
			ValidPassword=ValidPassword*10+key;
		}

		if(CheckUser(ValidPassword)){
    3560:	8d 81       	ldd	r24, Y+5	; 0x05
    3562:	9e 81       	ldd	r25, Y+6	; 0x06
    3564:	cc 01       	movw	r24, r24
    3566:	a0 e0       	ldi	r26, 0x00	; 0
    3568:	b0 e0       	ldi	r27, 0x00	; 0
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	0e 94 9d 19 	call	0x333a	; 0x333a <CheckUser>
    3572:	88 23       	and	r24, r24
    3574:	31 f4       	brne	.+12     	; 0x3582 <LoginAdmin+0x98>

	u16 ValidPassword=0;
	u8 key;
	u8 x=0;

	for ( x=0;x<3;x++)
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	8f 5f       	subi	r24, 0xFF	; 255
    357a:	8b 83       	std	Y+3, r24	; 0x03
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	83 30       	cpi	r24, 0x03	; 3
    3580:	18 f2       	brcs	.-122    	; 0x3508 <LoginAdmin+0x1e>
		if(CheckUser(ValidPassword)){
			break;
		}

          	}
	if(x==3){
    3582:	8b 81       	ldd	r24, Y+3	; 0x03
    3584:	83 30       	cpi	r24, 0x03	; 3
    3586:	21 f4       	brne	.+8      	; 0x3590 <LoginAdmin+0xa6>
		MessageNotAllowedMore_3();
    3588:	0e 94 48 17 	call	0x2e90	; 0x2e90 <MessageNotAllowedMore_3>
	return 0;
    358c:	1f 82       	std	Y+7, r1	; 0x07
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <LoginAdmin+0xaa>
	}
	return 1;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	8f 83       	std	Y+7, r24	; 0x07
    3594:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3596:	27 96       	adiw	r28, 0x07	; 7
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <CheckLight>:
#include"menu.h"
#include "ADC.h"
#include"LEDs.h"

 ///
void CheckLight(void){
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <CheckLight+0x6>
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
 u16 temperature;
 temperature= ADC_U16GetDigitalValue(ADC_CHANNEL_3);
    35b2:	83 e0       	ldi	r24, 0x03	; 3
    35b4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_U16GetDigitalValue>
    35b8:	9a 83       	std	Y+2, r25	; 0x02
    35ba:	89 83       	std	Y+1, r24	; 0x01
 if(temperature<=8){
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	9a 81       	ldd	r25, Y+2	; 0x02
    35c0:	89 30       	cpi	r24, 0x09	; 9
    35c2:	91 05       	cpc	r25, r1
    35c4:	30 f4       	brcc	.+12     	; 0x35d2 <CheckLight+0x2a>
	 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	66 e0       	ldi	r22, 0x06	; 6
    35ca:	41 e0       	ldi	r20, 0x01	; 1
    35cc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>
    35d0:	05 c0       	rjmp	.+10     	; 0x35dc <CheckLight+0x34>

 }else{
	 DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	66 e0       	ldi	r22, 0x06	; 6
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_VidSetPinValue>

     }
 }
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <main>:




void main (void)
{
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	0f 92       	push	r0
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62


	USART();
    35f0:	0e 94 f5 18 	call	0x31ea	; 0x31ea <USART>

	LEDs_TurnON();
    35f4:	0e 94 65 12 	call	0x24ca	; 0x24ca <LEDs_TurnON>

	LCD_VidInit();
    35f8:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_VidInit>

	KPAD_VidInint();
    35fc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <KPAD_VidInint>

	u8 flag=Login();
    3600:	0e 94 42 1a 	call	0x3484	; 0x3484 <Login>
    3604:	89 83       	std	Y+1, r24	; 0x01

	ADC_VidInit();
    3606:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_VidInit>

	Timers_VidTimer0SetCallBack(&CheckLight);
    360a:	84 ed       	ldi	r24, 0xD4	; 212
    360c:	9a e1       	ldi	r25, 0x1A	; 26
    360e:	0e 94 9d 18 	call	0x313a	; 0x313a <Timers_VidTimer0SetCallBack>
	Timers_VidTimer0Init();
    3612:	0e 94 61 18 	call	0x30c2	; 0x30c2 <Timers_VidTimer0Init>





if(flag==1){
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	81 30       	cpi	r24, 0x01	; 1
    361a:	19 f4       	brne	.+6      	; 0x3622 <main+0x3c>

 while(1){

	Menu();
    361c:	0e 94 12 1b 	call	0x3624	; 0x3624 <Menu>
    3620:	fd cf       	rjmp	.-6      	; 0x361c <main+0x36>
    3622:	ff cf       	rjmp	.-2      	; 0x3622 <main+0x3c>

00003624 <Menu>:
 *      Author: btc
 */
#include"menu.h"


void Menu(void){
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	2f 97       	sbiw	r28, 0x0f	; 15
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	cd bf       	out	0x3d, r28	; 61
	u8 key;
	MessageMenu();
    3638:	0e 94 ba 13 	call	0x2774	; 0x2774 <MessageMenu>
	key = KPD_u8GetPressedKey();
    363c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <KPD_u8GetPressedKey>
    3640:	8f 87       	std	Y+15, r24	; 0x0f
	if (key=='0')
    3642:	8f 85       	ldd	r24, Y+15	; 0x0f
    3644:	80 33       	cpi	r24, 0x30	; 48
    3646:	c1 f4       	brne	.+48     	; 0x3678 <Menu+0x54>
	{
		MessagegetTemperature();
    3648:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <MessagegetTemperature>
		///
		LCD_VidSendString("TV:0 LED:1");
    364c:	85 e5       	ldi	r24, 0x55	; 85
    364e:	91 e0       	ldi	r25, 0x01	; 1
    3650:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
		key = KPD_u8GetPressedKey();
    3654:	0e 94 2b 0c 	call	0x1856	; 0x1856 <KPD_u8GetPressedKey>
    3658:	8f 87       	std	Y+15, r24	; 0x0f
		 if(key=='0'){
    365a:	8f 85       	ldd	r24, Y+15	; 0x0f
    365c:	80 33       	cpi	r24, 0x30	; 48
    365e:	21 f4       	brne	.+8      	; 0x3668 <Menu+0x44>
			USART_VidSendChar('0');
    3660:	80 e3       	ldi	r24, 0x30	; 48
    3662:	0e 94 5e 19 	call	0x32bc	; 0x32bc <USART_VidSendChar>
    3666:	43 c0       	rjmp	.+134    	; 0x36ee <Menu+0xca>

			}else if(key=='1'){
    3668:	8f 85       	ldd	r24, Y+15	; 0x0f
    366a:	81 33       	cpi	r24, 0x31	; 49
    366c:	09 f0       	breq	.+2      	; 0x3670 <Menu+0x4c>
    366e:	3f c0       	rjmp	.+126    	; 0x36ee <Menu+0xca>

			USART_VidSendChar('1');
    3670:	81 e3       	ldi	r24, 0x31	; 49
    3672:	0e 94 5e 19 	call	0x32bc	; 0x32bc <USART_VidSendChar>
    3676:	3b c0       	rjmp	.+118    	; 0x36ee <Menu+0xca>

			}
	}else if(key=='1'){
    3678:	8f 85       	ldd	r24, Y+15	; 0x0f
    367a:	81 33       	cpi	r24, 0x31	; 49
    367c:	81 f4       	brne	.+32     	; 0x369e <Menu+0x7a>
		MessagegetTemperature();
    367e:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <MessagegetTemperature>
		LCD_VidSendString(" LED:1");
    3682:	80 e6       	ldi	r24, 0x60	; 96
    3684:	91 e0       	ldi	r25, 0x01	; 1
    3686:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
				key = KPD_u8GetPressedKey();
    368a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <KPD_u8GetPressedKey>
    368e:	8f 87       	std	Y+15, r24	; 0x0f
				 if(key=='1'){
    3690:	8f 85       	ldd	r24, Y+15	; 0x0f
    3692:	81 33       	cpi	r24, 0x31	; 49
    3694:	61 f5       	brne	.+88     	; 0x36ee <Menu+0xca>
					USART_VidSendChar('a');
    3696:	81 e6       	ldi	r24, 0x61	; 97
    3698:	0e 94 5e 19 	call	0x32bc	; 0x32bc <USART_VidSendChar>
    369c:	28 c0       	rjmp	.+80     	; 0x36ee <Menu+0xca>

					}
	}else if(key=='2'){
    369e:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a0:	82 33       	cpi	r24, 0x32	; 50
    36a2:	81 f4       	brne	.+32     	; 0x36c4 <Menu+0xa0>
		MessagegetTemperature();
    36a4:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <MessagegetTemperature>
		LCD_VidSendString("LED:2");
    36a8:	87 e6       	ldi	r24, 0x67	; 103
    36aa:	91 e0       	ldi	r25, 0x01	; 1
    36ac:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
		key = KPD_u8GetPressedKey();
    36b0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <KPD_u8GetPressedKey>
    36b4:	8f 87       	std	Y+15, r24	; 0x0f
		 if(key=='2'){
    36b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36b8:	82 33       	cpi	r24, 0x32	; 50
    36ba:	c9 f4       	brne	.+50     	; 0x36ee <Menu+0xca>
			USART_VidSendChar('b');
    36bc:	82 e6       	ldi	r24, 0x62	; 98
    36be:	0e 94 5e 19 	call	0x32bc	; 0x32bc <USART_VidSendChar>
    36c2:	15 c0       	rjmp	.+42     	; 0x36ee <Menu+0xca>

			}
	}else if(key=='3'){
    36c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c6:	83 33       	cpi	r24, 0x33	; 51
    36c8:	81 f4       	brne	.+32     	; 0x36ea <Menu+0xc6>
		MessagegetTemperature();
    36ca:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <MessagegetTemperature>
		LCD_VidSendString("LED:3");
    36ce:	8d e6       	ldi	r24, 0x6D	; 109
    36d0:	91 e0       	ldi	r25, 0x01	; 1
    36d2:	0e 94 6d 11 	call	0x22da	; 0x22da <LCD_VidSendString>
				key = KPD_u8GetPressedKey();
    36d6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <KPD_u8GetPressedKey>
    36da:	8f 87       	std	Y+15, r24	; 0x0f
				 if(key=='3'){
    36dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36de:	83 33       	cpi	r24, 0x33	; 51
    36e0:	31 f4       	brne	.+12     	; 0x36ee <Menu+0xca>
					USART_VidSendChar('c');
    36e2:	83 e6       	ldi	r24, 0x63	; 99
    36e4:	0e 94 5e 19 	call	0x32bc	; 0x32bc <USART_VidSendChar>
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <Menu+0xca>

					}
	}else{
		 MessageWrongSelect();
    36ea:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MessageWrongSelect>
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	a0 ea       	ldi	r26, 0xA0	; 160
    36f4:	b1 e4       	ldi	r27, 0x41	; 65
    36f6:	8b 87       	std	Y+11, r24	; 0x0b
    36f8:	9c 87       	std	Y+12, r25	; 0x0c
    36fa:	ad 87       	std	Y+13, r26	; 0x0d
    36fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3700:	7c 85       	ldd	r23, Y+12	; 0x0c
    3702:	8d 85       	ldd	r24, Y+13	; 0x0d
    3704:	9e 85       	ldd	r25, Y+14	; 0x0e
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	4a ef       	ldi	r20, 0xFA	; 250
    370c:	54 e4       	ldi	r21, 0x44	; 68
    370e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	8f 83       	std	Y+7, r24	; 0x07
    3718:	98 87       	std	Y+8, r25	; 0x08
    371a:	a9 87       	std	Y+9, r26	; 0x09
    371c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    371e:	6f 81       	ldd	r22, Y+7	; 0x07
    3720:	78 85       	ldd	r23, Y+8	; 0x08
    3722:	89 85       	ldd	r24, Y+9	; 0x09
    3724:	9a 85       	ldd	r25, Y+10	; 0x0a
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e8       	ldi	r20, 0x80	; 128
    372c:	5f e3       	ldi	r21, 0x3F	; 63
    372e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3732:	88 23       	and	r24, r24
    3734:	2c f4       	brge	.+10     	; 0x3740 <Menu+0x11c>
		__ticks = 1;
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	9e 83       	std	Y+6, r25	; 0x06
    373c:	8d 83       	std	Y+5, r24	; 0x05
    373e:	3f c0       	rjmp	.+126    	; 0x37be <Menu+0x19a>
	else if (__tmp > 65535)
    3740:	6f 81       	ldd	r22, Y+7	; 0x07
    3742:	78 85       	ldd	r23, Y+8	; 0x08
    3744:	89 85       	ldd	r24, Y+9	; 0x09
    3746:	9a 85       	ldd	r25, Y+10	; 0x0a
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	3f ef       	ldi	r19, 0xFF	; 255
    374c:	4f e7       	ldi	r20, 0x7F	; 127
    374e:	57 e4       	ldi	r21, 0x47	; 71
    3750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3754:	18 16       	cp	r1, r24
    3756:	4c f5       	brge	.+82     	; 0x37aa <Menu+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3758:	6b 85       	ldd	r22, Y+11	; 0x0b
    375a:	7c 85       	ldd	r23, Y+12	; 0x0c
    375c:	8d 85       	ldd	r24, Y+13	; 0x0d
    375e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e2       	ldi	r20, 0x20	; 32
    3766:	51 e4       	ldi	r21, 0x41	; 65
    3768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9e 83       	std	Y+6, r25	; 0x06
    377e:	8d 83       	std	Y+5, r24	; 0x05
    3780:	0f c0       	rjmp	.+30     	; 0x37a0 <Menu+0x17c>
    3782:	88 ec       	ldi	r24, 0xC8	; 200
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	9c 83       	std	Y+4, r25	; 0x04
    3788:	8b 83       	std	Y+3, r24	; 0x03
    378a:	8b 81       	ldd	r24, Y+3	; 0x03
    378c:	9c 81       	ldd	r25, Y+4	; 0x04
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	f1 f7       	brne	.-4      	; 0x378e <Menu+0x16a>
    3792:	9c 83       	std	Y+4, r25	; 0x04
    3794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3796:	8d 81       	ldd	r24, Y+5	; 0x05
    3798:	9e 81       	ldd	r25, Y+6	; 0x06
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	9e 83       	std	Y+6, r25	; 0x06
    379e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a0:	8d 81       	ldd	r24, Y+5	; 0x05
    37a2:	9e 81       	ldd	r25, Y+6	; 0x06
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	69 f7       	brne	.-38     	; 0x3782 <Menu+0x15e>
    37a8:	14 c0       	rjmp	.+40     	; 0x37d2 <Menu+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37aa:	6f 81       	ldd	r22, Y+7	; 0x07
    37ac:	78 85       	ldd	r23, Y+8	; 0x08
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
    37be:	8d 81       	ldd	r24, Y+5	; 0x05
    37c0:	9e 81       	ldd	r25, Y+6	; 0x06
    37c2:	9a 83       	std	Y+2, r25	; 0x02
    37c4:	89 83       	std	Y+1, r24	; 0x01
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <Menu+0x1a6>
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(20);

	}
    37d2:	2f 96       	adiw	r28, 0x0f	; 15
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	cf 91       	pop	r28
    37e0:	df 91       	pop	r29
    37e2:	08 95       	ret

000037e4 <__mulsi3>:
    37e4:	62 9f       	mul	r22, r18
    37e6:	d0 01       	movw	r26, r0
    37e8:	73 9f       	mul	r23, r19
    37ea:	f0 01       	movw	r30, r0
    37ec:	82 9f       	mul	r24, r18
    37ee:	e0 0d       	add	r30, r0
    37f0:	f1 1d       	adc	r31, r1
    37f2:	64 9f       	mul	r22, r20
    37f4:	e0 0d       	add	r30, r0
    37f6:	f1 1d       	adc	r31, r1
    37f8:	92 9f       	mul	r25, r18
    37fa:	f0 0d       	add	r31, r0
    37fc:	83 9f       	mul	r24, r19
    37fe:	f0 0d       	add	r31, r0
    3800:	74 9f       	mul	r23, r20
    3802:	f0 0d       	add	r31, r0
    3804:	65 9f       	mul	r22, r21
    3806:	f0 0d       	add	r31, r0
    3808:	99 27       	eor	r25, r25
    380a:	72 9f       	mul	r23, r18
    380c:	b0 0d       	add	r27, r0
    380e:	e1 1d       	adc	r30, r1
    3810:	f9 1f       	adc	r31, r25
    3812:	63 9f       	mul	r22, r19
    3814:	b0 0d       	add	r27, r0
    3816:	e1 1d       	adc	r30, r1
    3818:	f9 1f       	adc	r31, r25
    381a:	bd 01       	movw	r22, r26
    381c:	cf 01       	movw	r24, r30
    381e:	11 24       	eor	r1, r1
    3820:	08 95       	ret

00003822 <__udivmodsi4>:
    3822:	a1 e2       	ldi	r26, 0x21	; 33
    3824:	1a 2e       	mov	r1, r26
    3826:	aa 1b       	sub	r26, r26
    3828:	bb 1b       	sub	r27, r27
    382a:	fd 01       	movw	r30, r26
    382c:	0d c0       	rjmp	.+26     	; 0x3848 <__udivmodsi4_ep>

0000382e <__udivmodsi4_loop>:
    382e:	aa 1f       	adc	r26, r26
    3830:	bb 1f       	adc	r27, r27
    3832:	ee 1f       	adc	r30, r30
    3834:	ff 1f       	adc	r31, r31
    3836:	a2 17       	cp	r26, r18
    3838:	b3 07       	cpc	r27, r19
    383a:	e4 07       	cpc	r30, r20
    383c:	f5 07       	cpc	r31, r21
    383e:	20 f0       	brcs	.+8      	; 0x3848 <__udivmodsi4_ep>
    3840:	a2 1b       	sub	r26, r18
    3842:	b3 0b       	sbc	r27, r19
    3844:	e4 0b       	sbc	r30, r20
    3846:	f5 0b       	sbc	r31, r21

00003848 <__udivmodsi4_ep>:
    3848:	66 1f       	adc	r22, r22
    384a:	77 1f       	adc	r23, r23
    384c:	88 1f       	adc	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	1a 94       	dec	r1
    3852:	69 f7       	brne	.-38     	; 0x382e <__udivmodsi4_loop>
    3854:	60 95       	com	r22
    3856:	70 95       	com	r23
    3858:	80 95       	com	r24
    385a:	90 95       	com	r25
    385c:	9b 01       	movw	r18, r22
    385e:	ac 01       	movw	r20, r24
    3860:	bd 01       	movw	r22, r26
    3862:	cf 01       	movw	r24, r30
    3864:	08 95       	ret

00003866 <__prologue_saves__>:
    3866:	2f 92       	push	r2
    3868:	3f 92       	push	r3
    386a:	4f 92       	push	r4
    386c:	5f 92       	push	r5
    386e:	6f 92       	push	r6
    3870:	7f 92       	push	r7
    3872:	8f 92       	push	r8
    3874:	9f 92       	push	r9
    3876:	af 92       	push	r10
    3878:	bf 92       	push	r11
    387a:	cf 92       	push	r12
    387c:	df 92       	push	r13
    387e:	ef 92       	push	r14
    3880:	ff 92       	push	r15
    3882:	0f 93       	push	r16
    3884:	1f 93       	push	r17
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	ca 1b       	sub	r28, r26
    3890:	db 0b       	sbc	r29, r27
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	09 94       	ijmp

0000389e <__epilogue_restores__>:
    389e:	2a 88       	ldd	r2, Y+18	; 0x12
    38a0:	39 88       	ldd	r3, Y+17	; 0x11
    38a2:	48 88       	ldd	r4, Y+16	; 0x10
    38a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    38a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    38a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    38aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    38ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    38ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    38b0:	b9 84       	ldd	r11, Y+9	; 0x09
    38b2:	c8 84       	ldd	r12, Y+8	; 0x08
    38b4:	df 80       	ldd	r13, Y+7	; 0x07
    38b6:	ee 80       	ldd	r14, Y+6	; 0x06
    38b8:	fd 80       	ldd	r15, Y+5	; 0x05
    38ba:	0c 81       	ldd	r16, Y+4	; 0x04
    38bc:	1b 81       	ldd	r17, Y+3	; 0x03
    38be:	aa 81       	ldd	r26, Y+2	; 0x02
    38c0:	b9 81       	ldd	r27, Y+1	; 0x01
    38c2:	ce 0f       	add	r28, r30
    38c4:	d1 1d       	adc	r29, r1
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	cd bf       	out	0x3d, r28	; 61
    38d0:	ed 01       	movw	r28, r26
    38d2:	08 95       	ret

000038d4 <itoa>:
    38d4:	fb 01       	movw	r30, r22
    38d6:	9f 01       	movw	r18, r30
    38d8:	e8 94       	clt
    38da:	42 30       	cpi	r20, 0x02	; 2
    38dc:	c4 f0       	brlt	.+48     	; 0x390e <itoa+0x3a>
    38de:	45 32       	cpi	r20, 0x25	; 37
    38e0:	b4 f4       	brge	.+44     	; 0x390e <itoa+0x3a>
    38e2:	4a 30       	cpi	r20, 0x0A	; 10
    38e4:	29 f4       	brne	.+10     	; 0x38f0 <itoa+0x1c>
    38e6:	97 fb       	bst	r25, 7
    38e8:	1e f4       	brtc	.+6      	; 0x38f0 <itoa+0x1c>
    38ea:	90 95       	com	r25
    38ec:	81 95       	neg	r24
    38ee:	9f 4f       	sbci	r25, 0xFF	; 255
    38f0:	64 2f       	mov	r22, r20
    38f2:	77 27       	eor	r23, r23
    38f4:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__udivmodhi4>
    38f8:	80 5d       	subi	r24, 0xD0	; 208
    38fa:	8a 33       	cpi	r24, 0x3A	; 58
    38fc:	0c f0       	brlt	.+2      	; 0x3900 <itoa+0x2c>
    38fe:	89 5d       	subi	r24, 0xD9	; 217
    3900:	81 93       	st	Z+, r24
    3902:	cb 01       	movw	r24, r22
    3904:	00 97       	sbiw	r24, 0x00	; 0
    3906:	a1 f7       	brne	.-24     	; 0x38f0 <itoa+0x1c>
    3908:	16 f4       	brtc	.+4      	; 0x390e <itoa+0x3a>
    390a:	5d e2       	ldi	r21, 0x2D	; 45
    390c:	51 93       	st	Z+, r21
    390e:	10 82       	st	Z, r1
    3910:	c9 01       	movw	r24, r18
    3912:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <strrev>

00003916 <strrev>:
    3916:	dc 01       	movw	r26, r24
    3918:	fc 01       	movw	r30, r24
    391a:	67 2f       	mov	r22, r23
    391c:	71 91       	ld	r23, Z+
    391e:	77 23       	and	r23, r23
    3920:	e1 f7       	brne	.-8      	; 0x391a <strrev+0x4>
    3922:	32 97       	sbiw	r30, 0x02	; 2
    3924:	04 c0       	rjmp	.+8      	; 0x392e <strrev+0x18>
    3926:	7c 91       	ld	r23, X
    3928:	6d 93       	st	X+, r22
    392a:	70 83       	st	Z, r23
    392c:	62 91       	ld	r22, -Z
    392e:	ae 17       	cp	r26, r30
    3930:	bf 07       	cpc	r27, r31
    3932:	c8 f3       	brcs	.-14     	; 0x3926 <strrev+0x10>
    3934:	08 95       	ret

00003936 <__udivmodhi4>:
    3936:	aa 1b       	sub	r26, r26
    3938:	bb 1b       	sub	r27, r27
    393a:	51 e1       	ldi	r21, 0x11	; 17
    393c:	07 c0       	rjmp	.+14     	; 0x394c <__udivmodhi4_ep>

0000393e <__udivmodhi4_loop>:
    393e:	aa 1f       	adc	r26, r26
    3940:	bb 1f       	adc	r27, r27
    3942:	a6 17       	cp	r26, r22
    3944:	b7 07       	cpc	r27, r23
    3946:	10 f0       	brcs	.+4      	; 0x394c <__udivmodhi4_ep>
    3948:	a6 1b       	sub	r26, r22
    394a:	b7 0b       	sbc	r27, r23

0000394c <__udivmodhi4_ep>:
    394c:	88 1f       	adc	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	5a 95       	dec	r21
    3952:	a9 f7       	brne	.-22     	; 0x393e <__udivmodhi4_loop>
    3954:	80 95       	com	r24
    3956:	90 95       	com	r25
    3958:	bc 01       	movw	r22, r24
    395a:	cd 01       	movw	r24, r26
    395c:	08 95       	ret

0000395e <_exit>:
    395e:	f8 94       	cli

00003960 <__stop_program>:
    3960:	ff cf       	rjmp	.-2      	; 0x3960 <__stop_program>
