
smarthome2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001de4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001de4  00001e78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00001e80  2**0
                  ALLOC
  3 .stab         00001788  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c40  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006141  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000081c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008997  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ee       	ldi	r30, 0xE4	; 228
      78:	fd e1       	ldi	r31, 0x1D	; 29
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 2c 0b 	call	0x1658	; 0x1658 <main>
      8a:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_VidInit>:
#include "ADC.h"




void ADC_VidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADATE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADPS0);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_U16GetDigitalValue>:

u16 ADC_U16GetDigitalValue(u8 Copy_U8ChannelNumber){
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <ADC_U16GetDigitalValue+0x6>
     bca:	0f 92       	push	r0
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U16_value;
	ADMUX &=0b11100000;
     bd2:	a7 e2       	ldi	r26, 0x27	; 39
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e7 e2       	ldi	r30, 0x27	; 39
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 7e       	andi	r24, 0xE0	; 224
     bde:	8c 93       	st	X, r24
	ADMUX |=Copy_U8ChannelNumber ;
     be0:	a7 e2       	ldi	r26, 0x27	; 39
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e7 e2       	ldi	r30, 0x27	; 39
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	90 81       	ld	r25, Z
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	89 2b       	or	r24, r25
     bee:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);
     bf0:	a6 e2       	ldi	r26, 0x26	; 38
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e6 e2       	ldi	r30, 0x26	; 38
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 64       	ori	r24, 0x40	; 64
     bfc:	8c 93       	st	X, r24

	while((GET_BIT(ADCSRA , ADIF))==0);
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	82 95       	swap	r24
     c06:	8f 70       	andi	r24, 0x0F	; 15
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	81 70       	andi	r24, 0x01	; 1
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	a9 f3       	breq	.-22     	; 0xbfe <ADC_U16GetDigitalValue+0x3a>

	SET_BIT(ADCSRA , ADIF);
     c14:	a6 e2       	ldi	r26, 0x26	; 38
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e6 e2       	ldi	r30, 0x26	; 38
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 61       	ori	r24, 0x10	; 16
     c20:	8c 93       	st	X, r24

	Local_U16_value=ADC;
     c22:	e4 e2       	ldi	r30, 0x24	; 36
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01

	return Local_U16_value;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02

}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <ADC_U16GetTempValue>:

//set ref 2.56v

u16 ADC_U16GetTempValue(u8 Copy_U8ChannelNumber){
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	00 d0       	rcall	.+0      	; 0xc44 <ADC_U16GetTempValue+0x6>
     c44:	0f 92       	push	r0
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U16Temp ;

	Local_U16Temp = ADC_U16GetDigitalValue( Copy_U8ChannelNumber );
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_U16GetDigitalValue>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
			// analog = digital * step
	Local_U16Temp =(u16)((Local_U16Temp * 2560UL) / (1024)) ;
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	cc 01       	movw	r24, r24
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	3a e0       	ldi	r19, 0x0A	; 10
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	bc 01       	movw	r22, r24
     c6a:	cd 01       	movw	r24, r26
     c6c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__mulsi3>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	07 2e       	mov	r0, r23
     c76:	7a e0       	ldi	r23, 0x0A	; 10
     c78:	b6 95       	lsr	r27
     c7a:	a7 95       	ror	r26
     c7c:	97 95       	ror	r25
     c7e:	87 95       	ror	r24
     c80:	7a 95       	dec	r23
     c82:	d1 f7       	brne	.-12     	; 0xc78 <ADC_U16GetTempValue+0x3a>
     c84:	70 2d       	mov	r23, r0
     c86:	9a 83       	std	Y+2, r25	; 0x02
     c88:	89 83       	std	Y+1, r24	; 0x01

	Local_U16Temp = Local_U16Temp / 10 ;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	2a e0       	ldi	r18, 0x0A	; 10
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	b9 01       	movw	r22, r18
     c94:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__udivmodhi4>
     c98:	cb 01       	movw	r24, r22
     c9a:	9a 83       	std	Y+2, r25	; 0x02
     c9c:	89 83       	std	Y+1, r24	; 0x01




	return Local_U16Temp;
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <DIO_VidSetPinDirection>:
#include "DIO.h"

/*Function for the direction*/
void DIO_VidSetPinDirection(u8 Copy_U8Port, u8 Copy_U8pin, u8 Copy_U8Direction)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	29 97       	sbiw	r28, 0x09	; 9
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	6a 83       	std	Y+2, r22	; 0x02
     cc6:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8Direction)
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	39 87       	std	Y+9, r19	; 0x09
     cd0:	28 87       	std	Y+8, r18	; 0x08
     cd2:	88 85       	ldd	r24, Y+8	; 0x08
     cd4:	99 85       	ldd	r25, Y+9	; 0x09
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	39 f0       	breq	.+14     	; 0xce8 <DIO_VidSetPinDirection+0x3a>
     cda:	28 85       	ldd	r18, Y+8	; 0x08
     cdc:	39 85       	ldd	r19, Y+9	; 0x09
     cde:	21 30       	cpi	r18, 0x01	; 1
     ce0:	31 05       	cpc	r19, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <DIO_VidSetPinDirection+0x38>
     ce4:	75 c0       	rjmp	.+234    	; 0xdd0 <DIO_VidSetPinDirection+0x122>
     ce6:	e2 c0       	rjmp	.+452    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	{
	       case DIO_INPUT:
	    	   switch (Copy_U8Port)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	3f 83       	std	Y+7, r19	; 0x07
     cf0:	2e 83       	std	Y+6, r18	; 0x06
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	9f 81       	ldd	r25, Y+7	; 0x07
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 05       	cpc	r25, r1
     cfa:	59 f1       	breq	.+86     	; 0xd52 <DIO_VidSetPinDirection+0xa4>
     cfc:	2e 81       	ldd	r18, Y+6	; 0x06
     cfe:	3f 81       	ldd	r19, Y+7	; 0x07
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	2c f4       	brge	.+10     	; 0xd10 <DIO_VidSetPinDirection+0x62>
     d06:	8e 81       	ldd	r24, Y+6	; 0x06
     d08:	9f 81       	ldd	r25, Y+7	; 0x07
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	69 f0       	breq	.+26     	; 0xd28 <DIO_VidSetPinDirection+0x7a>
     d0e:	ce c0       	rjmp	.+412    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
     d10:	2e 81       	ldd	r18, Y+6	; 0x06
     d12:	3f 81       	ldd	r19, Y+7	; 0x07
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	89 f1       	breq	.+98     	; 0xd7c <DIO_VidSetPinDirection+0xce>
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	9f 81       	ldd	r25, Y+7	; 0x07
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_VidSetPinDirection+0x78>
     d24:	40 c0       	rjmp	.+128    	; 0xda6 <DIO_VidSetPinDirection+0xf8>
     d26:	c2 c0       	rjmp	.+388    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	    	   {
	    	        case DIO_PORTA :
	    	        	CLR_BIT(DDRA, Copy_U8pin);
     d28:	aa e3       	ldi	r26, 0x3A	; 58
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e3       	ldi	r30, 0x3A	; 58
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_VidSetPinDirection+0x98>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_VidSetPinDirection+0x94>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	ad c0       	rjmp	.+346    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTB:
	    	        	CLR_BIT(DDRB, Copy_U8pin);
     d52:	a7 e3       	ldi	r26, 0x37	; 55
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e3       	ldi	r30, 0x37	; 55
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_VidSetPinDirection+0xc2>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_VidSetPinDirection+0xbe>
     d74:	80 95       	com	r24
     d76:	84 23       	and	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	98 c0       	rjmp	.+304    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTC:
	    	        	CLR_BIT(DDRC, Copy_U8pin);
     d7c:	a4 e3       	ldi	r26, 0x34	; 52
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e4 e3       	ldi	r30, 0x34	; 52
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_VidSetPinDirection+0xec>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_VidSetPinDirection+0xe8>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	83 c0       	rjmp	.+262    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	    	        	break;

	    	        case DIO_PORTD:
	    	        	CLR_BIT(DDRD, Copy_U8pin);
     da6:	a1 e3       	ldi	r26, 0x31	; 49
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e1 e3       	ldi	r30, 0x31	; 49
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_VidSetPinDirection+0x116>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_VidSetPinDirection+0x112>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	6e c0       	rjmp	.+220    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	    	        	break;


	    	   }break;
	       case DIO_OUTPUT:
	    	   switch (Copy_U8Port)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	3d 83       	std	Y+5, r19	; 0x05
     dd8:	2c 83       	std	Y+4, r18	; 0x04
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	91 05       	cpc	r25, r1
     de2:	49 f1       	breq	.+82     	; 0xe36 <DIO_VidSetPinDirection+0x188>
     de4:	2c 81       	ldd	r18, Y+4	; 0x04
     de6:	3d 81       	ldd	r19, Y+5	; 0x05
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	2c f4       	brge	.+10     	; 0xdf8 <DIO_VidSetPinDirection+0x14a>
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	9d 81       	ldd	r25, Y+5	; 0x05
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	61 f0       	breq	.+24     	; 0xe0e <DIO_VidSetPinDirection+0x160>
     df6:	5a c0       	rjmp	.+180    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
     df8:	2c 81       	ldd	r18, Y+4	; 0x04
     dfa:	3d 81       	ldd	r19, Y+5	; 0x05
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	71 f1       	breq	.+92     	; 0xe5e <DIO_VidSetPinDirection+0x1b0>
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	9d 81       	ldd	r25, Y+5	; 0x05
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	91 05       	cpc	r25, r1
     e0a:	e9 f1       	breq	.+122    	; 0xe86 <DIO_VidSetPinDirection+0x1d8>
     e0c:	4f c0       	rjmp	.+158    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	    	  	  {
	    	  	    case DIO_PORTA :
	    	            SET_BIT(DDRA, Copy_U8pin);
     e0e:	aa e3       	ldi	r26, 0x3A	; 58
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e3       	ldi	r30, 0x3A	; 58
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_VidSetPinDirection+0x17e>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_VidSetPinDirection+0x17a>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	3b c0       	rjmp	.+118    	; 0xeac <DIO_VidSetPinDirection+0x1fe>
 	    	            break;

	    	  	    case DIO_PORTB:
	    	  	    	SET_BIT(DDRB, Copy_U8pin);
     e36:	a7 e3       	ldi	r26, 0x37	; 55
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_VidSetPinDirection+0x1a6>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_VidSetPinDirection+0x1a2>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	27 c0       	rjmp	.+78     	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	    	  	    	break;

	    	  	   case DIO_PORTC:
	    	  	    	 SET_BIT(DDRC, Copy_U8pin);
     e5e:	a4 e3       	ldi	r26, 0x34	; 52
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e4 e3       	ldi	r30, 0x34	; 52
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_VidSetPinDirection+0x1ce>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_VidSetPinDirection+0x1ca>
     e80:	84 2b       	or	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	13 c0       	rjmp	.+38     	; 0xeac <DIO_VidSetPinDirection+0x1fe>
	    	  	    	 break;

	    	  	    case DIO_PORTD:
	    	  	    	 SET_BIT(DDRD, Copy_U8pin);
     e86:	a1 e3       	ldi	r26, 0x31	; 49
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e3       	ldi	r30, 0x31	; 49
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_VidSetPinDirection+0x1f6>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_VidSetPinDirection+0x1f2>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
	    	  	  }break;


	}

}
     eac:	29 96       	adiw	r28, 0x09	; 9
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <DIO_VidSetPinValue>:



/*Function for the  value*/
void DIO_VidSetPinValue(u8 Copy_U8Port, u8 Copy_U8pin, u8 Copy_U8Value)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	29 97       	sbiw	r28, 0x09	; 9
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	6a 83       	std	Y+2, r22	; 0x02
     ed6:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8Value)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	39 87       	std	Y+9, r19	; 0x09
     ee0:	28 87       	std	Y+8, r18	; 0x08
     ee2:	88 85       	ldd	r24, Y+8	; 0x08
     ee4:	99 85       	ldd	r25, Y+9	; 0x09
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	39 f0       	breq	.+14     	; 0xef8 <DIO_VidSetPinValue+0x3a>
     eea:	28 85       	ldd	r18, Y+8	; 0x08
     eec:	39 85       	ldd	r19, Y+9	; 0x09
     eee:	21 30       	cpi	r18, 0x01	; 1
     ef0:	31 05       	cpc	r19, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <DIO_VidSetPinValue+0x38>
     ef4:	75 c0       	rjmp	.+234    	; 0xfe0 <DIO_VidSetPinValue+0x122>
     ef6:	e2 c0       	rjmp	.+452    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		{
		       case DIO_LOW:
		    	   switch (Copy_U8Port)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3f 83       	std	Y+7, r19	; 0x07
     f00:	2e 83       	std	Y+6, r18	; 0x06
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	59 f1       	breq	.+86     	; 0xf62 <DIO_VidSetPinValue+0xa4>
     f0c:	2e 81       	ldd	r18, Y+6	; 0x06
     f0e:	3f 81       	ldd	r19, Y+7	; 0x07
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	2c f4       	brge	.+10     	; 0xf20 <DIO_VidSetPinValue+0x62>
     f16:	8e 81       	ldd	r24, Y+6	; 0x06
     f18:	9f 81       	ldd	r25, Y+7	; 0x07
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	69 f0       	breq	.+26     	; 0xf38 <DIO_VidSetPinValue+0x7a>
     f1e:	ce c0       	rjmp	.+412    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
     f20:	2e 81       	ldd	r18, Y+6	; 0x06
     f22:	3f 81       	ldd	r19, Y+7	; 0x07
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	89 f1       	breq	.+98     	; 0xf8c <DIO_VidSetPinValue+0xce>
     f2a:	8e 81       	ldd	r24, Y+6	; 0x06
     f2c:	9f 81       	ldd	r25, Y+7	; 0x07
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <DIO_VidSetPinValue+0x78>
     f34:	40 c0       	rjmp	.+128    	; 0xfb6 <DIO_VidSetPinValue+0xf8>
     f36:	c2 c0       	rjmp	.+388    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		    	   {
		    	        case DIO_PORTA :
		    	        	CLR_BIT(PORTA, Copy_U8pin);
     f38:	ab e3       	ldi	r26, 0x3B	; 59
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e3       	ldi	r30, 0x3B	; 59
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_VidSetPinValue+0x98>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_VidSetPinValue+0x94>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	ad c0       	rjmp	.+346    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTB:
		    	        	CLR_BIT(PORTB, Copy_U8pin);
     f62:	a8 e3       	ldi	r26, 0x38	; 56
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e3       	ldi	r30, 0x38	; 56
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_VidSetPinValue+0xc2>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_VidSetPinValue+0xbe>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	98 c0       	rjmp	.+304    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTC:
		    	        	CLR_BIT(PORTC, Copy_U8pin);
     f8c:	a5 e3       	ldi	r26, 0x35	; 53
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e3       	ldi	r30, 0x35	; 53
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_VidSetPinValue+0xec>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_VidSetPinValue+0xe8>
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	83 c0       	rjmp	.+262    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		    	        	break;

		    	        case DIO_PORTD:
		    	        	CLR_BIT(PORTD, Copy_U8pin);
     fb6:	a2 e3       	ldi	r26, 0x32	; 50
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e2 e3       	ldi	r30, 0x32	; 50
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_VidSetPinValue+0x116>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_VidSetPinValue+0x112>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	6e c0       	rjmp	.+220    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		    	        	break;


		    	   } break;
		       case DIO_HIGH:
		    	   switch (Copy_U8Port)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3d 83       	std	Y+5, r19	; 0x05
     fe8:	2c 83       	std	Y+4, r18	; 0x04
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	49 f1       	breq	.+82     	; 0x1046 <DIO_VidSetPinValue+0x188>
     ff4:	2c 81       	ldd	r18, Y+4	; 0x04
     ff6:	3d 81       	ldd	r19, Y+5	; 0x05
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	2c f4       	brge	.+10     	; 0x1008 <DIO_VidSetPinValue+0x14a>
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	9d 81       	ldd	r25, Y+5	; 0x05
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	61 f0       	breq	.+24     	; 0x101e <DIO_VidSetPinValue+0x160>
    1006:	5a c0       	rjmp	.+180    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
    1008:	2c 81       	ldd	r18, Y+4	; 0x04
    100a:	3d 81       	ldd	r19, Y+5	; 0x05
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	71 f1       	breq	.+92     	; 0x106e <DIO_VidSetPinValue+0x1b0>
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	e9 f1       	breq	.+122    	; 0x1096 <DIO_VidSetPinValue+0x1d8>
    101c:	4f c0       	rjmp	.+158    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		    	  	  {
		    	  	    case DIO_PORTA :
		    	            SET_BIT(PORTA, Copy_U8pin);
    101e:	ab e3       	ldi	r26, 0x3B	; 59
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	eb e3       	ldi	r30, 0x3B	; 59
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_VidSetPinValue+0x17e>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_VidSetPinValue+0x17a>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	3b c0       	rjmp	.+118    	; 0x10bc <DIO_VidSetPinValue+0x1fe>
	 	    	            break;

		    	  	    case DIO_PORTB:
		    	  	    	SET_BIT(PORTB, Copy_U8pin);
    1046:	a8 e3       	ldi	r26, 0x38	; 56
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e8 e3       	ldi	r30, 0x38	; 56
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_VidSetPinValue+0x1a6>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_VidSetPinValue+0x1a2>
    1068:	84 2b       	or	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	27 c0       	rjmp	.+78     	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		    	  	    	break;

		    	  	   case DIO_PORTC:
		    	  	    	 SET_BIT(PORTC, Copy_U8pin);
    106e:	a5 e3       	ldi	r26, 0x35	; 53
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_VidSetPinValue+0x1ce>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_VidSetPinValue+0x1ca>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	13 c0       	rjmp	.+38     	; 0x10bc <DIO_VidSetPinValue+0x1fe>
		    	  	    	 break;

		    	  	    case DIO_PORTD:
		    	  	    	 SET_BIT(PORTD, Copy_U8pin);
    1096:	a2 e3       	ldi	r26, 0x32	; 50
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e2 e3       	ldi	r30, 0x32	; 50
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_VidSetPinValue+0x1f6>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_VidSetPinValue+0x1f2>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24

		    	  	  }break;


		}
}
    10bc:	29 96       	adiw	r28, 0x09	; 9
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <DIO_VidPortDirection>:
/*Function to set port Direction*/
void DIO_VidPortDirection (u8 Copy_U8Port , u8  Copy_U8Direction)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <DIO_VidPortDirection+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <DIO_VidPortDirection+0x8>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	6a 83       	std	Y+2, r22	; 0x02

     switch (Copy_U8Port)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3c 83       	std	Y+4, r19	; 0x04
    10e6:	2b 83       	std	Y+3, r18	; 0x03
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	d1 f0       	breq	.+52     	; 0x1126 <DIO_VidPortDirection+0x58>
    10f2:	2b 81       	ldd	r18, Y+3	; 0x03
    10f4:	3c 81       	ldd	r19, Y+4	; 0x04
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <DIO_VidPortDirection+0x38>
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	61 f0       	breq	.+24     	; 0x111c <DIO_VidPortDirection+0x4e>
    1104:	1e c0       	rjmp	.+60     	; 0x1142 <DIO_VidPortDirection+0x74>
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	81 f0       	breq	.+32     	; 0x1130 <DIO_VidPortDirection+0x62>
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	81 f0       	breq	.+32     	; 0x113a <DIO_VidPortDirection+0x6c>
    111a:	13 c0       	rjmp	.+38     	; 0x1142 <DIO_VidPortDirection+0x74>
		   {
		      case DIO_PORTA :
		        	DDRA = Copy_U8Direction;
    111c:	ea e3       	ldi	r30, 0x3A	; 58
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	80 83       	st	Z, r24
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <DIO_VidPortDirection+0x74>
		           	break;

	   	      case DIO_PORTB:
		    	  DDRB = Copy_U8Direction;
    1126:	e7 e3       	ldi	r30, 0x37	; 55
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 83       	st	Z, r24
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <DIO_VidPortDirection+0x74>
		    	  break;

		      case DIO_PORTC:
		    	   DDRC = Copy_U8Direction;
    1130:	e4 e3       	ldi	r30, 0x34	; 52
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	80 83       	st	Z, r24
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <DIO_VidPortDirection+0x74>
		    	    break;

		      case DIO_PORTD:
		    	   DDRD = Copy_U8Direction;
    113a:	e1 e3       	ldi	r30, 0x31	; 49
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	80 83       	st	Z, r24
		    	    break;


		    	   }
		}
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <DIO_VidPortValue>:


/*Function to set port value*/
void DIO_VidPortValue (u8 Copy_U8Port , u8  Copy_U8Value)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_VidPortValue+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_VidPortValue+0x8>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8Port)
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3c 83       	std	Y+4, r19	; 0x04
    1168:	2b 83       	std	Y+3, r18	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <DIO_VidPortValue+0x58>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	2c f4       	brge	.+10     	; 0x1188 <DIO_VidPortValue+0x38>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	61 f0       	breq	.+24     	; 0x119e <DIO_VidPortValue+0x4e>
    1186:	1e c0       	rjmp	.+60     	; 0x11c4 <DIO_VidPortValue+0x74>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <DIO_VidPortValue+0x62>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	81 f0       	breq	.+32     	; 0x11bc <DIO_VidPortValue+0x6c>
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <DIO_VidPortValue+0x74>
	{
	          case DIO_PORTA :
			    	PORTA = Copy_U8Value;
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	80 83       	st	Z, r24
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <DIO_VidPortValue+0x74>
		 	        break;

		      case DIO_PORTB:
			    	PORTB = Copy_U8Value;
    11a8:	e8 e3       	ldi	r30, 0x38	; 56
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 83       	st	Z, r24
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <DIO_VidPortValue+0x74>
			    	 break;

			  case DIO_PORTC:
			       PORTC = Copy_U8Value;
    11b2:	e5 e3       	ldi	r30, 0x35	; 53
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <DIO_VidPortValue+0x74>
			    	  break;

			  case DIO_PORTD:
			    	PORTD = Copy_U8Value;
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
			    	   break;

	}

}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <DIO_VidTogglePinValue>:

/*Function to set port Direction*/
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8  Copy_U8Pin)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_VidTogglePinValue+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <DIO_VidTogglePinValue+0x8>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8Port)
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3c 83       	std	Y+4, r19	; 0x04
    11ea:	2b 83       	std	Y+3, r18	; 0x03
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	49 f1       	breq	.+82     	; 0x1248 <DIO_VidTogglePinValue+0x76>
    11f6:	2b 81       	ldd	r18, Y+3	; 0x03
    11f8:	3c 81       	ldd	r19, Y+4	; 0x04
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <DIO_VidTogglePinValue+0x38>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	61 f0       	breq	.+24     	; 0x1220 <DIO_VidTogglePinValue+0x4e>
    1208:	5a c0       	rjmp	.+180    	; 0x12be <DIO_VidTogglePinValue+0xec>
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	71 f1       	breq	.+92     	; 0x1270 <DIO_VidTogglePinValue+0x9e>
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	e9 f1       	breq	.+122    	; 0x1298 <DIO_VidTogglePinValue+0xc6>
    121e:	4f c0       	rjmp	.+158    	; 0x12be <DIO_VidTogglePinValue+0xec>
	{
               	 case DIO_PORTA :
               		TOGGLE_BIT(PORTA,Copy_U8Pin);
    1220:	ab e3       	ldi	r26, 0x3B	; 59
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	eb e3       	ldi	r30, 0x3B	; 59
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_VidTogglePinValue+0x6c>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_VidTogglePinValue+0x68>
    1242:	84 27       	eor	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	3b c0       	rjmp	.+118    	; 0x12be <DIO_VidTogglePinValue+0xec>
					break;

			      case DIO_PORTB:
			    	  TOGGLE_BIT(PORTB,Copy_U8Pin);
    1248:	a8 e3       	ldi	r26, 0x38	; 56
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e8 e3       	ldi	r30, 0x38	; 56
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_VidTogglePinValue+0x94>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_VidTogglePinValue+0x90>
    126a:	84 27       	eor	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	27 c0       	rjmp	.+78     	; 0x12be <DIO_VidTogglePinValue+0xec>
				    	 break;

				  case DIO_PORTC:
					  TOGGLE_BIT(PORTC,Copy_U8Pin);
    1270:	a5 e3       	ldi	r26, 0x35	; 53
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e5 e3       	ldi	r30, 0x35	; 53
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_VidTogglePinValue+0xbc>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_VidTogglePinValue+0xb8>
    1292:	84 27       	eor	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	13 c0       	rjmp	.+38     	; 0x12be <DIO_VidTogglePinValue+0xec>
				    	  break;

				  case DIO_PORTD:
					  TOGGLE_BIT(PORTD,Copy_U8Pin);
    1298:	a2 e3       	ldi	r26, 0x32	; 50
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e2 e3       	ldi	r30, 0x32	; 50
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_VidTogglePinValue+0xe4>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_VidTogglePinValue+0xe0>
    12ba:	84 27       	eor	r24, r20
    12bc:	8c 93       	st	X, r24
				    	   break;
	}

}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <DIO_U8GetPinValue>:

/*function to get state of input value*/
u8 DIO_U8GetPinValue(u8 Copy_U8Port,u8  Copy_U8Pin)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <DIO_U8GetPinValue+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <DIO_U8GetPinValue+0x8>
    12d4:	0f 92       	push	r0
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	8a 83       	std	Y+2, r24	; 0x02
    12dc:	6b 83       	std	Y+3, r22	; 0x03
	u8 read;
	switch (Copy_U8Port)
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	3d 83       	std	Y+5, r19	; 0x05
    12e6:	2c 83       	std	Y+4, r18	; 0x04
    12e8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ea:	5d 81       	ldd	r21, Y+5	; 0x05
    12ec:	41 30       	cpi	r20, 0x01	; 1
    12ee:	51 05       	cpc	r21, r1
    12f0:	41 f1       	breq	.+80     	; 0x1342 <DIO_U8GetPinValue+0x76>
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	91 05       	cpc	r25, r1
    12fa:	34 f4       	brge	.+12     	; 0x1308 <DIO_U8GetPinValue+0x3c>
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	21 15       	cp	r18, r1
    1302:	31 05       	cpc	r19, r1
    1304:	61 f0       	breq	.+24     	; 0x131e <DIO_U8GetPinValue+0x52>
    1306:	52 c0       	rjmp	.+164    	; 0x13ac <DIO_U8GetPinValue+0xe0>
    1308:	4c 81       	ldd	r20, Y+4	; 0x04
    130a:	5d 81       	ldd	r21, Y+5	; 0x05
    130c:	42 30       	cpi	r20, 0x02	; 2
    130e:	51 05       	cpc	r21, r1
    1310:	51 f1       	breq	.+84     	; 0x1366 <DIO_U8GetPinValue+0x9a>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	b9 f1       	breq	.+110    	; 0x138a <DIO_U8GetPinValue+0xbe>
    131c:	47 c0       	rjmp	.+142    	; 0x13ac <DIO_U8GetPinValue+0xe0>
		{
	               	 case DIO_PINA :
	               		read= GET_BIT(PINA,Copy_U8Pin);
    131e:	e9 e3       	ldi	r30, 0x39	; 57
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a9 01       	movw	r20, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_U8GetPinValue+0x6a>
    1332:	55 95       	asr	r21
    1334:	47 95       	ror	r20
    1336:	8a 95       	dec	r24
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_U8GetPinValue+0x66>
    133a:	ca 01       	movw	r24, r20
    133c:	81 70       	andi	r24, 0x01	; 1
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	35 c0       	rjmp	.+106    	; 0x13ac <DIO_U8GetPinValue+0xe0>
						break;

				      case DIO_PINB:
				    	  read= GET_BIT(PINB,Copy_U8Pin);
    1342:	e6 e3       	ldi	r30, 0x36	; 54
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_U8GetPinValue+0x8e>
    1356:	55 95       	asr	r21
    1358:	47 95       	ror	r20
    135a:	8a 95       	dec	r24
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_U8GetPinValue+0x8a>
    135e:	ca 01       	movw	r24, r20
    1360:	81 70       	andi	r24, 0x01	; 1
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	23 c0       	rjmp	.+70     	; 0x13ac <DIO_U8GetPinValue+0xe0>
					    	 break;

					  case DIO_PINC:
						  read=GET_BIT(PINC,Copy_U8Pin);
    1366:	e3 e3       	ldi	r30, 0x33	; 51
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a9 01       	movw	r20, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_U8GetPinValue+0xb2>
    137a:	55 95       	asr	r21
    137c:	47 95       	ror	r20
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_U8GetPinValue+0xae>
    1382:	ca 01       	movw	r24, r20
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	11 c0       	rjmp	.+34     	; 0x13ac <DIO_U8GetPinValue+0xe0>
					    	  break;

					  case DIO_PIND:
						  read= GET_BIT(PIND,Copy_U8Pin);
    138a:	e0 e3       	ldi	r30, 0x30	; 48
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_U8GetPinValue+0xd6>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_U8GetPinValue+0xd2>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
					    	   break;
		}
	return read;
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <Timers_VidTimer0SetCallBack>:
void (*Timer0_PFun)(void);



void Timers_VidTimer0SetCallBack( void (*Timer0_Ptr)(void) )
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <Timers_VidTimer0SetCallBack+0x6>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PFun = Timer0_Ptr ;
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	90 93 69 00 	sts	0x0069, r25
    13d4:	80 93 68 00 	sts	0x0068, r24
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <Timer_VidTimer1Init>:
//servo motor


void Timer_VidTimer1Init(void){
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	// select mode
	//fast PWM -->14
	CLR_BIT(TCCR1A,WGM10);
    13ea:	af e4       	ldi	r26, 0x4F	; 79
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ef e4       	ldi	r30, 0x4F	; 79
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8e 7f       	andi	r24, 0xFE	; 254
    13f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    13f8:	af e4       	ldi	r26, 0x4F	; 79
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ef e4       	ldi	r30, 0x4F	; 79
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	82 60       	ori	r24, 0x02	; 2
    1404:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    1406:	ae e4       	ldi	r26, 0x4E	; 78
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ee e4       	ldi	r30, 0x4E	; 78
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    1414:	ae e4       	ldi	r26, 0x4E	; 78
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ee e4       	ldi	r30, 0x4E	; 78
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	80 61       	ori	r24, 0x10	; 16
    1420:	8c 93       	st	X, r24
	//select OC1A PIN -->Fast PWM
	CLR_BIT(TCCR1A,COM1A0);
    1422:	af e4       	ldi	r26, 0x4F	; 79
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ef e4       	ldi	r30, 0x4F	; 79
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8f 7b       	andi	r24, 0xBF	; 191
    142e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    1430:	af e4       	ldi	r26, 0x4F	; 79
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ef e4       	ldi	r30, 0x4F	; 79
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8c 93       	st	X, r24
	//setup value of ICR1

	ICR1=19999;
    143e:	e6 e4       	ldi	r30, 0x46	; 70
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8f e1       	ldi	r24, 0x1F	; 31
    1444:	9e e4       	ldi	r25, 0x4E	; 78
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24

	//setup OCR1A--> for the angle of serve
	OCR1A=500;
    144a:	ea e4       	ldi	r30, 0x4A	; 74
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	84 ef       	ldi	r24, 0xF4	; 244
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
	//presalar-->8
	CLR_BIT(TCCR1B,CS10);
    1456:	ae e4       	ldi	r26, 0x4E	; 78
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ee e4       	ldi	r30, 0x4E	; 78
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8e 7f       	andi	r24, 0xFE	; 254
    1462:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    1464:	ae e4       	ldi	r26, 0x4E	; 78
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ee e4       	ldi	r30, 0x4E	; 78
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	82 60       	ori	r24, 0x02	; 2
    1470:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    1472:	ae e4       	ldi	r26, 0x4E	; 78
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ee e4       	ldi	r30, 0x4E	; 78
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8b 7f       	andi	r24, 0xFB	; 251
    147e:	8c 93       	st	X, r24
}
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <Timers_VidTimer0Init>:


void Timers_VidTimer0Init(void)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT( TCCR0 , WGM01 );
	/*CTC Mode*/
//	CLR_BIT( TCCR0 , WGM00 );
//	SET_BIT( TCCR0 , WGM01 );
	//fast PWM mode
	SET_BIT( TCCR0 , WGM00 );
    148e:	a3 e5       	ldi	r26, 0x53	; 83
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e3 e5       	ldi	r30, 0x53	; 83
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 64       	ori	r24, 0x40	; 64
    149a:	8c 93       	st	X, r24
	SET_BIT( TCCR0 , WGM01 );
    149c:	a3 e5       	ldi	r26, 0x53	; 83
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e3 e5       	ldi	r30, 0x53	; 83
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	88 60       	ori	r24, 0x08	; 8
    14a8:	8c 93       	st	X, r24

	/*setup the mode of OC0 pin*/

	CLR_BIT(TCCR0,COM00);
    14aa:	a3 e5       	ldi	r26, 0x53	; 83
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e3 e5       	ldi	r30, 0x53	; 83
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8f 7e       	andi	r24, 0xEF	; 239
    14b6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    14b8:	a3 e5       	ldi	r26, 0x53	; 83
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e3 e5       	ldi	r30, 0x53	; 83
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 62       	ori	r24, 0x20	; 32
    14c4:	8c 93       	st	X, r24
	/*Setup the OCR Value*/
	//OCR0 = 99 ;

	/*Select Prescaler factor*/
	/*/8 */
	CLR_BIT( TCCR0 , CS00 );
    14c6:	a3 e5       	ldi	r26, 0x53	; 83
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e3 e5       	ldi	r30, 0x53	; 83
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8e 7f       	andi	r24, 0xFE	; 254
    14d2:	8c 93       	st	X, r24
	SET_BIT( TCCR0 , CS01 );
    14d4:	a3 e5       	ldi	r26, 0x53	; 83
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e3 e5       	ldi	r30, 0x53	; 83
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	8c 93       	st	X, r24
	CLR_BIT( TCCR0 , CS02 );
    14e2:	a3 e5       	ldi	r26, 0x53	; 83
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e3 e5       	ldi	r30, 0x53	; 83
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8b 7f       	andi	r24, 0xFB	; 251
    14ee:	8c 93       	st	X, r24
	OCR0=0;
    14f0:	ec e5       	ldi	r30, 0x5C	; 92
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	10 82       	st	Z, r1
}
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <USART>:

#include"USART.h"
#include"avr/io.h"


void USART(void){
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN0 , DIO_INPUT );
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection( DIO_PORTD , DIO_PIN1 , DIO_OUTPUT );
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>

		USART_VidInit();
    1518:	0e 94 91 0a 	call	0x1522	; 0x1522 <USART_VidInit>

}
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <USART_VidInit>:
void USART_VidInit(void)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <USART_VidInit+0x6>
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8UCSRCValue = 0b10000000 ;
    152e:	80 e8       	ldi	r24, 0x80	; 128
    1530:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U8BaudRateValue = 51 ;
    1532:	83 e3       	ldi	r24, 0x33	; 51
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01

	/* Setup Baud Rate To 9600 */
	UBRRL = (u8)Local_U8BaudRateValue ;
    153a:	e9 e2       	ldi	r30, 0x29	; 41
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	80 83       	st	Z, r24
	UBRRH = (u8)(Local_U8BaudRateValue >> 8);
    1542:	e0 e4       	ldi	r30, 0x40	; 64
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	89 2f       	mov	r24, r25
    154c:	99 27       	eor	r25, r25
    154e:	80 83       	st	Z, r24

	/* Normal Speed */
	CLR_BIT( UCSRA , U2X );
    1550:	ab e2       	ldi	r26, 0x2B	; 43
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	eb e2       	ldi	r30, 0x2B	; 43
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	8d 7f       	andi	r24, 0xFD	; 253
    155c:	8c 93       	st	X, r24
	/* Disable MPM */
	CLR_BIT( UCSRA , MPCM );
    155e:	ab e2       	ldi	r26, 0x2B	; 43
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e2       	ldi	r30, 0x2B	; 43
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8e 7f       	andi	r24, 0xFE	; 254
    156a:	8c 93       	st	X, r24
	/* Rx , Tx Enable*/
	SET_BIT( UCSRB , RXEN );
    156c:	aa e2       	ldi	r26, 0x2A	; 42
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ea e2       	ldi	r30, 0x2A	; 42
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	80 61       	ori	r24, 0x10	; 16
    1578:	8c 93       	st	X, r24
	SET_BIT( UCSRB , TXEN );
    157a:	aa e2       	ldi	r26, 0x2A	; 42
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ea e2       	ldi	r30, 0x2A	; 42
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	88 60       	ori	r24, 0x08	; 8
    1586:	8c 93       	st	X, r24
	/* Select Char Size --> 8bits */
	CLR_BIT( UCSRB , UCSZ2 );
    1588:	aa e2       	ldi	r26, 0x2A	; 42
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ea e2       	ldi	r30, 0x2A	; 42
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8b 7f       	andi	r24, 0xFB	; 251
    1594:	8c 93       	st	X, r24
	SET_BIT( Local_U8UCSRCValue , UCSZ0 );
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	82 60       	ori	r24, 0x02	; 2
    159a:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT( Local_U8UCSRCValue , UCSZ1 );
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	84 60       	ori	r24, 0x04	; 4
    15a0:	8b 83       	std	Y+3, r24	; 0x03
	/* Select Asynch Mode */
	CLR_BIT( Local_U8UCSRCValue , UMSEL );
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	8f 7b       	andi	r24, 0xBF	; 191
    15a6:	8b 83       	std	Y+3, r24	; 0x03
	/* Parity --> Disabled */
	CLR_BIT( Local_U8UCSRCValue , UPM0 );
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	8f 7e       	andi	r24, 0xEF	; 239
    15ac:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT( Local_U8UCSRCValue , UPM1 );
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	8f 7d       	andi	r24, 0xDF	; 223
    15b2:	8b 83       	std	Y+3, r24	; 0x03
	/* Stop Bits --> 2 */
	SET_BIT( Local_U8UCSRCValue , USBS );
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	88 60       	ori	r24, 0x08	; 8
    15b8:	8b 83       	std	Y+3, r24	; 0x03

	/* Update at the Reg*/
	UCSRC = Local_U8UCSRCValue ;
    15ba:	e0 e4       	ldi	r30, 0x40	; 64
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	80 83       	st	Z, r24

}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <USART_VidSendChar>:


void USART_VidSendChar( u8 Copy_U8Char )
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
	while( (GET_BIT( UCSRA ,  UDRE )) == 0 );
    15da:	eb e2       	ldi	r30, 0x2B	; 43
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	82 95       	swap	r24
    15e2:	86 95       	lsr	r24
    15e4:	87 70       	andi	r24, 0x07	; 7
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	a1 f3       	breq	.-24     	; 0x15da <USART_VidSendChar+0xc>

	UDR = Copy_U8Char ;
    15f2:	ec e2       	ldi	r30, 0x2C	; 44
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	80 83       	st	Z, r24
}
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <USART_U8GetChar>:


u8 USART_U8GetChar( void )
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Char ;
	while( (GET_BIT( UCSRA ,  RXC )) == 0 );
    160c:	eb e2       	ldi	r30, 0x2B	; 43
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	88 23       	and	r24, r24
    1614:	dc f7       	brge	.-10     	; 0x160c <USART_U8GetChar+0xa>
	Local_U8Char = UDR ;
    1616:	ec e2       	ldi	r30, 0x2C	; 44
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	89 83       	std	Y+1, r24	; 0x01
	return Local_U8Char ;
    161e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <USART_U8checkGetChar>:


u8 USART_U8checkGetChar( void )
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <USART_U8checkGetChar+0x6>
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Char ;
	if( (GET_BIT( UCSRA ,  RXC )) == 0 ){
    1632:	eb e2       	ldi	r30, 0x2B	; 43
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	88 23       	and	r24, r24
    163a:	14 f0       	brlt	.+4      	; 0x1640 <USART_U8checkGetChar+0x18>
		return 0;
    163c:	1a 82       	std	Y+2, r1	; 0x02
    163e:	06 c0       	rjmp	.+12     	; 0x164c <USART_U8checkGetChar+0x24>
	}
	Local_U8Char = UDR ;
    1640:	ec e2       	ldi	r30, 0x2C	; 44
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	89 83       	std	Y+1, r24	; 0x01
	return Local_U8Char ;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <main>:
#include "Timers.h"
#include "ADC.h"

 ///
void main (void)
{
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	ca 54       	subi	r28, 0x4A	; 74
    1666:	d0 40       	sbci	r29, 0x00	; 0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61

	USART();
    1672:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <USART>
	ADC_VidInit();
    1676:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_VidInit>
	Timers_VidTimer0Init();
    167a:	0e 94 43 0a 	call	0x1486	; 0x1486 <Timers_VidTimer0Init>
	u16 Local_U16Temp;
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN3,DIO_OUTPUT);
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	63 e0       	ldi	r22, 0x03	; 3
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	64 e0       	ldi	r22, 0x04	; 4
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	65 e0       	ldi	r22, 0x05	; 5
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	66 e0       	ldi	r22, 0x06	; 6
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	67 e0       	ldi	r22, 0x07	; 7
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	63 e0       	ldi	r22, 0x03	; 3
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	64 e0       	ldi	r22, 0x04	; 4
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_LOW);
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	65 e0       	ldi	r22, 0x05	; 5
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	66 e0       	ldi	r22, 0x06	; 6
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	67 e0       	ldi	r22, 0x07	; 7
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_VidSetPinValue>

	DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	63 e0       	ldi	r22, 0x03	; 3
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	63 e0       	ldi	r22, 0x03	; 3
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_VidSetPinValue>





	u8 x = 0 ;
    16f6:	fe 01       	movw	r30, r28
    16f8:	e8 5b       	subi	r30, 0xB8	; 184
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	10 82       	st	Z, r1
	u8 temp='n';
    16fe:	fe 01       	movw	r30, r28
    1700:	e9 5b       	subi	r30, 0xB9	; 185
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	8e e6       	ldi	r24, 0x6E	; 110
    1706:	80 83       	st	Z, r24

while(1){

	x = USART_U8checkGetChar();
    1708:	0e 94 14 0b 	call	0x1628	; 0x1628 <USART_U8checkGetChar>
    170c:	fe 01       	movw	r30, r28
    170e:	e8 5b       	subi	r30, 0xB8	; 184
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	80 83       	st	Z, r24

			if(x=='t'){
    1714:	fe 01       	movw	r30, r28
    1716:	e8 5b       	subi	r30, 0xB8	; 184
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	84 37       	cpi	r24, 0x74	; 116
    171e:	09 f0       	breq	.+2      	; 0x1722 <main+0xca>
    1720:	8e c0       	rjmp	.+284    	; 0x183e <main+0x1e6>
    1722:	fe 01       	movw	r30, r28
    1724:	ed 5b       	subi	r30, 0xBD	; 189
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 ea       	ldi	r26, 0xA0	; 160
    172e:	b0 e4       	ldi	r27, 0x40	; 64
    1730:	80 83       	st	Z, r24
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	a2 83       	std	Z+2, r26	; 0x02
    1736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	8e 01       	movw	r16, r28
    173a:	01 5c       	subi	r16, 0xC1	; 193
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	fe 01       	movw	r30, r28
    1740:	ed 5b       	subi	r30, 0xBD	; 189
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	f8 01       	movw	r30, r16
    175e:	80 83       	st	Z, r24
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	a2 83       	std	Z+2, r26	; 0x02
    1764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1766:	fe 01       	movw	r30, r28
    1768:	ff 96       	adiw	r30, 0x3f	; 63
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e8       	ldi	r20, 0x80	; 128
    1778:	5f e3       	ldi	r21, 0x3F	; 63
    177a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    177e:	88 23       	and	r24, r24
    1780:	2c f4       	brge	.+10     	; 0x178c <main+0x134>
		__ticks = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9e af       	std	Y+62, r25	; 0x3e
    1788:	8d af       	std	Y+61, r24	; 0x3d
    178a:	46 c0       	rjmp	.+140    	; 0x1818 <main+0x1c0>
	else if (__tmp > 65535)
    178c:	fe 01       	movw	r30, r28
    178e:	ff 96       	adiw	r30, 0x3f	; 63
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	64 f5       	brge	.+88     	; 0x1800 <main+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a8:	fe 01       	movw	r30, r28
    17aa:	ed 5b       	subi	r30, 0xBD	; 189
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e2       	ldi	r20, 0x20	; 32
    17bc:	51 e4       	ldi	r21, 0x41	; 65
    17be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9e af       	std	Y+62, r25	; 0x3e
    17d4:	8d af       	std	Y+61, r24	; 0x3d
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <main+0x19e>
    17d8:	88 ec       	ldi	r24, 0xC8	; 200
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9c af       	std	Y+60, r25	; 0x3c
    17de:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    17e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <main+0x18c>
    17e8:	9c af       	std	Y+60, r25	; 0x3c
    17ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	9e af       	std	Y+62, r25	; 0x3e
    17f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	69 f7       	brne	.-38     	; 0x17d8 <main+0x180>
    17fe:	16 c0       	rjmp	.+44     	; 0x182c <main+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1800:	fe 01       	movw	r30, r28
    1802:	ff 96       	adiw	r30, 0x3f	; 63
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9e af       	std	Y+62, r25	; 0x3e
    1816:	8d af       	std	Y+61, r24	; 0x3d
    1818:	8d ad       	ldd	r24, Y+61	; 0x3d
    181a:	9e ad       	ldd	r25, Y+62	; 0x3e
    181c:	9a af       	std	Y+58, r25	; 0x3a
    181e:	89 af       	std	Y+57, r24	; 0x39
    1820:	89 ad       	ldd	r24, Y+57	; 0x39
    1822:	9a ad       	ldd	r25, Y+58	; 0x3a
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <main+0x1cc>
    1828:	9a af       	std	Y+58, r25	; 0x3a
    182a:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(5);
				USART_VidSendChar(temp);
    182c:	fe 01       	movw	r30, r28
    182e:	e9 5b       	subi	r30, 0xB9	; 185
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <USART_VidSendChar>
    183c:	36 c0       	rjmp	.+108    	; 0x18aa <main+0x252>

			}else if(x=='0'){
    183e:	fe 01       	movw	r30, r28
    1840:	e8 5b       	subi	r30, 0xB8	; 184
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	80 81       	ld	r24, Z
    1846:	80 33       	cpi	r24, 0x30	; 48
    1848:	29 f4       	brne	.+10     	; 0x1854 <main+0x1fc>
			DIO_VidTogglePinValue(DIO_PORTD,DIO_PIN3);
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	63 e0       	ldi	r22, 0x03	; 3
    184e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_VidTogglePinValue>
    1852:	2b c0       	rjmp	.+86     	; 0x18aa <main+0x252>

			}else if(x=='1'){
    1854:	fe 01       	movw	r30, r28
    1856:	e8 5b       	subi	r30, 0xB8	; 184
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	80 81       	ld	r24, Z
    185c:	81 33       	cpi	r24, 0x31	; 49
    185e:	29 f4       	brne	.+10     	; 0x186a <main+0x212>
				DIO_VidTogglePinValue(DIO_PORTD,DIO_PIN4);
    1860:	83 e0       	ldi	r24, 0x03	; 3
    1862:	64 e0       	ldi	r22, 0x04	; 4
    1864:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_VidTogglePinValue>
    1868:	20 c0       	rjmp	.+64     	; 0x18aa <main+0x252>

			}else if(x=='a'){
    186a:	fe 01       	movw	r30, r28
    186c:	e8 5b       	subi	r30, 0xB8	; 184
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	81 36       	cpi	r24, 0x61	; 97
    1874:	29 f4       	brne	.+10     	; 0x1880 <main+0x228>
				DIO_VidTogglePinValue(DIO_PORTD,DIO_PIN5);
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	65 e0       	ldi	r22, 0x05	; 5
    187a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_VidTogglePinValue>
    187e:	15 c0       	rjmp	.+42     	; 0x18aa <main+0x252>

			}else if(x=='b'){
    1880:	fe 01       	movw	r30, r28
    1882:	e8 5b       	subi	r30, 0xB8	; 184
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 81       	ld	r24, Z
    1888:	82 36       	cpi	r24, 0x62	; 98
    188a:	29 f4       	brne	.+10     	; 0x1896 <main+0x23e>
				DIO_VidTogglePinValue(DIO_PORTD,DIO_PIN6);
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	66 e0       	ldi	r22, 0x06	; 6
    1890:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_VidTogglePinValue>
    1894:	0a c0       	rjmp	.+20     	; 0x18aa <main+0x252>

			}else if(x=='c'){
    1896:	fe 01       	movw	r30, r28
    1898:	e8 5b       	subi	r30, 0xB8	; 184
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	83 36       	cpi	r24, 0x63	; 99
    18a0:	21 f4       	brne	.+8      	; 0x18aa <main+0x252>
				DIO_VidTogglePinValue(DIO_PORTD,DIO_PIN7);
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	67 e0       	ldi	r22, 0x07	; 7
    18a6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_VidTogglePinValue>
			}else if(x=='0'){

			}


	Local_U16Temp = ADC_U16GetTempValue( ADC_CHANNEL_0 );
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	0e 94 1f 06 	call	0xc3e	; 0xc3e <ADC_U16GetTempValue>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e7 5b       	subi	r30, 0xB7	; 183
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a8 e4       	ldi	r26, 0x48	; 72
    18c0:	b2 e4       	ldi	r27, 0x42	; 66
    18c2:	8d ab       	std	Y+53, r24	; 0x35
    18c4:	9e ab       	std	Y+54, r25	; 0x36
    18c6:	af ab       	std	Y+55, r26	; 0x37
    18c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	6d a9       	ldd	r22, Y+53	; 0x35
    18cc:	7e a9       	ldd	r23, Y+54	; 0x36
    18ce:	8f a9       	ldd	r24, Y+55	; 0x37
    18d0:	98 ad       	ldd	r25, Y+56	; 0x38
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a ef       	ldi	r20, 0xFA	; 250
    18d8:	54 e4       	ldi	r21, 0x44	; 68
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	89 ab       	std	Y+49, r24	; 0x31
    18e4:	9a ab       	std	Y+50, r25	; 0x32
    18e6:	ab ab       	std	Y+51, r26	; 0x33
    18e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18ea:	69 a9       	ldd	r22, Y+49	; 0x31
    18ec:	7a a9       	ldd	r23, Y+50	; 0x32
    18ee:	8b a9       	ldd	r24, Y+51	; 0x33
    18f0:	9c a9       	ldd	r25, Y+52	; 0x34
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	2c f4       	brge	.+10     	; 0x190c <main+0x2b4>
		__ticks = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	98 ab       	std	Y+48, r25	; 0x30
    1908:	8f a7       	std	Y+47, r24	; 0x2f
    190a:	3f c0       	rjmp	.+126    	; 0x198a <main+0x332>
	else if (__tmp > 65535)
    190c:	69 a9       	ldd	r22, Y+49	; 0x31
    190e:	7a a9       	ldd	r23, Y+50	; 0x32
    1910:	8b a9       	ldd	r24, Y+51	; 0x33
    1912:	9c a9       	ldd	r25, Y+52	; 0x34
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	4f e7       	ldi	r20, 0x7F	; 127
    191a:	57 e4       	ldi	r21, 0x47	; 71
    191c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1920:	18 16       	cp	r1, r24
    1922:	4c f5       	brge	.+82     	; 0x1976 <main+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1924:	6d a9       	ldd	r22, Y+53	; 0x35
    1926:	7e a9       	ldd	r23, Y+54	; 0x36
    1928:	8f a9       	ldd	r24, Y+55	; 0x37
    192a:	98 ad       	ldd	r25, Y+56	; 0x38
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	98 ab       	std	Y+48, r25	; 0x30
    194a:	8f a7       	std	Y+47, r24	; 0x2f
    194c:	0f c0       	rjmp	.+30     	; 0x196c <main+0x314>
    194e:	88 ec       	ldi	r24, 0xC8	; 200
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9e a7       	std	Y+46, r25	; 0x2e
    1954:	8d a7       	std	Y+45, r24	; 0x2d
    1956:	8d a5       	ldd	r24, Y+45	; 0x2d
    1958:	9e a5       	ldd	r25, Y+46	; 0x2e
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <main+0x302>
    195e:	9e a7       	std	Y+46, r25	; 0x2e
    1960:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1962:	8f a5       	ldd	r24, Y+47	; 0x2f
    1964:	98 a9       	ldd	r25, Y+48	; 0x30
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	98 ab       	std	Y+48, r25	; 0x30
    196a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196c:	8f a5       	ldd	r24, Y+47	; 0x2f
    196e:	98 a9       	ldd	r25, Y+48	; 0x30
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	69 f7       	brne	.-38     	; 0x194e <main+0x2f6>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <main+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1976:	69 a9       	ldd	r22, Y+49	; 0x31
    1978:	7a a9       	ldd	r23, Y+50	; 0x32
    197a:	8b a9       	ldd	r24, Y+51	; 0x33
    197c:	9c a9       	ldd	r25, Y+52	; 0x34
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	98 ab       	std	Y+48, r25	; 0x30
    1988:	8f a7       	std	Y+47, r24	; 0x2f
    198a:	8f a5       	ldd	r24, Y+47	; 0x2f
    198c:	98 a9       	ldd	r25, Y+48	; 0x30
    198e:	9c a7       	std	Y+44, r25	; 0x2c
    1990:	8b a7       	std	Y+43, r24	; 0x2b
    1992:	8b a5       	ldd	r24, Y+43	; 0x2b
    1994:	9c a5       	ldd	r25, Y+44	; 0x2c
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <main+0x33e>
    199a:	9c a7       	std	Y+44, r25	; 0x2c
    199c:	8b a7       	std	Y+43, r24	; 0x2b

	     _delay_ms(50);

	 	 if((Local_U16Temp<18)){
    199e:	fe 01       	movw	r30, r28
    19a0:	e7 5b       	subi	r30, 0xB7	; 183
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	82 31       	cpi	r24, 0x12	; 18
    19aa:	91 05       	cpc	r25, r1
    19ac:	70 f4       	brcc	.+28     	; 0x19ca <main+0x372>
	 			DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_INPUT);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	63 e0       	ldi	r22, 0x03	; 3
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
	 		//DIO_VidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
				OCR0=0;
    19b8:	ec e5       	ldi	r30, 0x5C	; 92
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	10 82       	st	Z, r1

	 		 temp='l';
    19be:	fe 01       	movw	r30, r28
    19c0:	e9 5b       	subi	r30, 0xB9	; 185
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	8c e6       	ldi	r24, 0x6C	; 108
    19c6:	80 83       	st	Z, r24
    19c8:	9f ce       	rjmp	.-706    	; 0x1708 <main+0xb0>
	 	 }else{
			DIO_VidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	63 e0       	ldi	r22, 0x03	; 3
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_VidSetPinDirection>
	 		//DIO_VidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_HIGH);

			  if((Local_U16Temp>=18)&&(Local_U16Temp<25)){
    19d4:	fe 01       	movw	r30, r28
    19d6:	e7 5b       	subi	r30, 0xB7	; 183
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	82 31       	cpi	r24, 0x12	; 18
    19e0:	91 05       	cpc	r25, r1
    19e2:	08 f4       	brcc	.+2      	; 0x19e6 <main+0x38e>
    19e4:	85 c0       	rjmp	.+266    	; 0x1af0 <main+0x498>
    19e6:	fe 01       	movw	r30, r28
    19e8:	e7 5b       	subi	r30, 0xB7	; 183
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	89 31       	cpi	r24, 0x19	; 25
    19f2:	91 05       	cpc	r25, r1
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <main+0x3a0>
    19f6:	7c c0       	rjmp	.+248    	; 0x1af0 <main+0x498>
						OCR0=45;
    19f8:	ec e5       	ldi	r30, 0x5C	; 92
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	8d e2       	ldi	r24, 0x2D	; 45
    19fe:	80 83       	st	Z, r24
			 			temp='m';
    1a00:	fe 01       	movw	r30, r28
    1a02:	e9 5b       	subi	r30, 0xB9	; 185
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	8d e6       	ldi	r24, 0x6D	; 109
    1a08:	80 83       	st	Z, r24
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a8 e4       	ldi	r26, 0x48	; 72
    1a10:	b2 e4       	ldi	r27, 0x42	; 66
    1a12:	8f a3       	std	Y+39, r24	; 0x27
    1a14:	98 a7       	std	Y+40, r25	; 0x28
    1a16:	a9 a7       	std	Y+41, r26	; 0x29
    1a18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	4a ef       	ldi	r20, 0xFA	; 250
    1a28:	54 e4       	ldi	r21, 0x44	; 68
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	8b a3       	std	Y+35, r24	; 0x23
    1a34:	9c a3       	std	Y+36, r25	; 0x24
    1a36:	ad a3       	std	Y+37, r26	; 0x25
    1a38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a40:	9e a1       	ldd	r25, Y+38	; 0x26
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <main+0x404>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9a a3       	std	Y+34, r25	; 0x22
    1a58:	89 a3       	std	Y+33, r24	; 0x21
    1a5a:	3f c0       	rjmp	.+126    	; 0x1ada <main+0x482>
	else if (__tmp > 65535)
    1a5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a60:	8d a1       	ldd	r24, Y+37	; 0x25
    1a62:	9e a1       	ldd	r25, Y+38	; 0x26
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	57 e4       	ldi	r21, 0x47	; 71
    1a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	4c f5       	brge	.+82     	; 0x1ac6 <main+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a74:	6f a1       	ldd	r22, Y+39	; 0x27
    1a76:	78 a5       	ldd	r23, Y+40	; 0x28
    1a78:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9a a3       	std	Y+34, r25	; 0x22
    1a9a:	89 a3       	std	Y+33, r24	; 0x21
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <main+0x464>
    1a9e:	88 ec       	ldi	r24, 0xC8	; 200
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	98 a3       	std	Y+32, r25	; 0x20
    1aa4:	8f 8f       	std	Y+31, r24	; 0x1f
    1aa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aa8:	98 a1       	ldd	r25, Y+32	; 0x20
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <main+0x452>
    1aae:	98 a3       	std	Y+32, r25	; 0x20
    1ab0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	9a a3       	std	Y+34, r25	; 0x22
    1aba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abc:	89 a1       	ldd	r24, Y+33	; 0x21
    1abe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <main+0x446>
    1ac4:	21 ce       	rjmp	.-958    	; 0x1708 <main+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aca:	8d a1       	ldd	r24, Y+37	; 0x25
    1acc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9a a3       	std	Y+34, r25	; 0x22
    1ad8:	89 a3       	std	Y+33, r24	; 0x21
    1ada:	89 a1       	ldd	r24, Y+33	; 0x21
    1adc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ade:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ae2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ae4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <main+0x48e>
    1aea:	9e 8f       	std	Y+30, r25	; 0x1e
    1aec:	8d 8f       	std	Y+29, r24	; 0x1d
    1aee:	0c ce       	rjmp	.-1000   	; 0x1708 <main+0xb0>

						_delay_ms(50);
				  }else if((Local_U16Temp>25) && (Local_U16Temp<30)){
    1af0:	fe 01       	movw	r30, r28
    1af2:	e7 5b       	subi	r30, 0xB7	; 183
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	8a 31       	cpi	r24, 0x1A	; 26
    1afc:	91 05       	cpc	r25, r1
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <main+0x4aa>
    1b00:	85 c0       	rjmp	.+266    	; 0x1c0c <main+0x5b4>
    1b02:	fe 01       	movw	r30, r28
    1b04:	e7 5b       	subi	r30, 0xB7	; 183
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	8e 31       	cpi	r24, 0x1E	; 30
    1b0e:	91 05       	cpc	r25, r1
    1b10:	08 f0       	brcs	.+2      	; 0x1b14 <main+0x4bc>
    1b12:	7c c0       	rjmp	.+248    	; 0x1c0c <main+0x5b4>
						OCR0=102;
    1b14:	ec e5       	ldi	r30, 0x5C	; 92
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	86 e6       	ldi	r24, 0x66	; 102
    1b1a:	80 83       	st	Z, r24
			 			temp='h';
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e9 5b       	subi	r30, 0xB9	; 185
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	88 e6       	ldi	r24, 0x68	; 104
    1b24:	80 83       	st	Z, r24
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a8 e4       	ldi	r26, 0x48	; 72
    1b2c:	b2 e4       	ldi	r27, 0x42	; 66
    1b2e:	89 8f       	std	Y+25, r24	; 0x19
    1b30:	9a 8f       	std	Y+26, r25	; 0x1a
    1b32:	ab 8f       	std	Y+27, r26	; 0x1b
    1b34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	69 8d       	ldd	r22, Y+25	; 0x19
    1b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a ef       	ldi	r20, 0xFA	; 250
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8d 8b       	std	Y+21, r24	; 0x15
    1b50:	9e 8b       	std	Y+22, r25	; 0x16
    1b52:	af 8b       	std	Y+23, r26	; 0x17
    1b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b56:	6d 89       	ldd	r22, Y+21	; 0x15
    1b58:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <main+0x520>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <main+0x59e>
	else if (__tmp > 65535)
    1b78:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <main+0x58a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	69 8d       	ldd	r22, Y+25	; 0x19
    1b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <main+0x580>
    1bba:	88 ec       	ldi	r24, 0xC8	; 200
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9a 8b       	std	Y+18, r25	; 0x12
    1bc0:	89 8b       	std	Y+17, r24	; 0x11
    1bc2:	89 89       	ldd	r24, Y+17	; 0x11
    1bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <main+0x56e>
    1bca:	9a 8b       	std	Y+18, r25	; 0x12
    1bcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <main+0x562>
    1be0:	93 cd       	rjmp	.-1242   	; 0x1708 <main+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6d 89       	ldd	r22, Y+21	; 0x15
    1be4:	7e 89       	ldd	r23, Y+22	; 0x16
    1be6:	8f 89       	ldd	r24, Y+23	; 0x17
    1be8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9c 8b       	std	Y+20, r25	; 0x14
    1bf4:	8b 8b       	std	Y+19, r24	; 0x13
    1bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfa:	98 8b       	std	Y+16, r25	; 0x10
    1bfc:	8f 87       	std	Y+15, r24	; 0x0f
    1bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c00:	98 89       	ldd	r25, Y+16	; 0x10
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <main+0x5aa>
    1c06:	98 8b       	std	Y+16, r25	; 0x10
    1c08:	8f 87       	std	Y+15, r24	; 0x0f
    1c0a:	7e cd       	rjmp	.-1284   	; 0x1708 <main+0xb0>
						_delay_ms(50);
					}
					else if((Local_U16Temp>30)){
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e7 5b       	subi	r30, 0xB7	; 183
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	8f 31       	cpi	r24, 0x1F	; 31
    1c18:	91 05       	cpc	r25, r1
    1c1a:	08 f4       	brcc	.+2      	; 0x1c1e <main+0x5c6>
    1c1c:	75 cd       	rjmp	.-1302   	; 0x1708 <main+0xb0>
									OCR0=255;
    1c1e:	ec e5       	ldi	r30, 0x5C	; 92
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	80 83       	st	Z, r24
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a8 e4       	ldi	r26, 0x48	; 72
    1c2c:	b2 e4       	ldi	r27, 0x42	; 66
    1c2e:	8b 87       	std	Y+11, r24	; 0x0b
    1c30:	9c 87       	std	Y+12, r25	; 0x0c
    1c32:	ad 87       	std	Y+13, r26	; 0x0d
    1c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a ef       	ldi	r20, 0xFA	; 250
    1c44:	54 e4       	ldi	r21, 0x44	; 68
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8f 83       	std	Y+7, r24	; 0x07
    1c50:	98 87       	std	Y+8, r25	; 0x08
    1c52:	a9 87       	std	Y+9, r26	; 0x09
    1c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c56:	6f 81       	ldd	r22, Y+7	; 0x07
    1c58:	78 85       	ldd	r23, Y+8	; 0x08
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <main+0x620>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <main+0x69e>
	else if (__tmp > 65535)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <main+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <main+0x680>
    1cba:	88 ec       	ldi	r24, 0xC8	; 200
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <main+0x66e>
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <main+0x662>
    1ce0:	13 cd       	rjmp	.-1498   	; 0x1708 <main+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <main+0x6aa>
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	fe cc       	rjmp	.-1540   	; 0x1708 <main+0xb0>

00001d0c <__mulsi3>:
    1d0c:	62 9f       	mul	r22, r18
    1d0e:	d0 01       	movw	r26, r0
    1d10:	73 9f       	mul	r23, r19
    1d12:	f0 01       	movw	r30, r0
    1d14:	82 9f       	mul	r24, r18
    1d16:	e0 0d       	add	r30, r0
    1d18:	f1 1d       	adc	r31, r1
    1d1a:	64 9f       	mul	r22, r20
    1d1c:	e0 0d       	add	r30, r0
    1d1e:	f1 1d       	adc	r31, r1
    1d20:	92 9f       	mul	r25, r18
    1d22:	f0 0d       	add	r31, r0
    1d24:	83 9f       	mul	r24, r19
    1d26:	f0 0d       	add	r31, r0
    1d28:	74 9f       	mul	r23, r20
    1d2a:	f0 0d       	add	r31, r0
    1d2c:	65 9f       	mul	r22, r21
    1d2e:	f0 0d       	add	r31, r0
    1d30:	99 27       	eor	r25, r25
    1d32:	72 9f       	mul	r23, r18
    1d34:	b0 0d       	add	r27, r0
    1d36:	e1 1d       	adc	r30, r1
    1d38:	f9 1f       	adc	r31, r25
    1d3a:	63 9f       	mul	r22, r19
    1d3c:	b0 0d       	add	r27, r0
    1d3e:	e1 1d       	adc	r30, r1
    1d40:	f9 1f       	adc	r31, r25
    1d42:	bd 01       	movw	r22, r26
    1d44:	cf 01       	movw	r24, r30
    1d46:	11 24       	eor	r1, r1
    1d48:	08 95       	ret

00001d4a <__udivmodhi4>:
    1d4a:	aa 1b       	sub	r26, r26
    1d4c:	bb 1b       	sub	r27, r27
    1d4e:	51 e1       	ldi	r21, 0x11	; 17
    1d50:	07 c0       	rjmp	.+14     	; 0x1d60 <__udivmodhi4_ep>

00001d52 <__udivmodhi4_loop>:
    1d52:	aa 1f       	adc	r26, r26
    1d54:	bb 1f       	adc	r27, r27
    1d56:	a6 17       	cp	r26, r22
    1d58:	b7 07       	cpc	r27, r23
    1d5a:	10 f0       	brcs	.+4      	; 0x1d60 <__udivmodhi4_ep>
    1d5c:	a6 1b       	sub	r26, r22
    1d5e:	b7 0b       	sbc	r27, r23

00001d60 <__udivmodhi4_ep>:
    1d60:	88 1f       	adc	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	5a 95       	dec	r21
    1d66:	a9 f7       	brne	.-22     	; 0x1d52 <__udivmodhi4_loop>
    1d68:	80 95       	com	r24
    1d6a:	90 95       	com	r25
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	08 95       	ret

00001d72 <__prologue_saves__>:
    1d72:	2f 92       	push	r2
    1d74:	3f 92       	push	r3
    1d76:	4f 92       	push	r4
    1d78:	5f 92       	push	r5
    1d7a:	6f 92       	push	r6
    1d7c:	7f 92       	push	r7
    1d7e:	8f 92       	push	r8
    1d80:	9f 92       	push	r9
    1d82:	af 92       	push	r10
    1d84:	bf 92       	push	r11
    1d86:	cf 92       	push	r12
    1d88:	df 92       	push	r13
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	ca 1b       	sub	r28, r26
    1d9c:	db 0b       	sbc	r29, r27
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	09 94       	ijmp

00001daa <__epilogue_restores__>:
    1daa:	2a 88       	ldd	r2, Y+18	; 0x12
    1dac:	39 88       	ldd	r3, Y+17	; 0x11
    1dae:	48 88       	ldd	r4, Y+16	; 0x10
    1db0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1db2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1db4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1db6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1db8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1dba:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dbc:	b9 84       	ldd	r11, Y+9	; 0x09
    1dbe:	c8 84       	ldd	r12, Y+8	; 0x08
    1dc0:	df 80       	ldd	r13, Y+7	; 0x07
    1dc2:	ee 80       	ldd	r14, Y+6	; 0x06
    1dc4:	fd 80       	ldd	r15, Y+5	; 0x05
    1dc6:	0c 81       	ldd	r16, Y+4	; 0x04
    1dc8:	1b 81       	ldd	r17, Y+3	; 0x03
    1dca:	aa 81       	ldd	r26, Y+2	; 0x02
    1dcc:	b9 81       	ldd	r27, Y+1	; 0x01
    1dce:	ce 0f       	add	r28, r30
    1dd0:	d1 1d       	adc	r29, r1
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	ed 01       	movw	r28, r26
    1dde:	08 95       	ret

00001de0 <_exit>:
    1de0:	f8 94       	cli

00001de2 <__stop_program>:
    1de2:	ff cf       	rjmp	.-2      	; 0x1de2 <__stop_program>
